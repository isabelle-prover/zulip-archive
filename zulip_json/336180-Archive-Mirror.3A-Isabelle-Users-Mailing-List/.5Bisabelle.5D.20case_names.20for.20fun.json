[
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;<br>\nDear Isabelle,</p>\n<p>I have a function f defined recursively using \"fun\". When I do induction using f.induct, the case names are \"1\" and \"2\". How can I set them to more useful names?</p>\n<p>Thank you,<br>\nJohn</p>",
        "id": 294152977,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850016
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nYou can do this with:</p>\n<p>declare f.induct[case_names name1 name2]</p>\n<p>-- Lars</p>",
        "id": 294152991,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850021
    },
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;<br>\nThanks Lars. I actually tried that already, but it doesn't work. Below is a snippet of my theory file. After the last line, Isabelle says 'Unknown case: \"name1\"'. </p>\n<p>--------8&lt;-----------</p>\n<p>fun mk_inner_vertex_inj :: \"inner_vertex list \\&lt;Rightarrow&gt; inner_vertex list \\&lt;Rightarrow&gt; (inner_vertex \\&lt;Rightarrow&gt; inner_vertex)\" <br>\nwhere <br>\n  \"mk_inner_vertex_inj [] X = id\"<br>\n| \"mk_inner_vertex_inj (i#I) X = (<br>\n  let J = (mk_inner_vertex_inj I X) in<br>\n  let j = (SOME j. j \\&lt;notin&gt; image J (set I) \\&lt;and&gt; j \\&lt;notin&gt; set X) in <br>\n  J (i := j))\"</p>\n<p>declare mk_inner_vertex_inj.induct[case_names name1 name2]</p>\n<p>lemma \"inj_on (mk_inner_vertex_inj I X) (set I)\"<br>\nproof (intro inj_onI)<br>\n  fix a b<br>\n  assume \"a \\&lt;in&gt; set I\"<br>\n    and \"b \\&lt;in&gt; set I\"<br>\n    and \"mk_inner_vertex_inj I X a = mk_inner_vertex_inj I X b\"<br>\n  thus \"a=b\"<br>\n  proof (induct rule: mk_inner_vertex_inj.induct)<br>\n    case (name1 X)</p>\n<p>--------8&lt;-----------</p>",
        "id": 294153001,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850027
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nYes, you are right. The case_names attribute does not modify lemma, but <br>\nreturns a modified lemma. So</p>\n<p>(induct rule: mk_inner_vertex_inj.induct[case_names name1 name2]</p>\n<p>will work, and</p>\n<p>lemmas my_induct_rule<br>\n      = mk_inner_vertex_inj.induct[case_names name1, name2]</p>\n<p>will work, too.</p>\n<p>-- Lars</p>",
        "id": 294153015,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850033
    },
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;<br>\nLovely. Many thanks Lars. For the benefit of future readers, the second statement should have no comma, i.e. it should read:</p>",
        "id": 294153082,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850045
    }
]