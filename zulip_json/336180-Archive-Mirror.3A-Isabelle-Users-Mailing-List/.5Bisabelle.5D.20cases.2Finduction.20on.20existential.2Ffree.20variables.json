[
    {
        "content": "<p>From: Chris Capel &lt;<a href=\"mailto:pdf23ds@gmail.com\">pdf23ds@gmail.com</a>&gt;<br>\ndatatype dt = A nat | B dt list;<br>\nlemma \"EX (x :: dt). P x\"</p>\n<p>Assuming that producing an existential witness is out of the question<br>\nin the actual circumstance, how do I prove this? I.e., how do I apply<br>\ncases or induct on it? I'm thinking that the way would be to transform<br>\nit into something like</p>\n<p>\"EX x. (case x of A n =&gt; P' n | _ =&gt; False) | (case x of B n =&gt; P'' n<br>\n| _ =&gt; False)\"</p>\n<p>But I don't know how to accomplish this. (BTW, is there a more<br>\nsuccinct way to express that term?)</p>\n<p>Upon further thought, it seems that actually the best way is to just<br>\npick some good term to substitute for x, and then simplify. However,<br>\nI've encountered a problem with this as well. I have a lemma \"!!z. EX<br>\nx. P x\", and I need my substitution for \"x\" to depend on \"z\" to make<br>\nsense.</p>\n<p>However, applying rule exI[of _ \"Q z\"] doesn't work--\"z\" can't be<br>\ncaptured this way; it's renamed to \"za\". Do I actually need to change<br>\nmy lemma to read \"!!z EX (x z). P (x z)\"? That's kind of painful.</p>\n<p>Chris Capel</p>",
        "id": 294072775,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660827757
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nQuoting Chris Capel &lt;<a href=\"mailto:pdf23ds@gmail.com\">pdf23ds@gmail.com</a>&gt;:</p>\n<blockquote>\n<p>However, applying rule exI[of _ \"Q z\"] doesn't work--\"z\" can't be<br>\ncaptured this way; it's renamed to \"za\".</p>\n</blockquote>\n<p>Using the \"of\" attribute only works in this way if \"z\" is a free  <br>\nvariable. In your case, it appears that \"z\" is bound by a  <br>\nmeta-universal quantifier within your proof subgoal; there is no way  <br>\nto refer to such variables using the \"of\" or \"where\" attributes.</p>\n<p>You have two alternatives:</p>\n<ol>\n<li>\n<p>Use Isar-style declarative proofs. When proving this subgoal, you  <br>\ncan \"fix z\", after which \"z\" can be referred to as a free variable.</p>\n</li>\n<li>\n<p>Stay with apply-style proofs, but use \"rule_tac\".  The \"_tac\"  <br>\nvariations of tactics <em>can</em> refer to meta-universal-bound variables  <br>\nwithin your subgoal. For example, try</p>\n</li>\n</ol>\n<p>apply (rule_tac x=\"Q z\" in exI)</p>\n<p>Hope this helps,</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294072853,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660827788
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>datatype dt = A nat | B dt list;<br>\nlemma \"EX (x :: dt). P x\"</p>\n<p>Assuming that producing an existential witness is out of the question<br>\nin the actual circumstance, how do I prove this? I.e., how do I apply<br>\ncases or induct on it? I'm thinking that the way would be to transform<br>\nit into something like</p>\n<p>\"EX x. (case x of A n =&gt; P' n | _ =&gt; False) | (case x of B n =&gt; P'' n<br>\n| _ =&gt; False)\"</p>\n</blockquote>\n<p>Why not just \"case x of A n =&gt; P' n | B n =&gt; P'' n\"?</p>\n<blockquote>\n<p>But I don't know how to accomplish this. (BTW, is there a more<br>\nsuccinct way to express that term?)</p>\n</blockquote>\n<p>If you want to rewrite \"EX (x :: dt). P x\" into some other form, you can<br>\ndo it explicitly by stating the subgoal \"(EX (x :: dt). P x) = ...\",<br>\nwhich you prove in the usual way (you may need extensionality here, rule<br>\n\"ext\").</p>\n<p>Tobias</p>",
        "id": 294072873,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660827798
    },
    {
        "content": "<p>From: Chris Capel &lt;<a href=\"mailto:pdf23ds@gmail.com\">pdf23ds@gmail.com</a>&gt;<br>\nOn Mon, Feb 23, 2009 at 08:30, Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt; wrote:</p>\n<blockquote>\n<p>You have two alternatives:</p>\n<ol>\n<li>Use Isar-style declarative proofs. When proving this subgoal, you can<br>\n\"fix z\", after which \"z\" can be referred to as a free variable.</li>\n</ol>\n</blockquote>\n<p>This is helpful. But apply scripts are so much easier to do than Isar<br>\nwhen you don't know either well!</p>\n<blockquote>\n<ol start=\"2\">\n<li>Stay with apply-style proofs, but use \"rule_tac\".  The \"_tac\" variations<br>\nof tactics <em>can</em> refer to meta-universal-bound variables within your<br>\nsubgoal. For example, try</li>\n</ol>\n<p>apply (rule_tac x=\"Q z\" in exI)</p>\n</blockquote>\n<p>And this is exactly what I was looking for. I'm curious--why the<br>\ndifference in behavior? The documentation seems cryptic on this point.</p>\n<p>I hadn't been aware of the difference between this and (rule_tac<br>\nexI[of _ \"Q z\"]).</p>\n<p>On Mon, Feb 23, 2009 at 14:56, Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>If you want to rewrite \"EX (x :: dt). P x\" into some other form, you can<br>\ndo it explicitly by stating the subgoal \"(EX (x :: dt). P x) = ...\",<br>\nwhich you prove in the usual way (you may need extensionality here, rule<br>\n\"ext\").</p>\n</blockquote>\n<p>Ah, yes. I think I accomplished what you speak of here using<br>\nsubgoal_tac followed by assumption, without needing extensionality.<br>\nThis disadvantage from rule_tac being that I have to state my entire Q<br>\nagain, which is quite large. However, with Isar I can use the \"is\"<br>\nkeyword and it's not a problem.</p>\n<p>Thank you all,<br>\nChris Capel</p>",
        "id": 294072908,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660827812
    }
]