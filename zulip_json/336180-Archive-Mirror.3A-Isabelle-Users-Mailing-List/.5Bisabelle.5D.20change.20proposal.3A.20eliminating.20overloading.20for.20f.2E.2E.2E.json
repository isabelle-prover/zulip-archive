[
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI would like to discuss the question of overloading on fact, the factorial function.</p>\n<p>Currently, this function (introduced in src/HOL/Fact.thy) is overloaded, with separate but equivalent definitions on the natural numbers and the integers. The domain of the factorial function is extended to negative integers like this:</p>\n<p>\"fact_int x = (if x &gt;= 0 then int (fact (nat x)) else 0)\"</p>\n<p>The point of the overloading is to allow fact to be used in both int and nat contexts. However, Isabelle now provides automatic coercions between types. This removes the original motivation while introducing a significant drawback: an occurrence of the function fact in an arithmetical context now becomes ambiguous, and it is possible to get equivalent-looking formulas that have different instances of the function fact, with implicit coercions making the types work out. But such formulas are not equal.</p>\n<p>I would like to propose removing the overloading on the factorial function and having the natural number version only. The natural numbers are the actual domain of this function, and implicit coercions allow its use or integers or reals are expected.</p>\n<p>Comments welcome!</p>\n<p>Larry Paulson</p>",
        "id": 294326856,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928845
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nI also second this proposal, the definition of fact_int is quite<br>\nstrange.</p>\n<p>What about defining fact semi-polymorphic? Like<br>\n  fact :: nat =&gt; 'a::semiring_1</p>\n<p>then we do not need to depend on coercions, only on typeclasses. And in<br>\nsemiring_1 the defining fact-equations should hold. </p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294326981,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928882
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI have nothing to add concerning overloading, just the plain name: call it <br>\n\"factorial\" (and the theory \"Factorial\") to say more clearly what it is.</p>\n<p>Makarius</p>",
        "id": 294327070,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928906
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nAm Samstag, den 28.02.2015, 11:09 +0000 schrieb Larry Paulson:</p>\n<blockquote>\n<p>Presumably for the Fibonacci numbers too? Currently</p>\n<p>fun fib :: \"nat \\&lt;Rightarrow&gt; nat\"<br>\nwhere<br>\n    fib0: \"fib 0 = 0\"<br>\n  | fib1: \"fib (Suc 0) = 1\"<br>\n  | fib2: \"fib (Suc (Suc n)) = fib (Suc n) + fib n\"</p>\n</blockquote>\n<p>Hm, I don't know, I would be careful to introduce too much generality.<br>\nEven simple rules like \"0 &lt;= fact n\" or \"0 &lt;= fib n\" need to be<br>\nannotated with a type class constraint.</p>\n<p>I made the suggestion for fact as it is used a lot for transcendental<br>\nfunctions.</p>\n<ul>\n<li>Johannes</li>\n</ul>\n<blockquote>\n<p>On 28 Feb 2015, at 08:18, Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt; wrote:</p>\n<blockquote>\n<blockquote>\n<p>What about defining fact semi-polymorphic? Like<br>\n fact :: nat =&gt; 'a::semiring_1</p>\n</blockquote>\n<p>The nice thing about this is that simple propositions involving numerals<br>\nare provable out of the box:</p>\n<blockquote>\n<p>context semiring_1<br>\nbegin</p>\n<p>primrec factorial :: \"nat ⇒ 'a\"<br>\nwhere<br>\n \"factorial 0 = 1\"<br>\n| \"factorial (Suc n) = of_nat (Suc n) * factorial n\"</p>\n<p>lemma \"factorial 3 = 6\"<br>\n by (simp add: eval_nat_numeral)</p>\n<p>end</p>\n</blockquote>\n<p>This is again one of the things where you ask yourself how it could have<br>\nbeen different in the past after you got used to it.</p>\n<p>Florian</p>\n<p>-- </p>\n<p>PGP available:<br>\n<a href=\"http://home.informatik.tu-muenchen.de/haftmann/pgp/florian_haftmann_at_informatik_tu_muenchen_de\">http://home.informatik.tu-muenchen.de/haftmann/pgp/florian_haftmann_at_informatik_tu_muenchen_de</a></p>\n</blockquote>\n</blockquote>",
        "id": 294329485,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929742
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nOn So, 2015-03-01 at 09:27 +0100, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>On 27/02/2015 17:42, Makarius wrote:</p>\n<blockquote>\n<p>On Fri, 27 Feb 2015, Larry Paulson wrote:</p>\n<blockquote>\n<p>I would like to discuss the question of overloading on fact, the factorial<br>\nfunction.</p>\n</blockquote>\n<p>I have nothing to add concerning overloading, just the plain name: call it<br>\n\"factorial\" (and the theory \"Factorial\") to say more clearly what it is.<br>\n</p>\n</blockquote>\n<p>I support this - provided we have a nice short syntax for \"factorial\", ideally <br>\nthe canonical \"!\". Maybe it is time to give up the ancient \"!\" syntax for \\&lt;forall&gt;?<br>\n</p>\n</blockquote>\n<p>As long as the ! does not clash with the binary infix operator ! on<br>\nlists, e.g., \"a! - b\" as \"fac a - b\" or \"nth a (-b)\" </p>\n<p>Peter</p>\n<blockquote>\n<p>Tobias<br>\n</p>\n</blockquote>",
        "id": 294330920,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660930213
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nYes, nat + automatic coercion is better!</p>\n<p>As a test, I replaced \"real (fact\" by \"(fact\" in<br>\nTranscendental and it works with one exception<br>\n(which has the wrong type: \"2 * 2 ^ n ≤ real (fact (n + 2))\").<br>\nDmitriy did a very good job :-) </p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294330949,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660930222
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 2 Mar 2015, Manuel Eberl wrote:</p>\n<blockquote>\n<p>My experiments yesterday seemed to indicate that it might work.</p>\n</blockquote>\n<p>That was mixfix (\"_ !\" 999), but with the default priority 0 for the <br>\nargument, it will hardly work at all.  It should be probably 1000.</p>\n<p>Concrete syntax always needs some careful planning, and systematic <br>\ninspection of existing grammars.  It should be easy to look through all <br>\nmixfix declarations in Isabelle examples and AFP applications that mention <br>\n\"!\" -- with the help of a little instrumentation in Pure.  Then it is <br>\npossible to see which changes have a chance to work.</p>\n<blockquote>\n<p>The \\&lt;bold&gt;! thing should work in any case. (Although, ironically,<br>\n\\&lt;bold&gt;! looks a lot less bold than the regular ! in JEdit)</p>\n</blockquote>\n<p>Maybe a problem with your local configuration.  The default IsabelleText <br>\nfont and the default font-rendering enging (of official Java 7 shipped <br>\nwith Isabelle) should show a bold \"!\" as expected.</p>\n<p>The Isabelle/jEdit manual has this explanation on Isabelle symbols and the <br>\nall-important Isabelle font:</p>\n<p>\\medskip \\paragraph{Font.} Correct rendering via Unicode requires a<br>\n   font that contains glyphs for the corresponding codepoints.  Most<br>\n   system fonts lack that, so Isabelle/jEdit prefers its own<br>\n   application font @{verbatim IsabelleText}, which ensures that<br>\n   standard collection of Isabelle symbols are actually seen on the<br>\n   screen (or printer).</p>\n<p>Note that a Java/AWT/Swing application can load additional fonts only if<br>\n   they are not installed on the operating system already! Some outdated<br>\n   version of @{verbatim IsabelleText} that happens to be provided by the<br>\n   operating system would prevent Isabelle/jEdit to use its bundled version.<br>\n   This could lead to missing glyphs (black rectangles), when the system<br>\n   version of @{verbatim IsabelleText} is older than the application version.<br>\n   This problem can be avoided by refraining to ``install'' any version of<br>\n   @{verbatim IsabelleText} in the first place, although it is occasionally<br>\n   tempting to use the same font in other applications.</p>\n<p>If that is not the problem, it might be the slightly odd font-rendering <br>\nengine of some OpenJDK versions, if you happen to use one.  (This requires <br>\nmanual tinkering in the first place, because standard Oracle Java is <br>\nalways the default in Isabelle.)</p>\n<p>Makarius</p>",
        "id": 294632464,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661158827
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat is a question of input methods in the Prover IDE.  In Isabelle2014, <br>\nthe default etc/symbols provides various input abbreviations that resemble <br>\ntraditional ASCII replacement syntax, e.g. \"!\" for \"\\&lt;forall&gt;\" and \"--&gt;\" <br>\nfor \"\\&lt;longrightarrow&gt;\".  Thus the C+b key sequence in Isabelle/jEdit can <br>\nbe used to upgrade old sources manually.</p>\n<p>When the Prover IDE supports \"refactoring\" of traditional syntax into <br>\nproper Isabelle symbol syntax directly, the above coincidence of input <br>\nmethods and input syntax may disappear: one could reconsider the input <br>\nabbreviations from scratch.  Although I felt nostalgic about certain <br>\ncharacter sequences when doing this, in allowing to replace the really <br>\nancient Un by \\&lt;union&gt;, for example.</p>\n<p>Once we are actually there with the IDE support, one could resolve the <br>\ndelicate question which input abbreviations are provided by default by <br>\neasier user configuration of the same.  (Presently it requires manual <br>\nediting of etc/symbols files and a reboot of the PIDE.)</p>\n<p>Makarius</p>",
        "id": 294632475,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661158833
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe Isabelle/jEdit manual has a long explanation on completion.  The above <br>\ncase falls under \"Input events\" for \"syntax keywords\" (because some <br>\nalphabetic text is to be replaced).  It says:</p>\n<p>\\item Completion of syntax keywords requires at least 3 relevant<br>\n   characters in the text.</p>\n<p>Explicit completion always works, regardless of the input length.</p>\n<p>Anyway, I consider the replacements of ALL, EX etc. as <em>very</em> nostalgic.</p>\n<p>Makarius</p>",
        "id": 294632631,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661158896
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI am generally in favour of removing the old ASCII variants of well-known <br>\nPure and HOL syntax, but it will probably also take a few more years get <br>\nthere.  (The Prover IDE could eventually provide systematic support for <br>\nthis.)</p>\n<p>Having \"!\" as prefix operator (all), infix operator (nth), and postfix <br>\noperator (factorial) might or might not work, depending of the chosen <br>\nsyntactic priorities.  Note that one also needs to consider robustness in <br>\ncase of bad or partial input, i.e. the potential for user confusion due to <br>\nerrors.</p>\n<p>We also have brute-force disambiguation via type-inference for tough <br>\ncases, but I don't like that very much -- it has caused a lot of technical <br>\nproblems over the years.</p>\n<p>A more defensive notation could use \\&lt;^bold&gt;! instead, which is easy to <br>\ntype in Isabelle/jEdit, at least for people who know how to type it.</p>\n<p>Makarius</p>",
        "id": 294632632,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661158896
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIIRC, Isabelle92 or Isabelle93 had possibilities to change concrete syntax <br>\ndepending on the Pure/HOL type of the expression.  But it was not exactly <br>\nright in the parser implementation, and there was a conceptual mismatch <br>\nwith Hindley-Milner type-inference.  Thus it disappeared a bit later, and <br>\ngot replaced by the built-in disambiguation of parsed results via <br>\ntype-inference (which can cause huge blow-up of possibilities, and <br>\nuser-confusion in situations of syntax error).</p>\n<p>BTW, as far as I can tell, the current isar-ref and implementation manuals <br>\nexplain the (complex) syntax layers of Isabelle quite faithfully, although <br>\nit is a long and entangled way through all of it.</p>\n<p>Makarius</p>",
        "id": 294632636,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661158896
    }
]