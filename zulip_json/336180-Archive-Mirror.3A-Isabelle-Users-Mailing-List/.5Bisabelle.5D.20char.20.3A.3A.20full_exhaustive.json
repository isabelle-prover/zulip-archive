[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear Florian,</p>\n<p>you changed the representation of characters a while back, but it seems<br>\nlike the Quickcheck setup is lacking a \"full_exhaustive\" instance.</p>\n<p>The stupidest possible workaround is</p>\n<p>quickcheck_generator char constructors: char_of_nat</p>\n<p>... which I have just added locally to my theories.</p>\n<p>Maybe we should think about a proper implementation.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294701421,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179266
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear list,</p>\n<p>some time around 2016 the instance char :: full_exhaustive got commented <br>\nout and FIXME'd. I'm assuming this has something to do with the change <br>\nin char representation in HOL.</p>\n<p>The big problem with the missing instance is that Auto Quickcheck <br>\ndoesn't appear to trigger for goals containing strings, or containing <br>\ndatatypes that contain strings. This in particular is annoying because <br>\none always has to remember typing \"quickcheck [random]\".</p>\n<p>Can this situation be rectified easily? Unfortunately I still don't know <br>\nhow to properly write those instances, so if somebody could point me to <br>\na similar example, I could implement it. Otherwise I'd like to defer to <br>\nFlorian.</p>\n<p>(The instance is still not present in the repository as of today.)</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294722682,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185376
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Lars,</p>\n<p>Here's my suggestion how to implement full_exhaustive for Chars with the constructors 0 <br>\nand Char:</p>\n<p>instantiation char :: full_exhaustive<br>\nbegin</p>\n<p>definition full_exhaustive_char<br>\nwhere<br>\n   \"full_exhaustive_char f i =<br>\n      (if 0 &lt; i then<br>\n       case f (0, λ_ :: unit. Code_Evaluation.Const (STR ''<a href=\"http://Groups.zero_class.zero\">Groups.zero_class.zero</a>'') <br>\n(TYPEREP(char))) of<br>\n           Some x ⇒ Some x<br>\n       | None ⇒ full_exhaustive_class.full_exhaustive<br>\n           (λ(num, t). f (Char num, λ_ :: unit. Code_Evaluation.Const (STR <br>\n''String.char'') TYPEREP(num ⇒ char)))<br>\n           (min (i - 1) 8) (* generate at most 8 bits *)<br>\n       else None)\"</p>\n<p>instance ..</p>\n<p>end</p>\n<p>Andreas</p>",
        "id": 294722704,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185385
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear Andreas,</p>\n<blockquote>\n<p>Here's my suggestion how to implement full_exhaustive for Chars with the<br>\nconstructors 0 and Char:</p>\n</blockquote>\n<p>I have just tried that out:</p>\n<p>lemma \"list_all (λx. x ≠ 0) x ⟹ x ≠ [] ⟹ (x :: char list) = y\"<br>\n  quickcheck</p>\n<p>Testing conjecture with Quickcheck-exhaustive...<br>\nexception TYPE raised (line 278 of \"sign.ML\"):<br>\n  Type error in application: incompatible operand type</p>\n<p>Operator:  op # :: char ⇒ char list ⇒ char list<br>\n  Operand:   ??.String.char :: num ⇒ char<br>\n  char ⇒ char list ⇒ char list<br>\n  num ⇒ char<br>\n  op #<br>\n  ??.String.char</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294722708,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185388
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Lars,</p>\n<p>Here's a version that should work:</p>\n<p>definition full_exhaustive_char<br>\nwhere<br>\n   \"full_exhaustive_char f i =<br>\n      (if 0 &lt; i then<br>\n       case f (0, λ_ :: unit. Code_Evaluation.Const (STR ''<a href=\"http://Groups.zero_class.zero\">Groups.zero_class.zero</a>'') <br>\n(TYPEREP(char))) of<br>\n           Some x ⇒ Some x<br>\n       | None ⇒ full_exhaustive_class.full_exhaustive<br>\n           (λ(num, t). f (Char num, λ_ :: unit. Code_Evaluation.App (Code_Evaluation.Const <br>\n(STR ''String.Char'') TYPEREP(num ⇒ char)) (t ())))<br>\n           (min (i - 1) 8) (* generate at most 8 bits *)<br>\n       else None)\"</p>\n<p>instance ..</p>\n<p>end</p>\n<p>Andreas</p>",
        "id": 294722715,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185394
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear Andreas,</p>\n<blockquote>\n<p>Here's a version that should work:</p>\n</blockquote>\n<p>that appears to work. I've pushed it to testboard now. Thanks!</p>\n<p>Lars</p>",
        "id": 294722796,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185425
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>that appears to work. I've pushed it to testboard now. Thanks!</p>\n</blockquote>\n<p>This is harder than it ought to be. This time we're being sabotaged by<br>\n\"Code_Char\":</p>\n<p>theory Scratch<br>\nimports<br>\n  \"HOL-Library.Code_Char\"<br>\nbegin</p>\n<p>lemma \"(x::char list) = x\"<br>\n  quickcheck</p>\n<p>Illegal character expression,<br>\nin equation full_exhaustive_char_inst.full_exhaustive_char</p>\n<p>It looks like the code generator really does not like occurrences of<br>\n\"Char x\" where \"x\" is not a numeral.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294722813,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185431
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Lars,</p>\n<p>OK, here is version 3:</p>\n<p>instantiation char :: full_exhaustive<br>\nbegin</p>\n<p>definition full_exhaustive_char<br>\nwhere<br>\n   \"full_exhaustive_char f i =<br>\n      (if 0 &lt; i then<br>\n       case f (0, λ_ :: unit. Code_Evaluation.Const (STR ''<a href=\"http://Groups.zero_class.zero\">Groups.zero_class.zero</a>'') <br>\n(TYPEREP(char))) of<br>\n           Some x ⇒ Some x<br>\n       | None ⇒ full_exhaustive_class.full_exhaustive<br>\n           (λ(num, t). f (char_of_nat (nat_of_num num), λ_ :: unit. Code_Evaluation.App <br>\n(Code_Evaluation.Const (STR ''String.Char'') TYPEREP(num ⇒ char)) (t ())))<br>\n           (min (i - 1) 8) (* generate at most 8 bits *)<br>\n       else None)\"</p>\n<p>instance ..</p>\n<p>end</p>\n<p>Andreas</p>",
        "id": 294722828,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185437
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>OK, here is version 3:</p>\n</blockquote>\n<p>This seems to have done the trick! See now 8fa951baba0d.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294722879,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185443
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Lars,</p>\n<p>Finally! Thanks for doing all the testing and integrating.</p>\n<p>Andreas</p>",
        "id": 294722894,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185449
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Andreas,</p>\n<p>thanks for working that out.  When working on characters, that slipped<br>\nsomehow through my fingers.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/Xr3dzqwvPgLVdeW6-etl8BMZ/signature.asc\">signature.asc</a></p>",
        "id": 294723072,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185523
    }
]