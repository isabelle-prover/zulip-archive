[
    {
        "content": "<p>From: Mathieu Giorgino &lt;<a href=\"mailto:Mathieu.Giorgino@irit.fr\">Mathieu.Giorgino@irit.fr</a>&gt;<br>\nHello all,</p>\n<p>I would like to make a class instance of a record extension but I cannot find <br>\nany lemma to manipulate the fields of this record extension.</p>\n<p>Concretely, here is an example:</p>\n<hr>\n<p>record point =<br>\n  Xcoord :: nat<br>\n  Ycoord :: nat</p>\n<p>instance point_ext_type :: (countable) countable<br>\nproof (rule countable_classI [of \"%p. to_nat (Xcoord p, Ycoord p, more p)\"])<br>\nqed (auto)</p>\n<p>record cpoint = point +<br>\n  color :: nat</p>\n<hr>\n<p>and I would like to prove this:</p>\n<hr>\n<p>instance cpoint_ext_type :: (countable) countable</p>\n<hr>\n<p>I would so need a mean to access the color and more fields of a <br>\ncpoint_ext_type, and to be able to prove things about them.</p>\n<p>I tried this:</p>\n<hr>\n<p>definition<br>\n  \"cpoint_ext_type_encode p<br>\n    = (let p' = point.extend undefined p in to_nat (color p', more p'))\"</p>\n<hr>\n<p>but then I did not find a way to convert a variable of type cpoint_ext_type <br>\ninto something like \"(|color = _, ... = _ |)\" which would allow to simplify<br>\n(|Xcoord = _, Ycoord = _, ... = p |)<br>\ninto<br>\n(|Xcoord = _, Ycoord = _, color = _, ... = _ |).</p>\n<p>Is there any (easy) way to do it ? Do I have to use the internal lemmas of the <br>\nrecord package ?</p>\n<p>Regards,</p>\n<p>Mathieu</p>",
        "id": 294113965,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837700
    },
    {
        "content": "<p>From: Mathieu Giorgino &lt;<a href=\"mailto:Mathieu.Giorgino@irit.fr\">Mathieu.Giorgino@irit.fr</a>&gt;<br>\nI have finally found a way to transform a variable p of type point_ext_type <br>\ninto (|color = _, ... = _|) with:<br>\n(case_tac \"point.extend undefined p\", simp add:point.defs)</p>\n<p>but does there exist a better way to do this and to access record extensions <br>\nfields ?</p>\n<p>Mathieu</p>",
        "id": 294113982,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837704
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Mathieu,</p>\n<p>the record package provides the necessary accessors, e.g. having</p>\n<p>record 'a foo = Bar 'a</p>\n<p>you can access the different fields with</p>\n<p>foo.Bar :: ('a, 'b) foo_scheme =&gt; 'a<br>\n    foo.more :: ('a, 'b) foo_scheme =&gt; 'b</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/68j6G32jCxm7W1RrkACLSiSn/signature.asc\">signature.asc</a></p>",
        "id": 294114116,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837742
    }
]