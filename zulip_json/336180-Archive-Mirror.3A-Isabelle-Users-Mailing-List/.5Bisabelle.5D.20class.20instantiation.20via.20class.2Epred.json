[
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c-sterna@jaist.ac.jp\">c-sterna@jaist.ac.jp</a>&gt;<br>\nHi all,</p>\n<p>I defined a typeclass \"wqo\" (on top of Isabelle/HOL's preorder) for <br>\nwell-quasi-orders (but the specific application is not really important <br>\nfor my question). Additionally I have a predicate \"wqo_on P A\" (for <br>\npredicates P that form a well-quasi-order on elements of the set A) <br>\nwhich is defined independently. Furthermore I have the connecting lemma</p>\n<p>wqo_on P UNIV &lt;-&gt; class.wqo P (%x y. P x y &amp; ~ P y x)         (1)</p>\n<p>For wqo_on, I proved:</p>\n<p>wqo_on P1 A1 ==&gt; wqo_on P2 A2 ==&gt;<br>\n     wqo_on (%(p1,p2) (q1,q2). P1 p1 q1 &amp; P2 p2 q2) (A1 &lt;*&gt; A2)  (2)</p>\n<p>Now I want to use (2) where A1 and A2 is instantiated to UNIV<br>\nin combination with (1) in order to proof</p>\n<p>instantiation prod :: (wqo, wqo) wqo</p>\n<p>But I fail to obtain appropriate facts for discharging the assumptions <br>\nof the instantiated (2) (which should be possible since the components <br>\nare assumed to be wqo and hence by (1) it should be possible to obtain <br>\nthe necessary assumptions). How is it possible to refer inside a <br>\nrecursive instance proof to the class predicates (sorry I don't know <br>\nwhether this is the correct terminology, I mean class.wqo here) of <br>\nsubparts? Moreover, how is it possible to obtain a class instance by <br>\nproving that the class predicate holds? (By intro_classes I only obtain <br>\nOFCLASS(...) and fail to see the connection to class.wqo.)</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294154145,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850499
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Christian,</p>\n<p>I think the reason for your confusion is that there are not two, but<br>\nthree layers:</p>\n<p>a) your user-space predicate wqo_on<br>\nb) the module system predicate class.wqo (where »class« refers to the a<br>\nlocale combined with a type class rather than a mere type class)<br>\nc) the proper type class wqo</p>\n<p>You can jumb between b) and c) by means of theorems<br>\n    wqo.axioms<br>\n    wqo.intro</p>\n<p>So in your case, this would roughly meen something like:</p>\n<p>a) From sort hypothesis, obtain class.wqo ['a] … and class.wqo ['b] … by<br>\nmeans of wqo.axioms<br>\nb) Obtain wqo_on ['a] … and wqo_on ['b] … by means of (1)<br>\nc) Obtain wqo_on ['a * 'b] … by means of (2)<br>\nd) Obtain class.wqo ['a * 'b] … by means of (1)<br>\ne) Conclude using wqo.intro – which could also be an intro step in the<br>\nbeginning.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/0IzuOnZ8b4A-aJEjakrceSOu/signature.asc\">signature.asc</a></p>",
        "id": 294154350,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850587
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c-sterna@jaist.ac.jp\">c-sterna@jaist.ac.jp</a>&gt;<br>\nThanks that worked! Just for the record: Type classes have a \"_class\" <br>\nsuffix, i.e., it is wqo_class.intro and wqo_class.axioms.</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294154356,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850591
    }
]