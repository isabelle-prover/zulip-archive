[
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Peter, hi Brian,</p>\n<blockquote>\n<p>In his zest to ensure all uses of numerals are algebraically<br>\nwell-organised, Brian manufactured the attached theory of \"saturated\"<br>\narithmetic for the naturals for me.</p>\n<p>I'm now struggling to get it to work with the code generator. The<br>\nproblem is that the CARD('a) construct leans on the card function, and<br>\nfor some reason the code generator wants to enumerate nat while<br>\ncalculating card. I can't see why it wants to do that. Can you suggest a<br>\nway forward? (The attached theory should break at an opportune point.)<br>\n</p>\n</blockquote>\n<p>find attached an experiment of mine which hopefully turn out to be helpful.</p>\n<p>First, it is important that we keep such discussions on the public<br>\nmailing list, since more eyes see more than less and also to make sure<br>\nthe generic Isabelle knowledge stays publicly available and is able to grow.</p>\n<p>Here now, the answers proper to your issues:</p>\n<p>a) avoiding CARD('a) in generated code</p>\n<p>class len_card = len +<br>\n  assumes len_of_card: \"len_of TYPE('a) = CARD('a)\"</p>\n<p>This connects len_of TYPE('a) to CARD('a) and allows you to generate<br>\ncode for type 'a::len_card sat.  Of course you have to give appropriate<br>\ninstantiations, or replace CARD('a) by len_of TYPE('a) in your<br>\nspecification throughout to gain full flexibility.  @Brian: Did you ever<br>\nthink about including such a class as len_card into the Word libraries<br>\ndirectly?</p>\n<p>b) use abstract type for code generation</p>\n<p>lemma Abs_Rep_sat' [simp, code abstype]:<br>\n  \"Abs_sat' (Rep_sat n) = n\"<br>\n  by (simp add: Abs_sat'_def min_CARD_Rep_sat Rep_sat_inverse)</p>\n<p>(call on me again if this sounds like Bohemian villages for you)</p>\n<p>c) prove simp rules for your \"abtract\" operation of the form:</p>\n<p>lemma Rep_plus_sat [simp]:<br>\n  \"Rep_sat (x + y) = min (Rep_sat x + Rep_sat y) CARD('a)\"<br>\n  by (simp add: plus_sat_def)</p>\n<p>Together with extensionality on sat values, this will greatly simplify<br>\nyour proofs and make them less cumbersome.  Look at the theory to get<br>\nmore ideas.</p>\n<blockquote>\n<p>I humbly suggest that a working version of this theory make its way<br>\ninto HOL/Library. I'd be happy to round out the theory with some guidance.</p>\n</blockquote>\n<p>Yes, indeed.  I'd first suggest to round up the proofs a little, and<br>\nmaybe others want to comment also on that.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/btDNZbfAPjzvLRsxSoj1jqva/Saturated.thy\">Saturated.thy</a><br>\n<a href=\"/user_uploads/14278/H0LaYrylCZPU_qEuoHl7UGqv/signature.asc\">signature.asc</a></p>",
        "id": 294142241,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846253
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nBtw. theory src/HOL/Library/Dlist.thy is a very nice example how to<br>\nestablish what you could call »abstract types with invariants« and<br>\ncorresponding code generation in Isabelle/HOL.<br>\nI suggest to follow the patterns which can be found there wrt.<br>\nto which auxiliary lemmas about Rep/Abs/Abs' to prove, which simp rules<br>\nto prove<br>\nand how to setup code generation.</p>\n<p>Maybe your Abs_sat' can just be called Sat.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/GNHQ8jYQKGTYRC5yk-lXiWaJ/signature.asc\">signature.asc</a></p>",
        "id": 294142254,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846258
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;</p>\n<blockquote>\n<p>Maybe your Abs_sat' can just be called Sat.</p>\n</blockquote>\n<p>When going through Dlist a further suggestion came to my mind:</p>\n<p>I have modified the theory further: Abs_sat' is called Sat, and Rep_sat<br>\nnat_of.  Both are operations to be expected to be used in »user space«<br>\nand should therefore carry readable names.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/HZQM-2YqufaMvLFmnDVRBT3j/Saturated.thy\">Saturated.thy</a><br>\n<a href=\"/user_uploads/14278/u78cD8Xqdf9PppGzuNjLXQcU/signature.asc\">signature.asc</a></p>",
        "id": 294142278,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846268
    },
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nFlorian,</p>\n<p>Thanks for this. I've tidied it up a bit. See the attached.</p>\n<p>cheers<br>\npeter<br>\n<a href=\"/user_uploads/14278/G6gYC2ZqsX0jvh-Sj9YsYO8Z/Saturated.thy\">Saturated.thy</a></p>",
        "id": 294142500,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846343
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Peter,</p>\n<blockquote>\n<p>Thanks for this. I've tidied it up a bit. See the attached.</p>\n</blockquote>\n<p>Thanks a lot.</p>\n<p>One further remark: the lemmas nat_mult_min_left etc. are quite generic.<br>\n These should go into a separate prelude section at the beginning of the<br>\ntheory, from where, after becoming part of the library, they should be<br>\nmove to appropriate theories in the HOL distribution.</p>\n<p>What also comes to my mind is that saturated numbers seem to be a nice<br>\nexample for complete lattices (with inf = min etc.).  Maybe you still<br>\nwant to add those instances.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/K5FHds-0Ln6F-1s7gQRNbBZO/signature.asc\">signature.asc</a></p>",
        "id": 294142662,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846406
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Peter,</p>\n<p>the theory is in regression:<br>\n<a href=\"http://isabelle.in.tum.de/testboard/Isabelle/rev/fe33d6655186\">http://isabelle.in.tum.de/testboard/Isabelle/rev/fe33d6655186</a></p>\n<blockquote>\n<p>I did this - see the attached. Thanks very much to sledgehammer for doing the most boring bits!</p>\n</blockquote>\n<p>Well, the first one(s) did not really perform well, but it was not very<br>\ndifficult to get along without it.</p>\n<p>I'm not speaking against sledgehammer, but when you prove fundamental<br>\nthings it is often better to try with less erratic methods like simp,<br>\nauto etc – this will both increase your understanding of the matter as<br>\nwell as give hints which fundamental rules are still missing.  In<br>\napplication with more rather technical lemmas, sledgehammer is very fine.</p>\n<p>After the next Isabelle release you might want to add also</p>\n<p>instantiation sat :: (len) complete_lattice</p>\n<p>but AFAIS this will require more lemmas about fold.</p>\n<p>Thanks a lot for your contribution.<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/ZHWDCuIlFy9B5bToyhP8dyX9/signature.asc\">signature.asc</a></p>",
        "id": 294143956,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846826
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nStill one further remark:</p>\n<p>I guess with lemmas like<br>\n  \"nat_of (min x y) = min (nat_of x) (nat_of y)\"<br>\n  \"nat_of (max x y) = max (nat_of x) (nat_of y)\"<br>\n  \"nat_of (Inf A) = Min_fin (insert 0 (nat_of <code> A))\"\n  \"nat_of (Sup A) = Sup_fin (insert (len_of TYPE('a)) (nat_of </code> A))\"<br>\nlife in the instances proofs can even be easier.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/t0vpR-Ilgn37ytECsGOAtKlf/signature.asc\">signature.asc</a></p>",
        "id": 294143971,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846831
    },
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nFlorian,</p>\n<p>On 08/09/2011, at 8:00 AM, Florian Haftmann wrote:</p>\n<blockquote>\n<p>the theory is in regression:<br>\n<a href=\"http://isabelle.in.tum.de/testboard/Isabelle/rev/fe33d6655186\">http://isabelle.in.tum.de/testboard/Isabelle/rev/fe33d6655186</a></p>\n</blockquote>\n<p>Great, thanks.</p>\n<blockquote>\n<blockquote>\n<p>I did this - see the attached. Thanks very much to sledgehammer for doing the most boring bits!</p>\n</blockquote>\n<p>Well, the first one(s) did not really perform well, but it was not very<br>\ndifficult to get along without it.</p>\n</blockquote>\n<p>What do you mean by \"the first one(s)\"? Lemmas, sledgehammers, ... ?</p>\n<blockquote>\n<p>I'm not speaking against sledgehammer, but when you prove fundamental<br>\nthings it is often better to try with less erratic methods like simp,<br>\nauto etc – this will both increase your understanding of the matter as<br>\nwell as give hints which fundamental rules are still missing.  In<br>\napplication with more rather technical lemmas, sledgehammer is very fine.</p>\n</blockquote>\n<p>I found sledgehammer very useful for discovering the lemmas needed for the proofs. I agree that the final proofs could be presented better.</p>\n<blockquote>\n<p>After the next Isabelle release you might want to add also</p>\n<p>instantiation sat :: (len) complete_lattice</p>\n<p>but AFAIS this will require more lemmas about fold.</p>\n</blockquote>\n<p>You've lost me here - the final instantiation in the theory is precisely this one.</p>\n<blockquote>\n<p>Thanks a lot for your contribution.</p>\n</blockquote>\n<p>Thanks to you and Brian for developing the theory!</p>\n<p>cheers<br>\npeter</p>",
        "id": 294143999,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846844
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAm 08/09/2011 00:12, schrieb Peter Gammie:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>I did this - see the attached. Thanks very much to sledgehammer for doing the most boring bits!</p>\n</blockquote>\n<p>Well, the first one(s) did not really perform well, but it was not very<br>\ndifficult to get along without it.</p>\n</blockquote>\n<p>What do you mean by \"the first one(s)\"? Lemmas, sledgehammers, ... ?</p>\n<blockquote>\n<p>I'm not speaking against sledgehammer, but when you prove fundamental<br>\nthings it is often better to try with less erratic methods like simp,<br>\nauto etc – this will both increase your understanding of the matter as<br>\nwell as give hints which fundamental rules are still missing.  In<br>\napplication with more rather technical lemmas, sledgehammer is very fine.</p>\n</blockquote>\n<p>I found sledgehammer very useful for discovering the lemmas needed for the proofs. I agree that the final proofs could be presented better.</p>\n</blockquote>\n<p>I agree with both Florian and Peter: s/h is great for discovering useful<br>\nlemmas, and it can be beneficial both for performance and legibility to<br>\ntransform the generated metis proofs into auto. (But one can easily<br>\nwaste time on unsuccessful attempts to do so.)</p>\n<p>Tobias</p>\n<blockquote>\n<blockquote>\n<p>After the next Isabelle release you might want to add also</p>\n<p>instantiation sat :: (len) complete_lattice</p>\n<p>but AFAIS this will require more lemmas about fold.</p>\n</blockquote>\n<p>You've lost me here - the final instantiation in the theory is precisely this one.</p>\n<blockquote>\n<p>Thanks a lot for your contribution.</p>\n</blockquote>\n<p>Thanks to you and Brian for developing the theory!</p>\n<p>cheers<br>\npeter<br>\n</p>\n</blockquote>",
        "id": 294144020,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846851
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Peter,</p>\n<blockquote>\n<blockquote>\n<p>Well, the first one(s) did not really perform well, but it was not very<br>\ndifficult to get along without it.</p>\n</blockquote>\n<p>What do you mean by \"the first one(s)\"? Lemmas, sledgehammers, ... ?</p>\n</blockquote>\n<p>Well, the first metis class was very slow, I did not check the others<br>\nexplicitly.</p>\n<blockquote>\n<blockquote>\n<p>instantiation sat :: (len) complete_lattice</p>\n</blockquote>\n<p>You've lost me here - the final instantiation in the theory is precisely this one.</p>\n</blockquote>\n<p>This was a slip, it should read</p>\n<p>instantiation sat :: (len) complete_distrib_lattice</p>\n<p>which is still left as an exercise to prove.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/JuMNz4fdtErL4fbut6XPV4c0/signature.asc\">signature.asc</a></p>",
        "id": 294144052,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846859
    },
    {
        "content": "<p>From: Lukas Bulwahn &lt;<a href=\"mailto:bulwahn@in.tum.de\">bulwahn@in.tum.de</a>&gt;<br>\nIt seems as if this saturated naturals library is still causing some <br>\ntrouble with the code generator. I am looking into this and will <br>\nprobably solve it within the next hours.</p>\n<p>Lukas</p>",
        "id": 294144098,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846874
    },
    {
        "content": "<p>From: Lukas Bulwahn &lt;<a href=\"mailto:bulwahn@in.tum.de\">bulwahn@in.tum.de</a>&gt;<br>\nThe issue was related to my misunderstanding of the code generator <br>\nhandling abstract (code) types.<br>\nAfter some enlightment, code generation for saturated naturals in <br>\nHaskell does not pose a problem any longer.</p>\n<p>Lukas</p>",
        "id": 294144112,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846880
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nI haven't added this instance proof yet, but I did add another one:<br>\nType 'a sat is now an instance of the number_semiring class. Proving<br>\nthis instance involved showing that the function \"Sat :: nat =&gt; 'a<br>\nsat\" is identical to the polymorphic function \"of_nat\" at the same<br>\ntype.</p>\n<p>This brings up another issue: It is generally undesirable to have two<br>\ndifferent copies of the same function around if they are both in<br>\ncommon use, since this means that we would have to maintain two<br>\nsimilar-looking but separate sets of simp rules. This was the<br>\nmotivation for making \"int :: nat =&gt; int\" into an abbreviation for<br>\n\"of_nat :: nat =&gt; int\" a few years ago; it let us remove a lot of<br>\nduplication and simpset inconsistencies from the standard library.</p>\n<p>So here's what I propose for the saturated arithmetic library: Rename<br>\nthe current constant \"Sat :: nat =&gt; 'a sat\" to something like<br>\nAbs_sat', and reintroduce the user-friendly name \"Sat\" as a<br>\ntype-constrained abbreviation for \"of_nat\".</p>\n<p>The only reason I'm hesitant to make this change myself is that I<br>\ndon't know how it might affect code generation -- currently \"Sat\" has<br>\nsome special status because it appears in the [code abstype]<br>\ndeclaration.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294144127,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846886
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Brian,</p>\n<p>And according to the type discipline of the code generator it must<br>\nremain so.  But we need the \"old\" Sat anyway for bootstrap reasons.  So<br>\nI would suggest:</p>\n<ul>\n<li>Abs_sat from typedef</li>\n<li>SAT is what is now called Sat</li>\n<li>Sat is abbreviation for of_nat</li>\n<li>simprule SAT = of_nat</li>\n<li>maybe hide Abs_sat and SAT after bootstrap</li>\n</ul>\n<p>I remember a similar issue concerning of_nat can be found in<br>\nCode_Numeral, which also contains such duplication due to bootstrap reasons.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/mF1apT6skE3efXx04YM8Fj4e/signature.asc\">signature.asc</a></p>",
        "id": 294144187,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846911
    },
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nFlorian,</p>\n<p>On 18/08/2011, at 4:29 PM, Florian Haftmann wrote:</p>\n<blockquote>\n<p>One further remark: the lemmas nat_mult_min_left etc. are quite generic.<br>\nThese should go into a separate prelude section at the beginning of the<br>\ntheory, from where, after becoming part of the library, they should be<br>\nmove to appropriate theories in the HOL distribution.</p>\n</blockquote>\n<p>OK.</p>\n<blockquote>\n<p>What also comes to my mind is that saturated numbers seem to be a nice<br>\nexample for complete lattices (with inf = min etc.).  Maybe you still<br>\nwant to add those instances.</p>\n</blockquote>\n<p>I did this - see the attached. Thanks very much to sledgehammer for doing the most boring bits!</p>\n<p>cheers<br>\npeter<br>\n<a href=\"/user_uploads/14278/KCMl2mZ6rV7At3zqdy_luTeH/Saturated.thy\">Saturated.thy</a></p>",
        "id": 294145053,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847175
    }
]