[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;<br>\nHi all,</p>\n<p>I have written some code-generation setup that requires on an additional <br>\nmodule.<br>\nWhat is the recommended way to include this additional module into the <br>\ngenerated code?<br>\nI tried:<br>\ncode_include SML \"Foo\" {*<br>\n  structure Foo = struct<br>\n    exception Bar;<br>\n  end;<br>\n*}</p>\n<p>This works fine for code_export.<br>\nHowever, the eval-method seems to have problems with it:<br>\nlemma \"(5::code_numeral) = Code_Numeral.of_nat 5\"<br>\n  apply eval<br>\n yields:<br>\n*** Error (line 3):<br>\n*** in expected but structure was found<br>\n*** Error (line 3):<br>\n*** Expression expected but structure was found<br>\n*** Error (line 3):<br>\n*** end expected but structure was found<br>\n*** Error (line 3):<br>\n*** ) expected but structure was found<br>\n*** Error (line 3):<br>\n*** ) expected but structure was found<br>\n*** Exception- ERROR \"Static Errors\" raised<br>\n*** At command \"apply\".</p>\n<p>Without the code_include, it works fine!</p>\n<p>How should I include my additional code. And what is code_include good for?</p>\n<p>Regards and thanks in advance for any hints,<br>\n  Peter</p>",
        "id": 294101304,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833865
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Peter,</p>\n<blockquote>\n<p>I have written some code-generation setup that requires on an additional<br>\nmodule.<br>\nWhat is the recommended way to include this additional module into the<br>\ngenerated code?<br>\nI tried:<br>\ncode_include SML \"Foo\" {*<br>\n structure Foo = struct<br>\n   exception Bar;<br>\n end;<br>\n*}</p>\n</blockquote>\n<p>For syntactic reasons includes containing structures produce not always<br>\nvalid code (let structure Foo = ... in ... end is not valid SML!).</p>\n<p>Without the surrounding structure, it should work.  Perhaps what you<br>\nactually want is something like:</p>\n<p>axiomatization bar :: 'a<br>\n    code_abort bar</p>\n<p>which produces an exception:</p>\n<p>export_code bar in SML file -</p>\n<blockquote>\n<p>And what is code_include good for?</p>\n</blockquote>\n<p>It is one of the things you should try to get along without...</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/WUNuoQGg0LnoHU3YoxCLOcNM/signature.asc\">signature.asc</a></p>",
        "id": 294101476,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833915
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;<br>\nFlorian Haftmann schrieb:</p>\n<blockquote>\n<p>Hi Peter,</p>\n<blockquote>\n<p>I have written some code-generation setup that requires on an additional<br>\nmodule.<br>\nWhat is the recommended way to include this additional module into the<br>\ngenerated code?<br>\nI tried:<br>\ncode_include SML \"Foo\" {*<br>\n structure Foo = struct<br>\n   exception Bar;<br>\n end;<br>\n*}<br>\n</p>\n</blockquote>\n<p>For syntactic reasons includes containing structures produce not always<br>\nvalid code (let structure Foo = ... in ... end is not valid SML!).</p>\n<p>Without the surrounding structure, it should work.  Perhaps what you<br>\nactually want is something like:</p>\n<p>axiomatization bar :: 'a<br>\n  code_abort bar</p>\n<p>which produces an exception:</p>\n<p>export_code bar in SML file -</p>\n<blockquote>\n<p>And what is code_include good for?<br>\n</p>\n</blockquote>\n<p>It is one of the things you should try to get along without...</p>\n<p>Hi, thank you for the answer.</p>\n</blockquote>\n<p>The exception was just an example. Actually, the structure contains a <br>\nfunctional array implementation<br>\n(using ML-references to store chains of undo-information for old <br>\nversions of the array) similar to Haskells Array.Diff package.</p>\n<p>So, the other option seems to be to include this structure in the <br>\nML-basis under which the generated ML is then executed. However, this <br>\nmakes the generated code not self-contained any more.</p>\n<p>Regards,<br>\n  Peter</p>\n<blockquote>\n<p>Hope this helps,<br>\n  Florian</p>\n</blockquote>",
        "id": 294101595,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833951
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Peter,</p>\n<p>One possibility (not very convinving) is to leave everything outside the<br>\nstructure.  But I guess there is a more direct way:  are your functional<br>\narrays functional in the sense that from outside they behave functional?<br>\n  Then it would be feasible to implement them functionally in HOL,<br>\ntogether with some code_consts directives which implement some<br>\noperations destructively.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/GIoRm35ffk6t7kp1lYq3icPM/signature.asc\">signature.asc</a></p>",
        "id": 294101621,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833958
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;<br>\nFlorian Haftmann schrieb:</p>\n<blockquote>\n<p>Hi Peter,</p>\n<blockquote>\n<p>Actually, the structure contains a<br>\nfunctional array implementation<br>\n(using ML-references to store chains of undo-information for old<br>\nversions of the array) similar to Haskells Array.Diff package.<br>\n</p>\n</blockquote>\n<p>One possibility (not very convinving) is to leave everything outside the<br>\nstructure.  But I guess there is a more direct way:  are your functional<br>\narrays functional in the sense that from outside they behave functional?</p>\n<p>Yes, exactly that.<br>\n  Then it would be feasible to implement them functionally in HOL,<br>\ntogether with some code_consts directives which implement some<br>\noperations destructively.</p>\n<p>Ok, then I still need a trick how to include the<br>\n  datatype 'a FArray = A of 'a Array.array | U of (int<em>'a</em>'a FArray ref)<br>\nin the generated ML.</p>\n</blockquote>\n<p>The code_datatype to that I map the Isabelle-array type is: \"'a FArray <br>\nref\", but the<br>\nabove FArray-datatype has no counterpart in Isabelle.</p>\n<p>Hmm? (not sure whether I understood your proposal)</p>\n<p>regards + thank you,<br>\n  Peter</p>",
        "id": 294101707,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833969
    }
]