[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear code generation experts,</p>\n<p>I noticed some strange behaviour of code_thms. I don't really understand when code_thms <br>\nprints \"(not implemented)\" for a constructor and when it prints nothing. The difference <br>\ncan be seen in this tiny example:</p>\n<p>theory Thy imports Main begin<br>\n   datatype t = T | F<br>\n   code_thms T True</p>\n<p>The output is</p>\n<p>T<br>\n     (not implemented)<br>\n   True</p>\n<p>Why is \"T\" marked as \"not implemented\" whereas True is not? This difference not only shows <br>\nup for T and True, but all my datatype constructors are marked as \"not implemented\", <br>\nwhereas most of the datatype constructors defined in HOL (True, False, Nil, Cons, Suc, <br>\nInl, Inr) are not. Why?</p>\n<p>IMO constructors declared with code_datatype should not be marked as \"not implemented\" <br>\nbecause I'd prefer if this is reserved for constants that are actually missing code <br>\nequations. Constructors cannot be given code equations anyway.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294712036,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661182505
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Andreas,</p>\n<blockquote>\n<p>I noticed some strange behaviour of code_thms. I don't really understand<br>\nwhen code_thms prints \"(not implemented)\" for a constructor and when it<br>\nprints nothing. The difference can be seen in this tiny example:</p>\n<p>theory Thy imports Main begin<br>\n  datatype t = T | F<br>\n  code_thms T True</p>\n<p>The output is</p>\n<p>T<br>\n    (not implemented)<br>\n  True</p>\n</blockquote>\n<p>thanks for reporting this.</p>\n<p>The reason is that constructors are currently treated inconsistently at<br>\nthe time a datatype is registered vs. at theory merge.</p>\n<blockquote>\n<p>IMO constructors declared with code_datatype should not be marked as<br>\n\"not implemented\" because I'd prefer if this is reserved for constants<br>\nthat are actually missing code equations.</p>\n</blockquote>\n<p>Indeed.</p>\n<p>I will have a look after that.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/GXwP2lSy9KOrqSCEao0SERSV/signature.asc\">signature.asc</a></p>",
        "id": 294712287,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661182572
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Andreas,</p>\n<p>your observation actually triggered an inspection, substantially<br>\nreformulation and clarification of considerable parts of the code<br>\ngenerator data store which maybe will lead to some kind of localized<br>\ncode generation in the future.</p>\n<p>Now you may inspect whether the output of the diagnostic code generator<br>\ncommands seems reasonable.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/PfPOjVYd9COEVd0a9DDsYObJ/signature.asc\">signature.asc</a></p>",
        "id": 294715551,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183646
    }
]