[
    {
        "content": "<p>From: Stephan Merz &lt;<a href=\"mailto:Stephan.Merz@loria.fr\">Stephan.Merz@loria.fr</a>&gt;<br>\nI would sometimes like to define collections of rules that could be  <br>\ngiven to automatic proof methods in one fell swoop, say</p>\n<p>lemmas myRules = intro1 [intro] elim1 elim2 [elim] simp1 simp2 simp3  <br>\n[simp]</p>\n<p>in preparation for</p>\n<p>by (auto add: myRules)</p>\n<p>While I can give a name to a list of lemmas, I haven't found a way to  <br>\ntag them with attributes that would later be exploited by the  <br>\nautomatic methods, i.e. the best I can do is something like</p>\n<p>lemmas myRulesI = intro1<br>\nlemmas myRulesE = elim1 elim2<br>\nlemmas myRulesS = simp1 simp2 simp3</p>\n<p>by (auto intro: myRulesI elim: myRulesE simp add: myRulesS)</p>\n<p>Did I miss something? Would such a facility be useful? (In prehistory,  <br>\none could define \"clasimpsets\", bind them to ML identifiers, and merge  <br>\nthem later. Maybe this is still somehow available, but it's clumsy and  <br>\nit goes against the spirit of the current proof language ...)</p>\n<p>Thanks,<br>\nStephan</p>",
        "id": 294080178,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830388
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI don't think there is an easy way to do this any more. But as you  <br>\nsay, sometimes it would be useful.<br>\nLarry</p>",
        "id": 294080245,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830412
    },
    {
        "content": "<p>From: John Matthews &lt;<a href=\"mailto:matthews@galois.com\">matthews@galois.com</a>&gt;<br>\nI would definitely find this useful. It might be hard to support fully  <br>\ngeneral attribute lists, but even just having Isar syntax to support  <br>\nsimpsets and clasets as first-class values would be helpful.</p>\n<p>-john</p>",
        "id": 294080275,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830424
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe prehistoric \"foobarset\" types have been replaced by the universal <br>\nProof.context many years ago.  The simpset, claset, and clasimpset are <br>\nstill left in the internally for historical reasons. While simpset is <br>\npractically able to emulute a proper context (cf. Simplifier.the_context <br>\netc.) the low-level entry points for claset/clasimpset based tools still <br>\nprevent tool plugins (e.g. those based on the Simplifier) to refer to <br>\ntheir proper context, causing some strange behaviour occasionally.</p>\n<p>Anyway, the question of collecting \"declarations\" for rules according to <br>\ndifferent tool contexts first came up around 1999, when the original <br>\nversion of locales was implemented (cf. Kamm√ºller, Paulson, Wenzel).  The <br>\nbasic idea is as follows:</p>\n<p>* the context contains all the tool data<br>\n   * tools provide data declaration functions (usually as attributes)<br>\n   * the locale mechanism manages arbitrary declarations, to be activated<br>\n     in specific situations (after applying what is now called \"morphism\")</p>\n<p>The following example illustrates this old idea in Isabelle2009.  In <br>\nparticular, NamedThmsFun is used to maintain named collections of <br>\ntheorems, which are easier to track in the example than actual tool <br>\ncontext data.</p>\n<p>theory Scratch<br>\nimports Main<br>\nbegin</p>\n<p>ML {* structure Foo =<br>\n   NamedThmsFun(val name = \"foo\" val description = \"foo rule\") *}<br>\nsetup Foo.setup</p>\n<p>ML {* structure Bar =<br>\n   NamedThmsFun(val name = \"bar\" val description = \"bar rule\") *}<br>\nsetup Bar.setup</p>\n<p>locale my_decls<br>\nbegin</p>\n<p>declare sym [foo]<br>\ndeclare refl [bar]<br>\ndeclare trans [bar]</p>\n<p>end</p>\n<p>lemma True<br>\nproof<br>\n   thm foo<br>\n   thm bar<br>\n   interpret my_decls .<br>\n   thm foo<br>\n   thm bar<br>\nqed</p>\n<p>end</p>\n<p>In more recent years, we have introduced further mechanisms to maintain <br>\nand activate such generic context declarations.  There are plenty of <br>\npossibilities, but it all depends on the specific applications how to wrap <br>\nthem up conveniently.</p>\n<p>BTW, just before TPHOLs we will have a small semi-formal workshop in <br>\nMunich that tries to recover the ability of Isabelle users to use ML for <br>\ntheir applications -- among other things.</p>\n<p>Makarius</p>",
        "id": 294080290,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830431
    },
    {
        "content": "<p>From: Christian Urban &lt;<a href=\"mailto:urbanc@in.tum.de\">urbanc@in.tum.de</a>&gt;<br>\nMakarius writes:</p>\n<blockquote>\n<p>BTW, just before TPHOLs we will have a small semi-formal workshop in <br>\nMunich that tries to recover the ability of Isabelle users to use ML for <br>\ntheir applications -- among other things.</p>\n</blockquote>\n<p>People who cannot participate in this workshop might find <br>\nthe Programming Tutorial helpful [1]. It explains in slow <br>\nmotion attributes on page 30pp and named theorem lists <br>\non page 35.</p>\n<p>Christian</p>\n<p>[1] <a href=\"http://isabelle.in.tum.de/nominal/activities/idp/\">http://isabelle.in.tum.de/nominal/activities/idp/</a></p>",
        "id": 294080337,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830449
    }
]