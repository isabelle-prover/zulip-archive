[
    {
        "content": "<p>From: Andrew Boyton &lt;<a href=\"mailto:Andrew.Boyton@nicta.com.au\">Andrew.Boyton@nicta.com.au</a>&gt;<br>\nHi</p>\n<p>I'm trying to port some of my proofs to Isabelle 2013-1 (from Isabelle 2013).</p>\n<p>I'm working on extending an abstract separation algebra (as previously released in AFP).</p>\n<p>I've first showed that separation conjunction is an interpretation of comm_monoid_mult, and then defined a function sep_map_set_conj which would map a predicate over a set, and then fold the set using separation conjunction. (I've defined similar things for lists as well.)</p>\n<p>interpretation sep: comm_monoid_mult \"op **\" □<br>\n  by unfold_locales (simp add: sep_conj_ac)+</p>\n<p>definition<br>\n  sep_map_set_conj :: \"('b ⇒ 'a::sep_algebra ⇒ bool) ⇒ 'b set ⇒ ('a ⇒ bool)\"<br>\nwhere<br>\n  \"sep_map_set_conj g S ≡ sep.setprod g S\"</p>\n<p>This all works fine in Isabelle 2013-1.</p>\n<p>I then previously showed that sep_map_set_conj interprets comm_monoid_big, which gave me a lot of nice lemmas for free.</p>\n<p>interpretation sep: comm_monoid_big \"op ∧*\" □ sep_map_set_conj<br>\n  by unfold_locales (simp add: sep_map_set_conj_def sep.setprod_def)</p>\n<p>Reading the NEWS file, and browsing the sources I can see that fold_image has changed and things have been cleaned up (which I welcome completely), but I can't seem to seem to find a replacement for comm_monoid_big.</p>\n<p>Wondering for any advice for fixing this. I can make sep_map_set_conj an abbreviation of setprod, which gives me a lot of things for free, although this seems a little inelegant. Of course, I am quite possibly doing it the wrong way, and I'm happy to change the definitions to make things easier.</p>\n<p>Kind regards<br>\nAndrew Boyton</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294259989,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914010
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Andrew,</p>\n<blockquote>\n<p>interpretation sep: comm_monoid_mult \"op **\" □<br>\n  by unfold_locales (simp add: sep_conj_ac)+</p>\n<p>definition<br>\n  sep_map_set_conj :: \"('b ⇒ 'a::sep_algebra ⇒ bool) ⇒ 'b set ⇒ ('a ⇒ bool)\"<br>\nwhere<br>\n  \"sep_map_set_conj g S ≡ sep.setprod g S\"</p>\n<p>This all works fine in Isabelle 2013-1.</p>\n<p>I then previously showed that sep_map_set_conj interprets comm_monoid_big, which gave me a lot of nice lemmas for free.</p>\n<p>interpretation sep: comm_monoid_big \"op ∧*\" □ sep_map_set_conj<br>\n  by unfold_locales (simp add: sep_map_set_conj_def sep.setprod_def)</p>\n</blockquote>\n<p>following the pattern from Big_Operators.thy for setprod,</p>\n<blockquote>\n<p>context comm_monoid_mult<br>\nbegin</p>\n<p>definition setprod :: \"('b \\&lt;Rightarrow&gt; 'a) \\&lt;Rightarrow&gt; 'b set \\&lt;Rightarrow&gt; 'a\"<br>\nwhere<br>\n  \"setprod = comm_monoid_set.F times 1\"</p>\n<p>sublocale setprod!: comm_monoid_set times 1<br>\nwhere<br>\n  \"comm_monoid_set.F times 1 = setprod\"<br>\nproof -<br>\n  show \"comm_monoid_set times 1\" ..<br>\n  then interpret setprod!: comm_monoid_set times 1 .<br>\n  from setprod_def show \"comm_monoid_set.F times 1 = setprod\" by rule<br>\nqed</p>\n<p>end</p>\n</blockquote>\n<p>I guess you should start with something like</p>\n<blockquote>\n<p>definition sep_map_set_conj :: …<br>\nwhere<br>\n  \"sep_map_set_conj = comm_monoid_set.F (op **) □\"</p>\n<p>sublocale sep_map_set_conj!: comm_monoid_set (op **) □<br>\nwhere<br>\n  \"comm_monoid_set.F (op **) □ = sep_map_set_conj\"<br>\nproof -<br>\n  show \"comm_monoid_set.F (op **) □\" …<br>\n  then interpret sep_map_set_conj!: comm_monoid_set (op **) □ .<br>\n  from sep_map_set_conj show \"comm_monoid_set.F (op **) □ =<br>\nsep_map_set_conj\" by rule<br>\nqed</p>\n<p>end</p>\n</blockquote>\n<p>(not tested by myself).</p>\n<p>Hope this helps,<br>\n    Florian</p>\n<blockquote>\n<p>Reading the NEWS file, and browsing the sources I can see that fold_image has changed and things have been cleaned up (which I welcome completely), but I can't seem to seem to find a replacement for comm_monoid_big.</p>\n<p>Wondering for any advice for fixing this. I can make sep_map_set_conj an abbreviation of setprod, which gives me a lot of things for free, although this seems a little inelegant. Of course, I am quite possibly doing it the wrong way, and I'm happy to change the definitions to make things easier.</p>\n<p>Kind regards<br>\nAndrew Boyton</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>\n<p><a href=\"/user_uploads/14278/jyhivQhAGeT7XkghAUbo9BEo/signature.asc\">signature.asc</a></p>\n</blockquote>",
        "id": 294260555,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914215
    }
]