[
    {
        "content": "<p>From: Anthony Bordg &lt;<a href=\"mailto:bordg.anthony@gmail.com\">bordg.anthony@gmail.com</a>&gt;<br>\nHi,</p>\n<p>is there a way to directly denote the ring structure of complex from the<br>\ntheory Complex.thy where it is proven that complex is a field ? In other<br>\nwords I want a term of type ring_scheme that denotes the ring structure of<br>\ncomplex, the type of complex numbers.</p>\n<p>Thank you<br>\nAnthony</p>",
        "id": 294737952,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190467
    },
    {
        "content": "<p>From: Fabian Hellauer &lt;<a href=\"mailto:hellauer@in.tum.de\">hellauer@in.tum.de</a>&gt;<br>\nHi Anthony,</p>\n<p>in Isabelle2018-RC1, I use this:</p>\n<hr>\n<p>theory Scratch imports<br>\n   Complex_Main \"HOL-Algebra.Ring\"<br>\nbegin</p>\n<p>definition univ_ring<br>\n   where \"univ_ring = (|carrier = UNIV, mult = ( *), one = 1, zero = 0, <br>\nadd = (+)|)\"</p>\n<p>lemma field_field_ring: \"Ring.field (univ_ring::_::Fields.field ring)\"<br>\n   apply unfold_locales<br>\n                    apply (auto intro: right_inverse simp: univ_ring_def <br>\nUnits_def field_simps)<br>\n   by (metis ab_group_add_class.ab_left_minus add.commute)</p>\n<p>definition rat_field :: \"rat ring\" where \"rat_field = univ_ring\"<br>\ndefinition real_field :: \"real ring\" where \"real_field = univ_ring\"<br>\ndefinition complex_field :: \"complex ring\" where \"complex_field = univ_ring\"</p>\n<p>lemma field_example_fields: \"field rat_field\" \"field real_field\" \"field <br>\ncomplex_field\"<br>\n   unfolding rat_field_def real_field_def complex_field_def by (fact <br>\nfield_field_ring)+</p>\n<p>end</p>\n<hr>\n<p>Cheers,</p>\n<p>Fabian</p>",
        "id": 294738072,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190494
    },
    {
        "content": "<p>From: Anthony Bordg &lt;<a href=\"mailto:bordg.anthony@gmail.com\">bordg.anthony@gmail.com</a>&gt;<br>\nHi Fabian,</p>\n<p>Thank you for your answer.<br>\nMy question was : \"is there a way to directly denote the ring structure of<br>\ncomplex from the theory Complex.thy where it is proven that complex is a<br>\nfield ?\". A yes or no will help here. I think the answer is no, but since<br>\nit's strange and disturbing for me I would like to be sure just in case I'm<br>\nmissing something. It's strange since there (in Complex.thy) one proves<br>\nthat complex is a field, but despite that fact the theory Complex.thy does<br>\nnot seem to offer a way to directly speak about the ring structure of<br>\ncomplex.<br>\nI'm not sure I understand your code. I would naively write something like<br>\nthat:</p>\n<hr>\n<p>definition cpx_set :: \"complex set\" where<br>\n\"cpx_set ≡ {z| z::complex. True}\"</p>\n<p>definition mult_cpx ::\"[complex, complex] ⇒ complex\" where<br>\n\"mult_cpx z z' ≡ z * z' \"</p>\n<p>definition add_cpx ::\"[complex, complex] ⇒ complex\" where<br>\n\"add_cpx z z' ≡ z + z' \"</p>\n<p>definition cpx_rng ::\"complex ring\" where<br>\n\"cpx_rng ≡ ⦇carrier = cpx_set, mult = mult_cpx, one = 1, zero = 0, add =<br>\nadd_cpx⦈\"</p>\n<hr>\n<p>However, I'm not sure this is the most direct/clever/convenient way to do<br>\nit. In particular, I am unable to use times_complex denoted * (resp.<br>\nplus_complex denoted +) for the field mult (resp. add) and this is why I<br>\ndefine mult_cpx and add_cpx, indeed times_complex and plus_complex would<br>\nnot be recognized and they would be seen as variables displayed in blue if<br>\nused in the fields mult and add.</p>\n<p>Cheers<br>\nAnthony</p>",
        "id": 294738168,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190536
    },
    {
        "content": "<p>From: \"Thiemann, René\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nHi Anthony,</p>\n<p>why not simply:</p>\n<p>definition cpx_rng ::\"complex ring\" where<br>\n\"cpx_rng ≡ ⦇carrier = UNIV, mult = op *, one = 1, zero = 0, add = op +⦈”</p>\n<p>Cheers,<br>\nRené</p>",
        "id": 294738317,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190597
    },
    {
        "content": "<p>From: Anthony Bordg &lt;<a href=\"mailto:bordg.anthony@gmail.com\">bordg.anthony@gmail.com</a>&gt;<br>\nDear Rene,</p>\n<p>Thank you! I was unfamiliar with \"UNIV\" and the syntax \"op\", now I can see<br>\nthey are exactly the things I was looking for.</p>\n<p>Best regards<br>\nAnthony</p>",
        "id": 294738423,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190628
    },
    {
        "content": "<p>From: Anthony Bordg &lt;<a href=\"mailto:bordg.anthony@gmail.com\">bordg.anthony@gmail.com</a>&gt;<br>\nThank you Fabian for your help, your code is clear for me now.</p>\n<p>cheers<br>\nAnthony</p>",
        "id": 294738439,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190636
    }
]