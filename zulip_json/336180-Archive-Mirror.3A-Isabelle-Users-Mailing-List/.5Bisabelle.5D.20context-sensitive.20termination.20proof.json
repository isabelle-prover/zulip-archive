[
    {
        "content": "<p>From: Andrei Popescu &lt;<a href=\"mailto:uuomul@yahoo.com\">uuomul@yahoo.com</a>&gt;<br>\nHello, </p>\n<p>I am having trouble proving termination of a function whose recursive call argument decreases conditionally, in a context which is essentially the following: </p>\n<p>typedecl A&nbsp; typedecl B&nbsp; typedecl C</p>\n<p>consts <br>\n&nbsp;u :: \"A =&gt; C =&gt; B\"<br>\n&nbsp;v :: \"C =&gt; A\"<br>\n&nbsp;w :: \"C =&gt; B\" <br>\n&nbsp;P :: \"A =&gt; C =&gt; bool\"<br>\n&nbsp;size :: \"A =&gt; nat\"</p>\n<p>axioms conditional_decrease: <br>\n\"P a c ==&gt; size (v c) &lt; size a\"</p>\n<p>function f :: \"A =&gt; B set\" where <br>\n\"f a = {u a c| c. P a c&nbsp; &amp;&nbsp; w c : f (v c)}\"</p>\n<p>The only tool I see available for proving termination of f is the lemma</p>\n<p>f.termination: \"[|wf ?R; !! a x c. (v c, a) : ?R|] ==&gt; ALL x. f_dom x\"</p>\n<p>while I would need something like:</p>\n<p>f.context_sensitive_termination: <br>\n\"[|wf ?R; !! a x c. P a c ==&gt; (v c, a) : ?R|] ==&gt; ALL x. f_dom x\"</p>\n<p>or rather </p>\n<p>\"[|wf (?R Int {(v c,a)| a c. P a c}); !! a x c. (v c, a) : ?R|] ==&gt; ALL x. f_dom x\"</p>\n<p>Thanks in advance for any hint on how to handle this. </p>\n<p>&nbsp;&nbsp; Andrei Popescu</p>",
        "id": 294061366,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823813
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nAndrei,</p>\n<blockquote>\n<p>I am having trouble proving termination of a function whose recursive call argument decreases conditionally, in a context which is essentially the following: <br>\n[...]<br>\nThe only tool I see available for proving termination of f is the lemma</p>\n<p>f.termination: \"[|wf ?R; !! a x c. (v c, a) : ?R|] ==&gt; ALL x. f_dom x\"</p>\n<p>while I would need something like:</p>\n<p>f.context_sensitive_termination: <br>\n\"[|wf ?R; !! a x c. P a c ==&gt; (v c, a) : ?R|] ==&gt; ALL x. f_dom x\"</p>\n</blockquote>\n<p>You need to add a congruence rule (here: conj_cong for the conjunction) <br>\nto the definition. See the attached theory (and the function tutorial <br>\nfor some more explanation on congruence rules).</p>\n<p>Hope this helps<br>\nAlex<br>\n<a href=\"/user_uploads/14278/OE78W7-SEyR2pzEnfPerK8IP/Scratch.thy\">Scratch.thy</a></p>",
        "id": 294061385,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823819
    },
    {
        "content": "<p>From: Thomas Arthur Leck Sewell &lt;<a href=\"mailto:tsewell@cse.unsw.EDU.AU\">tsewell@cse.unsw.EDU.AU</a>&gt;<br>\nThe function package does build up context information for you.</p>\n<p>The algorithm for doing so involves using congruence rules, in a similar <br>\nmanner to the use of congruence rules in the simplifier. Essentially these <br>\ncongruence rules define the assumptions that may be made while rewriting <br>\ninner contexts of the goals.</p>\n<p>You seem to need to exploit the fact that P a c holds for the right hand side <br>\nof the conjunction to matter. I suspect that declaring <br>\nconj_cong[fundef_cong] before defining your recursive function may add the <br>\nnecessary fact to the termination rule.</p>\n<p>This is a powerful technique - we have managed to use it to define what <br>\nare essentially recursive imperative programs and state their termination <br>\nproperty in terms of progressive state transformation. We had to add a <br>\ngreat many rules to the set, but we got there. Good luck!</p>\n<p>Yours,<br>\n    Thomas.</p>",
        "id": 294061413,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823825
    }
]