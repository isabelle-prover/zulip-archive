[
    {
        "content": "<p>From: Akihisa Yamada &lt;<a href=\"mailto:akihisa.yamada@uibk.ac.at\">akihisa.yamada@uibk.ac.at</a>&gt;<br>\nDear Florian (and the list),</p>\n<blockquote>\n<ul>\n<li>The locales in HOL-Algebra are really generic in the sense that they<br>\nhave an explicit carrier and hence are not tied to the HOL type system.</li>\n</ul>\n</blockquote>\n<p>Actually I've tried to make classes based on carrier-aware locales. (One <br>\ngoal was to reuse algorithms for our matrices which form a ring only if <br>\ncarrier conditions are met, and in principle, one can merge HOL-Algebra <br>\nlocales and Groups.thy.)</p>\n<p>The only obstacle here was that rewrites on prop doesn't work (as I <br>\nwould expect):</p>\n<p>locale magma =<br>\n   fixes f (infixl \"❙*\" 70) and member<br>\n   assumes closed: \"⋀a b. member a ⟹ member b ⟹ member (a ❙* b)\"</p>\n<p>sublocale times ⊆ mult: magma where member = \"λx. True\" and f = \"op *\"<br>\n   rewrites xx: \"⋀P. (True ⟹ PROP P) ≡ P\"<br>\n   by (unfold_locales, simp_all)</p>\n<p>thm mult.closed (* \"True ⟹ True ⟹ True\", why not \"True\"? *)<br>\nthm mult.closed[unfold xx] (* True *)</p>\n<blockquote>\n<p>AFAIU now, the problem is that \"irreducible\" has a too specific type.</p>\n</blockquote>\n<p>Yes, and I think (comm_)monoid_mult is the fitting place in the current <br>\nclasses (same for coprime, IMO).</p>\n<blockquote>\n<p>What I don't understand is the matter of dvd and commutativity; IMHO in<br>\nan algebraic structure without commutativity you have to distinguish<br>\nleft and right divisors, of which there is currently no trace.</p>\n</blockquote>\n<p>I don't plan to do non-commutative factorization, so this is just <br>\nobservation not request: The current definition of \"dvd\" is right and <br>\nHOL-Algebra's \"factors\" is left. Fundamentally they could be defined two <br>\nsided and current definitions could be lemmas in commutative settings.</p>\n<p>Cheers,<br>\nAkihisa</p>\n<blockquote>\n<p>Is it OK to move this discussion to the Isabelle mailing list?<br>\nParticulary the matter of \"irreducible\" is beyond my knowledge.</p>\n<p>Cheers,<br>\n  Florian<br>\n</p>\n</blockquote>",
        "id": 294723457,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185646
    },
    {
        "content": "<p>From: Akihisa Yamada &lt;<a href=\"mailto:akihisa.yamada@uibk.ac.at\">akihisa.yamada@uibk.ac.at</a>&gt;</p>\n<blockquote>\n<p>The current definition of \"dvd\" is right and HOL-Algebra's \"factors\" is left.<br>\nSorry for confusion, both are \"right\".</p>\n</blockquote>\n<p>Best regards,<br>\nAkihisa</p>",
        "id": 294723484,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185652
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nDear Akihisa,</p>\n<p>I don't think you can reuse those locales directly.</p>\n<p>But you can reuse ambitious proof results using ephemeral<br>\ninterpretation, roughly:</p>\n<p>context some_class<br>\nbegin</p>\n<p>interpretation some_local_with_carrier where …<br>\n&lt;proof&gt; -- ‹yields a lot of facts including<br>\nambitious_result_formulated_for_locale&gt;, although not in nice shape›</p>\n<p>lemma &lt;ambitious_result_formulated_for_class&gt;<br>\n  &lt;proof using ambitious_result_formulated_for_locale&gt;</p>\n<p>end</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/59ngUNpHTvUTsDpvEpt8cLZl/signature.asc\">signature.asc</a></p>",
        "id": 294723764,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185738
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nGood question.  Experimentally I found out that the less ambitious<br>\nrewrite ‹(True ⟹ True) ≡ Trueprop True› works as expected.</p>\n<p>I think that question can only be answered by experts on either the<br>\nmodule system or the simplifier or even both.</p>\n<p>Personally, I would not recommend a persistent direct interpretation<br>\nbetween locales that are structurally that different;  ephemeral<br>\ninterpretation is less implicit and more verbose but gives you much more<br>\ncontrol which results are actually propagated without flooding the fact<br>\nname space with practically unusable theorems.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/vjNAyjHg3wFNj14V-1-T5teh/signature.asc\">signature.asc</a></p>",
        "id": 294724106,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185855
    },
    {
        "content": "<p>From: Akihisa Yamada &lt;<a href=\"mailto:akihisa.yamada@uibk.ac.at\">akihisa.yamada@uibk.ac.at</a>&gt;<br>\nDear Florian,</p>\n<p>On 2017/11/30 17:24, Florian Haftmann wrote:</p>\n<blockquote>\n<p>Dear Akihisa,</p>\n<blockquote>\n<p>Actually I've tried to make classes based on carrier-aware locales. (One<br>\ngoal was to reuse algorithms for our matrices which form a ring only if<br>\ncarrier conditions are met, and in principle, one can merge HOL-Algebra<br>\nlocales and Groups.thy.)</p>\n<p>The only obstacle here was that rewrites on prop doesn't work (as I<br>\nwould expect):</p>\n<p>locale magma =<br>\n   fixes f (infixl \"❙*\" 70) and member<br>\n   assumes closed: \"⋀a b. member a ⟹ member b ⟹ member (a ❙* b)\"</p>\n<p>sublocale times ⊆ mult: magma where member = \"λx. True\" and f = \"op *\"<br>\n   rewrites xx: \"⋀P. (True ⟹ PROP P) ≡ P\"<br>\n   by (unfold_locales, simp_all)</p>\n<p>thm mult.closed (* \"True ⟹ True ⟹ True\", why not \"True\"? *)<br>\nthm mult.closed[unfold xx] (* True *)</p>\n</blockquote>\n<p>I don't think you can reuse those locales directly.</p>\n<p>But you can reuse ambitious proof results using ephemeral<br>\ninterpretation, roughly:</p>\n<p>context some_class<br>\nbegin</p>\n<p>interpretation some_local_with_carrier where …<br>\n&lt;proof&gt; -- ‹yields a lot of facts including<br>\nambitious_result_formulated_for_locale&gt;, although not in nice shape›</p>\n<p>lemma &lt;ambitious_result_formulated_for_class&gt;<br>\n   &lt;proof using ambitious_result_formulated_for_locale&gt;</p>\n<p>end</p>\n</blockquote>\n<p>thank you for the tip, but why &lt;&lt;rewrites \"⋀P. (True ⟹ PROP P) ≡ P\"&gt;&gt; <br>\ndoes/should not work?</p>\n<p>Cheers,<br>\nAkihisa</p>\n<blockquote>\n<p>Cheers,<br>\n  Florian<br>\n</p>\n</blockquote>",
        "id": 294724558,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186012
    }
]