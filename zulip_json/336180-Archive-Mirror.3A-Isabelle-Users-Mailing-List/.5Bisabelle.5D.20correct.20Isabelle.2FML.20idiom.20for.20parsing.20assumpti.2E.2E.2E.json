[
    {
        "content": "<p>From: Michael Norrish &lt;<a href=\"mailto:Michael.Norrish@nicta.com.au\">Michael.Norrish@nicta.com.au</a>&gt;<br>\nI want to embed a locale L2 within L1.  L1 has a local constant called c, and the user's assumption I'm parsing includes references to c.</p>\n<p>At the Isabelle/ML level, I therefore have code that looks like</p>\n<p>val lthy = Named_Target.init L1name thy<br>\n   val asm = Syntax.read_term lthy user_string<br>\n   val e = Element.Assumes [((L2name, []), [(@{term \"Trueprop\"} $ asm, [])])]</p>\n<p>This seems to correctly handle the user's \"c\" as a reference to constant c, but then I need to create L2, and trying with</p>\n<p>Expression.add_locale L2name L2name L1expr [e] thy</p>\n<p>seems to reinterpret the c in e as something that needs universal quantification rather than as a reference to L1's constant.</p>\n<p>So, what's the right way to do this?</p>\n<p>Michael</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294658407,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169002
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Michael,</p>\n<p>Am 09.11.2015 um 05:48 schrieb Michael Norrish:</p>\n<blockquote>\n<p>I want to embed a locale L2 within L1.  L1 has a local constant called c, and the user's assumption I'm parsing includes references to c.</p>\n</blockquote>\n<p>i.e. there is locale parameter c in L1; locale parameters are<br>\nrepresented internally. a free term variables.</p>\n<blockquote>\n<p>At the Isabelle/ML level, I therefore have code that looks like</p>\n<p>val lthy = Named_Target.init L1name thy<br>\n   val asm = Syntax.read_term lthy user_string<br>\n   val e = Element.Assumes [((L2name, []), [(@{term \"Trueprop\"} $ asm, [])])]</p>\n<p>This seems to correctly handle the user's \"c\" as a reference to constant c, but then I need to create L2, and trying with</p>\n<p>Expression.add_locale L2name L2name L1expr [e] thy</p>\n<p>seems to reinterpret the c in e as something that needs universal quantification rather than as a reference to L1's constant.</p>\n</blockquote>\n<p>Risking a shot in the dark, I guess that you have to include c in the<br>\nsecond component of L1expr, which corresponds to the »for« clause in<br>\nIsar text.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/M4JoKCYMq0fdH0-h-PrkYD__/signature.asc\">signature.asc</a></p>",
        "id": 294660987,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169896
    }
]