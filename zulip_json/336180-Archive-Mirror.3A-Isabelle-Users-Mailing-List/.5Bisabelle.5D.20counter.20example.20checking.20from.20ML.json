[
    {
        "content": "<p>From: Lucas Dixon &lt;<a href=\"mailto:ldixon@inf.ed.ac.uk\">ldixon@inf.ed.ac.uk</a>&gt;<br>\nHello,</p>\n<p>I have questions about using isabelle quickcheck/code generation.<br>\nI used to quite happily use it for various things but it seems that the<br>\ninput is now stricter than it used to be (in 2008) - extra dependencies<br>\nbetween the input term and context - and I've not yet been able to<br>\nfigure it out.</p>\n<p>(Using Isabelle 32575:bf6c78d9f94c)</p>\n<p>I'm trying to use<br>\n\"Codegen.test_term : Proof.context -&gt; term -&gt; int -&gt; term list option\"<br>\n(is this the best ML function to be using? do tell me of a better higher<br>\nlevel one)</p>\n<p>Trying to do what I used to do in ML...</p>\n<p>ML{*<br>\nval _ = (Codegen.test_term<br>\n  @{context}<br>\n  @{term \"(b :: int) + a = b\"});<br>\n*}<br>\n;</p>\n<p>Produces the error:</p>\n<p>*** Error (line 19):<br>\n*** Value or constructor (b) has not been declared<br>\n*** Error (line 19):<br>\n*** Value or constructor (a) has not been declared<br>\n*** Error (line 19):<br>\n*** Value or constructor (b) has not been declared<br>\n*** Exception- ERROR of \"Static Errors\" raised<br>\n*** val ctxt2 = &lt;context&gt; : Context.proof<br>\n*** Exception- TOPLEVEL_ERROR raised<br>\n*** At command \"ML\" (line 11 of<br>\n\"/afs/inf.ed.ac.uk/user/l/ldixon/Scratch.thy\").</p>\n<p>My first guess was that all terms are now implicitly dependent on the<br>\ncontext they live in, so perhaps I need to add the free variables to the<br>\ncontext, - the types should already be there. The quick undisciplined<br>\nway, I think, is:</p>\n<p>ML{*<br>\nval (_,ctxt2) = @{context} |&gt; Variable.add_fixes [\"b\", \"a\"];<br>\nval _ = (Codegen.test_term ctxt2 @{term \"(b :: int) + a = b\"});<br>\n*}<br>\n;</p>\n<p>I can do some term manipulation and properly pull out the names of the<br>\nfrees from the term - but I would expect the above to work... but it<br>\nalso gives the same error.</p>\n<p>This gives rise to further questions:</p>\n<ul>\n<li>\n<p>how to I inspect the context? (I remember this from the Isabelle dev<br>\nworkshop, but couldn't find it in the online example theories)</p>\n</li>\n<li>\n<p>what's the right way to quickly make the context that would get from a<br>\nstatement like \"lemma ...\"? i.e. the context of a term, automatically<br>\nputting in the types and frees? (my first guess was to use<br>\nVariable.focus - but that seems to ignore free vars and types)</p>\n</li>\n<li>\n<p>how can I use quickcheck (or nitpick) from the ML level? and I would<br>\nlove this to be in the Isabelle cookbook (shall I write an entry, once I<br>\nfind out how to use it?)</p>\n</li>\n<li>\n<p>What is the hidden implicit dependency between the term given to<br>\nCodegen.text_term, and the context?</p>\n</li>\n</ul>\n<p>thanks,<br>\nlucas</p>",
        "id": 294083677,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660831471
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Wed, 16 Sep 2009, Lucas Dixon wrote:</p>\n<blockquote>\n<p>This gives rise to further questions:</p>\n<ul>\n<li>how to I inspect the context? (I remember this from the Isabelle dev<br>\nworkshop, but couldn't find it in the online example theories)</li>\n</ul>\n</blockquote>\n<p>The context merely maintains arbitrary data of certain modules. You can <br>\nonly print certain aspects of whatever might be there, using operations <br>\nthat the corresponding modules offer.  E.g. you can print the important <br>\ndata provided by Variable/Assumption using print facitlities of <br>\nProofContext, say like this:</p>\n<p>ML_command \"set ProofContext.debug\"</p>\n<p>potentially also this:</p>\n<p>ML_command \"set ProofContext.verbose\"</p>\n<p>Then the ML pretty printer for type Proof.context (in stable Poly/ML <br>\n5.2.1) should show you fixes/assumes and some more.  E.g.</p>\n<p>ML_val {* @{context} *}</p>\n<blockquote>\n<ul>\n<li>what's the right way to quickly make the context that would get from a <br>\nstatement like \"lemma ...\"? i.e. the context of a term, automatically <br>\nputting in the types and frees?</li>\n</ul>\n</blockquote>\n<p>For testing it is most convenient to have Isar do it for you, e.g. like <br>\nthis:</p>\n<p>lemma fixes x y :: nat assumes \"x = y\" shows \"y = x\"<br>\n     ML_prf {* val my_ctxt = @{context} *}</p>\n<blockquote>\n<p>my first guess was to use Variable.focus - but that seems to ignore free <br>\nvars and types</p>\n</blockquote>\n<p>Focus is very special, to look under !! binders of rules and goals.  To <br>\nget the outermost entities (free variables) into the context, you merely <br>\nneed Variable.declare_term, or the slightly stronger version <br>\nVariable.auto_fixes.</p>\n<p>Explicit Variable.add_fixes is also quite common, although the type <br>\nconstraints need to be introduced separately, either via <br>\nVariable.declare_term or the weaker version Variable.declare_constraints.</p>\n<p>Chapter 4 of the \"implementation\" manual provides some further clues how <br>\nthings work, and which are the main operations.</p>\n<p>Makarius</p>",
        "id": 294083685,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660831473
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Lucas,</p>\n<p>note that the convention on the Codegen.test_term interface has changed:</p>\n<p>ML {* Codegen.test_term @{context} @{term \"%n. n = Suc n\"} 2 *}</p>\n<p>The proposition is now given as an abstraction containing <em>no</em> free <br>\nvariables.</p>\n<p>Hope this helps<br>\n    Florian</p>\n<p>Lucas Dixon schrieb:</p>",
        "id": 294083712,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660831480
    },
    {
        "content": "<p>From: Lucas Dixon &lt;<a href=\"mailto:ldixon@inf.ed.ac.uk\">ldixon@inf.ed.ac.uk</a>&gt;<br>\nLucas Dixon wrote:<br>\nThanks to Omar for pointing this out to me, there is a high level <br>\ninterface for Quickcheck in src/Tools/quickcheck.ML, it has signature:</p>\n<p>signature QUICKCHECK =<br>\nsig<br>\n   val auto: bool ref<br>\n   val auto_time_limit: int ref<br>\n   val test_term: Proof.context -&gt; bool -&gt; string option -&gt; int -&gt; int <br>\n-&gt; term -&gt;<br>\n     (string * term) list option<br>\n   val add_generator: string * (Proof.context -&gt; term -&gt; int -&gt; term <br>\nlist option) -&gt; theory -&gt; theory<br>\n   val quickcheck: (string * string) list -&gt; int -&gt; Proof.state -&gt; <br>\n(string * term) list option<br>\nend;</p>\n<p>So this does much of what I'm after.</p>\n<p>However, I'd like to also have access to:</p>\n<p>fun test_goal quiet generator_name size iterations default_T insts i <br>\nassms state = ...</p>\n<p>which seems to be a useful function - I think I'd otherwise need to <br>\ncopy/rewrite chunks of it. Can this be added to the signature?</p>\n<p>cheers,<br>\nlucas</p>",
        "id": 294083732,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660831486
    }
]