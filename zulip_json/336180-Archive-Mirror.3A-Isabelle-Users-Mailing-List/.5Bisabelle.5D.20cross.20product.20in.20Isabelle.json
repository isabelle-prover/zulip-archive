[
    {
        "content": "<p>From: lyj238 &lt;<a href=\"mailto:lyj238@gmail.com\">lyj238@gmail.com</a>&gt;<br>\nDear experts:<br>\n   The cross product in Euclide-space is directly defined in the multivariate lib in Isabelle?</p>\n<p>regards!</p>\n<p>2014-06-12 </p>\n<p>lyj238</p>",
        "id": 294280941,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660920337
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nHi Lyj,</p>\n<p>there isn't yet a formalization of the cross product of two vectors in<br>\nIsabelle/HOL. At least not in Multivariate_Analysis. But I'm also not<br>\naware of any other formalization.</p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294281046,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660920366
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman.brian.c@gmail.com\">huffman.brian.c@gmail.com</a>&gt;<br>\nHi Lyj,</p>\n<p>As Johannes says, there is no cross product formalized in<br>\nMultivariate_Analysis. But you can easily define one yourself, like<br>\nthis:</p>\n<p>theory Cross imports Multivariate_Analysis begin</p>\n<p>definition cross2 :: \"real × real ⇒ real × real ⇒ real\" where<br>\n  \"cross2 = (λ(a1,a2). λ(b1,b2). a1 * b2 - a2 * b1)\"</p>\n<p>definition cross3 :: \"real × real × real ⇒ real × real × real ⇒ real ×<br>\nreal × real\" where<br>\n  \"cross3 = (λ(a1,a2,a3). λ(b1,b2,b3). (a2 * b3 - a3 * b2, a3 * b1 -<br>\na1 * b3, a1 * b2 - a2 * b1))\"</p>\n<p>It is then a simple matter to prove that the cross product is a<br>\nbounded bilinear operator. By interpreting the \"bounded_bilinear\"<br>\nlocale you can obtain many useful lemmas automatically.</p>\n<p>lemma bounded_bilinear_cross3: \"bounded_bilinear cross3\"<br>\napply (rule bilinear_conv_bounded_bilinear [THEN iffD1])<br>\napply (auto simp add: bilinear_def cross_def algebra_simps intro!: linearI)<br>\ndone</p>\n<p>interpretation cross: bounded_bilinear cross3<br>\nby (rule bounded_bilinear_cross3)</p>\n<p>print_theorems (* this shows lemmas about distributivity, continuity,<br>\nlimits, etc. *)</p>\n<p>Hope this helps,</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294281101,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660920387
    },
    {
        "content": "<p>From: \"<a href=\"mailto:lyj238@gmail.com\">lyj238@gmail.com</a>\" &lt;<a href=\"mailto:lyj238@gmail.com\">lyj238@gmail.com</a>&gt;<br>\nHi,  Huffman:</p>\n<p>Thank you very much.</p>\n<p>In linear algebra, a vector is usually our research object.  Of course, (a1,a2,a3) can be seen as a vector.</p>\n<p>But I find that  a vecotor has been formalized in mutivariate_analysis lib.</p>\n<p>I want to  use the formalized vetor concept to formalize the cross product by using a matrix operator and a point operator( the informal account is also <br>\nin the end), which is as follows:</p>\n<p>I  meets a prolem due to my knowledge on the vector: (1) the first element is count from 0 or 1: (2) the operators χ and $.</p>\n<p>Although I have tried to guess how to use them, but it is still diffcult for me to prove my definition coincides with the definition by using the vector and matrix formalization in the mutivariate libaray, can you help me?.</p>\n<p>definition cross3' :: \"real^3 ⇒ real^3 ⇒ real^3\" where <br>\n\"cross3' = (λa. λb. <br>\n(χ i. if i=0 then a$1 * b$2 - a$2* b$1 <br>\nelse if i=1 then a$2 * b$0 - a$0 * b$2 <br>\nelse a$0 * b$1 - a$1 * b$0))\" </p>\n<p>definition vectPoint::\"real^3 ⇒ real^3^3\" where <br>\n\"vectPoint = (λa. <br>\n(χ i. if i=0 then (χ i. if i=0 then 0 <br>\nelse if i=1 then - a$2 <br>\nelse a$1) <br>\nelse if i=1 then (χ i. if i=0 then a $2 <br>\nelse if i=1 then 0 <br>\nelse - a$0) <br>\nelse (χ i. if i=0 then -a$1 <br>\nelse if i=1 then a$0 <br>\nelse 0)))\" </p>\n<p>The above formalization on the cross product comes from the follwing material:</p>\n<p>Thus I want to prove the following lemma:<br>\nlemma cross3Def2:\"cross3' a b= (vectPoint a) *v b\" <br>\napply (simp add: cross3'_def vectPoint_def matrix_vector_mult_def) <br>\napply auto</p>\n<p>proof falis here.</p>\n<p>regards！</p>\n<p><a href=\"mailto:lyj238@gmail.com\">lyj238@gmail.com</a><br>\n<a href=\"/user_uploads/14278/hNXyFKT79uxF-ftfd84AS7LS/Catch.jpg\">Catch.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/hNXyFKT79uxF-ftfd84AS7LS/Catch.jpg\" title=\"Catch.jpg\"><img src=\"/user_uploads/14278/hNXyFKT79uxF-ftfd84AS7LS/Catch.jpg\"></a></div>",
        "id": 294281234,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660920433
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman.brian.c@gmail.com\">huffman.brian.c@gmail.com</a>&gt;<br>\nOn Sun, Jun 15, 2014 at 8:08 AM, <a href=\"mailto:lyj238@gmail.com\">lyj238@gmail.com</a> &lt;<a href=\"mailto:lyj238@gmail.com\">lyj238@gmail.com</a>&gt; wrote:</p>\n<blockquote>\n<p>Hi,  Huffman:</p>\n<p>Thank you very much.</p>\n<p>In linear algebra, a vector is usually our research object.  Of course, (a1,a2,a3)<br>\ncan be seen as a vector.</p>\n<p>But I find that  a vecotor has been formalized in mutivariate_analysis<br>\nlib.</p>\n<p>In the Multivariate_Analysis theory, vectors are defined as a type class<br>\n\"real_vector\". We also provide a hierarchy of more specific type classes,<br>\nsuch as \"real_normed_vector\" for normed vector spaces, \"real_inner\" for<br>\ninner product spaces, and \"euclidean_space\" for finite-dimensional inner<br>\nproduct spaces. Most theorems in Multivariate_Analysis are proved for an<br>\narbitrary type of the appropriate class.</p>\n</blockquote>\n<p>Both \"real * real * real\" and \"real^3\" are members of the \"euclidean_space\"<br>\nclass. Theorems provided in Multivariate_Analysis apply equally to either<br>\ntype, so you are free to choose whichever is most convenient to work with.</p>\n<blockquote>\n<p>I want to  use the formalized vetor concept to formalize the cross<br>\nproduct by using a matrix operator and a point operator( the informal<br>\naccount is also<br>\nin the end), which is as follows:</p>\n<p>I  meets a prolem due to my knowledge on the vector: (1) the first element<br>\nis count from 0 or 1: (2) the operators χ and $.<br>\n</p>\n</blockquote>\n<p>The type \"3\" is a three-element type consisting of the integers modulo 3.<br>\nAt this type, 0 = 3, so you may use indexes {0,1,2} or {1,2,3} as you wish.</p>\n<p>However, I recommend using indexes starting with 1, for two reasons: First,<br>\nmost mathematical textbooks (including the one you quoted) use indexes<br>\nstarting with 1. Second, Multivariate_Analysis provides theorems like<br>\nUNIV_3 that assume indexes starting with 1.</p>\n<blockquote>\n<p>Although I have tried to guess how to use them, but it is still diffcult<br>\nfor me to prove my definition coincides with the definition by using the<br>\nvector and matrix formalization in the mutivariate libaray, can you help<br>\nme?.<br>\n</p>\n</blockquote>\n<p>To make your definitions look more like the textbook definitions, you<br>\nshould do two things: First, use indexes {1, 2, 3} instead of {0,1,2}.<br>\nSecond, define a constructor function for vectors of size three so you<br>\ndon't have to write if/then/else everywhere. For example:</p>\n<p>definition Vec3 :: \"'a ⇒ 'a ⇒ 'a ⇒ 'a ^ 3\" where<br>\n  \"Vec3 a b c = (χ i. if i = 1 then a else if i = 2 then b else c)\"</p>\n<p>lemma Vec3_simps [simp]:<br>\n  \"Vec3 a b c $ 1 = a\"<br>\n  \"Vec3 a b c $ 2 = b\"<br>\n  \"Vec3 a b c $ 3 = c\"<br>\n  unfolding Vec3_def by auto</p>\n<p>lemma Vec3: \"Vec3 (x $ 1) (x $ 2) (x $ 3) = x\"<br>\n  unfolding Vec3_def vec_eq_iff<br>\n  using UNIV_3 by auto</p>\n<p>lemma vec3_eq_iff:<br>\n  fixes x y :: \"'a ^ 3\"<br>\n  shows \"x = y ⟷ x$1 = y$1 ∧ x$2 = y$2 ∧ x$3 = y$3\"<br>\n  by (metis Vec3)</p>\n<p>definition cross3' :: \"real^3 ⇒ real^3 ⇒ real^3\" where</p>\n<blockquote>\n<p>\"cross3' = (λa. λb.<br>\n(χ i. if i=0 then a$1 * b$2 - a$2* b$1<br>\nelse if i=1 then a$2 * b$0 - a$0 * b$2<br>\nelse a$0 * b$1 - a$1 * b$0))\"</p>\n<p>definition vectPoint::\"real^3 ⇒ real^3^3\" where<br>\n\"vectPoint = (λa.<br>\n(χ i. if i=0 then (χ i. if i=0 then 0<br>\nelse if i=1 then - a$2<br>\nelse a$1)<br>\nelse if i=1 then (χ i. if i=0 then a $2<br>\nelse if i=1 then 0<br>\nelse - a$0)<br>\nelse (χ i. if i=0 then -a$1<br>\nelse if i=1 then a$0<br>\nelse 0)))\"<br>\n</p>\n</blockquote>\n<p>You should change these to something like this:</p>\n<p>definition cross3' :: \"real^3 ⇒ real^3 ⇒ real^3\" where<br>\n\"cross3' a b = Vec 3 ...\"</p>\n<p>definition vectPoint::\"real^3 ⇒ real^3^3\" where<br>\n \"vectPoint a = Vec3 (Vec3 ...) (Vec3 ...) (Vec3 ...)\"</p>\n<blockquote>\n<p>Thus I want to prove the following lemma:<br>\nlemma cross3Def2:\"cross3' a b= (vectPoint a) *v b\"<br>\napply (simp add: cross3'_def vectPoint_def matrix_vector_mult_def)<br>\napply auto<br>\n</p>\n</blockquote>\n<blockquote>\n<p>proof falis here.<br>\n</p>\n</blockquote>\n<p>Using lemma \"UNIV_3\", which states that \"(UNIV :: 3 set) = {1,2,3}\", should<br>\nmake this proof easier.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294281502,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660920515
    }
]