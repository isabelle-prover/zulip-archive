[
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@rsise.anu.edu.au\">Jeremy.Dawson@rsise.anu.edu.au</a>&gt;<br>\nI have a goal of the form</p>\n<p>1. !!a list.<br>\n           ... list ...</p>\n<p>When I do</p>\n<p>apply (tactic \"(cut_inst_tac [(\\\"x\\\", \\\"n\\\"), (\\\"y\\\", \\\"size list\\\")]<br>\n     linorder_less_linear 1)\") ;</p>\n<p>the goal becomes</p>\n<p>n &lt; length list | n = length list | length list &lt; n ==&gt; (as before)</p>\n<p>but if instead I do</p>\n<p>apply (insert linorder_less_linear [where x = \"n\" and y = \"size list\"]) ;</p>\n<p>I get</p>\n<p>!!a lista.</p>\n<p>n &lt; size list | n = size list | size list &lt; n |]<br>\n        ==&gt; (as before, but with list replaces by lista)</p>\n<p>Why is this?  Is it possible (using Isar) to stop this happening?</p>\n<p>Thanks for any help</p>\n<p>Jeremy</p>",
        "id": 294048368,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660818275
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nHi Jeremy,</p>\n<p>I have also run into this problem with the insert tactic. I believe the <br>\nexplanation for its behavior has to do with the scoping of variable names, <br>\nand the distinction between bound and free variables. In your subgoal, \"a\" <br>\nand \"list\" are bound variables (bound by the \"!!\" meta-quantifier) and \"n\" is <br>\na free variable. Proof General should show this distinction by coloring the <br>\nnames differently.</p>\n<p>When you instantiate linorder_less_linear [where x = \"n\" and y = \"size list\"], <br>\nthe \"where\" attribute knows nothing about the variables bound within your <br>\nsubgoal, so both \"n\" and \"list\" are treated as free variables. When the lemma <br>\ncontaining the free variable \"list\" is inserted, Isabelle conveniently <br>\nrenames the bound variable \"list\" to \"lista\" to avoid a name clash.</p>\n<p>On the other hand, cut_inst_tac does know about the variables bound within <br>\nyour subgoal, so in this case \"list\" refers to the variable bound in the <br>\nsubgoal instead of a new free variable. By the way, instead of</p>\n<p>apply (tactic \"(cut_inst_tac [(\\\"x\\\", \\\"n\\\"), (\\\"y\\\", \\\"size list\\\")] <br>\nlinorder_less_linear 1)\")</p>\n<p>you can also use</p>\n<p>apply (cut_tac x=n and y=\"size list\" in linorder_less_linear)</p>\n<p>Hope this helps.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294048495,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660818336
    }
]