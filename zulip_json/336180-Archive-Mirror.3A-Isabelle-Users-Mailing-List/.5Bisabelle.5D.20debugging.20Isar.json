[
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nI have a long and complex tactic (long and complex meaning I started <br>\nwork on it over a year ago, and I don't yet know whether it works on <br>\nmore than one example).</p>\n<p>But it does work on one example, in ML<br>\n(as in<br>\nGoal \"...\" ; byall ...tacs ; )</p>\n<p>When I package it up as an Isar method, it doesn't work. </p>\n<p>If it didn't work in ML I would do</p>\n<p>val state = topthm()</p>\n<p>and then go through the code step-by-step, to see where it fails.</p>\n<p>Trying this in Isar, with the obligatory ML {* ... *} around each step,<br>\ngives</p>\n<p>ML {* val state = topthm () *}<br>\nval state =<br>\n   \"PROP No_goal_has_been_supplied ==&gt; PROP No_goal_has_been_supplied\"</p>\n<p>which obviously won't help.</p>\n<p>How do I debug such a thing in Isar?</p>\n<p>Jeremy</p>",
        "id": 294056875,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821924
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nJeremy Dawson wrote:<br>\nI personally debug tactics consisting of several smaller tactics (all <br>\nwritten in ML) like this:</p>\n<p>lemma \"Some Goal\"<br>\n   apply (tactic \"first_step_tac\")<br>\n   apply (tactic \"next_step_tac\")<br>\n   apply (tactic \"and_so_on\")<br>\n   ...</p>\n<p>Then I can step forward and back and modify the individual steps until I <br>\nget it right. Then I gradually compose the steps to larger parts until I <br>\nend up with a single tactic, which can be wrapped into a proper Isar method.</p>\n<p>Alex</p>",
        "id": 294056881,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821930
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nAlexander Krauss wrote:<br>\nDear Alex,</p>\n<p>Thanks for your reply - as a matter of fact I did something like that, <br>\nto the point where I found the problem is in len_ty_tac.  But len_ty_tac <br>\nisn't composed of smaller tactics, rather it looks at the subgoal and <br>\ngoes from there, thus</p>\n<p>fun len_ty_tac sg st =<br>\n  let val cg = List.nth (cprems_of st, sg - 1) ;<br>\n    val len_st = thin_len RSN (sg, st) ;<br>\n    val len_cp = List.nth (cprems_of len_st, sg - 1) ;</p>\n<p>(and so on)</p>\n<p>regards,</p>\n<p>Jeremy</p>",
        "id": 294057267,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660822107
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nFor debugging you may use ML {* Isar.state () <em>} or ML {</em> Isar.goal () *} <br>\nto get full access to whatever state the toplevel is presently in.</p>\n<p>Also note that the above List.nth method to access a particular subgoal is <br>\na bit fragile, it just breaks if \"sg\" is out of range, while the usual <br>\nconvention is to make the tactic fail with an empty result sequence.  The <br>\nexisting tacticals SUBGOAL and the newer CSUBGOAL will do the job for you.</p>\n<p>Makarius</p>",
        "id": 294057320,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660822132
    }
]