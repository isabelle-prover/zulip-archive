[
    {
        "content": "<p>From: Michael Norrish &lt;<a href=\"mailto:michael.norrish@nicta.com.au\">michael.norrish@nicta.com.au</a>&gt;<br>\nI want to (programmatically) define constants that live within<br>\ndifferent sub-spaces of the same theory, and so might have the same<br>\nname.  I know this is possible, because it is what the record package<br>\nachieves if you write</p>\n<hr>\n<p>theory foo<br>\n   imports Main</p>\n<p>begin</p>\n<p>record rec1 =<br>\n   fld1 :: nat<br>\n   fld2 :: bool</p>\n<p>record rec2 =<br>\n   fld1 :: bool</p>\n<p>end;</p>\n<hr>\n<p>There are two \"fld1\" constants after this is executed: foo.rec1.fld1<br>\nand foo.rec2.fld1.</p>\n<p>However, the function Theory.add_consts_i takes a \"bstring\", and does<br>\nnot allow the declaration of qualified names.</p>\n<p>So, how does the record package do it?  (And, just in case the answers<br>\nare not the same, how should I do it myself?)</p>\n<p>Michael.</p>",
        "id": 294046360,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660817435
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nA quick search through record_package.ML reveals something like this:</p>\n<p>...<br>\n    |&gt; Theory.add_path bname<br>\n    |&gt; Theory.add_consts_i ...<br>\n    |&gt; Theory.parent_path</p>\n<p>See also section 2.2.4 of the Isabelle/Isar implementation manual.</p>\n<p>Makarius</p>",
        "id": 294046407,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660817459
    }
]