[
    {
        "content": "<p>From: Leo Freitas &lt;<a href=\"mailto:leo.freitas@newcastle.ac.uk\">leo.freitas@newcastle.ac.uk</a>&gt;<br>\nHi,</p>\n<p>I am new to Isabelle and its type ways of declaring / defining new types.<br>\nIn particular when extending type classes like say nat1 as an extension of nat (n &gt; 0).</p>\n<p>I couldn't find it in the sources and I wondered if someone has done this already.</p>\n<p>Looking at Nat.thy and Orderings.thy I saw the main aspects of Nat characterisation<br>\nbut failed to properly extend my theory to cope with something like nat1.</p>\n<p>Any help / clues is much appreciated.</p>\n<p>Best,<br>\nLeo</p>",
        "id": 294239804,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906457
    },
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;<br>\nHi Leo, </p>\n<p>You can use the \"typedef\" command to create new types like this. See </p>\n<p><a href=\"http://isabelle.in.tum.de/dist/Isabelle2013/doc/tutorial.pdf\">http://isabelle.in.tum.de/dist/Isabelle2013/doc/tutorial.pdf</a></p>\n<p>on pages 173-176 for more information.</p>\n<p>Best wishes,<br>\nJohn</p>",
        "id": 294239866,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906485
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAm 15/04/2013 17:39, schrieb Leo Freitas:</p>\n<blockquote>\n<p>Hi,</p>\n<p>I am new to Isabelle and its type ways of declaring / defining new types.<br>\nIn particular when extending type classes like say nat1 as an extension of nat (n &gt; 0).</p>\n</blockquote>\n<p>You will not become a happy person if you define your own type nat1 because<br>\nthere will be zero automation for it. You will have to duplicate everything that<br>\nis there for nat already, slowly, over time. Or you constantly convert between<br>\nnat and nat1, because all the predefined functions operate on nat. I don't<br>\nrecommend it.</p>\n<p>Just for terminology: nat is a type, not a type class.</p>\n<p>Tobias</p>\n<blockquote>\n<p>I couldn't find it in the sources and I wondered if someone has done this already.</p>\n<p>Looking at Nat.thy and Orderings.thy I saw the main aspects of Nat characterisation<br>\nbut failed to properly extend my theory to cope with something like nat1.</p>\n<p>Any help / clues is much appreciated.</p>\n<p>Best,<br>\nLeo<br>\n</p>\n</blockquote>",
        "id": 294239869,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906487
    },
    {
        "content": "<p>From: Stephan van Staden &lt;<a href=\"mailto:Stephan.vanStaden@inf.ethz.ch\">Stephan.vanStaden@inf.ethz.ch</a>&gt;<br>\nHi John,</p>\n<p>I think this use of \"typedef\" is deprecated. Although Isabelle still <br>\naccepts it, I remember seeing warnings.</p>\n<p>All the best,<br>\nStephan</p>",
        "id": 294239891,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906496
    },
    {
        "content": "<p>From: Jasmin Christian Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;<br>\nHi Stephan,</p>\n<p>\"Typedef\" is still as encouraged as ever (modulo Tobias's warnings about the lack of automation). The warnings were probably tied to a specific usage of typedef. This is from the \"NEWS\" file:</p>\n<p>* Simplified 'typedef' specifications: historical options for implicit<br>\n    set definition and alternative name have been discontinued.  The<br>\n    former behavior of \"typedef (open) t = A\" is now the default, but<br>\n    written just \"typedef t = A\".  INCOMPATIBILITY, need to adapt theories<br>\n    accordingly.</p>\n<p>If I recall right, during the transition period, \"typedef\" without \"open\" used to generate a warning.</p>\n<p>Regards,</p>\n<p>Jasmin</p>",
        "id": 294239897,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906500
    }
]