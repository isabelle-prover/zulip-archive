[
    {
        "content": "<p>From: Freek Wiedijk &lt;<a href=\"mailto:freek@cs.ru.nl\">freek@cs.ru.nl</a>&gt;<br>\nDear all,</p>\n<p>My apologies for a newbie question.</p>\n<p>I am trying to understand the relationship between \"dest\"<br>\nand \"elim\".  From</p>\n<p>&lt;<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2008-March/msg00077.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2008-March/msg00077.html</a>&gt;</p>\n<p>I got the impression that \"elim\" is a generalisation of<br>\n\"dest\".  But in the Tutorial (reference from that message)<br>\nI read in 5.7 that \"erule\" unifies Q with the subgoal,<br>\nwhile \"drule\" does not.  So that seems to imply that \"erule\"<br>\nmight fail where \"drule\" does not?</p>\n<p>In the example files for Concrete Semantics, I see lemmas<br>\n(for example \"SkipE\") that are proved with \"[elim]\", but<br>\nwhere I think that you do not only want to use them when<br>\ntheir conclusion unifies with the goal?</p>\n<p>A pointer to a relevant book/manual is all I need.  And if<br>\nthis is too trivial, do not bother the list with this!</p>\n<p>Freek</p>",
        "id": 294669462,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172957
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>chapter 5 of the tutorial (rules of the game) is exactly the right thing<br>\nto read (the whole chapter), in particluar 5.2..5.4 may answer your<br>\nquestions.</p>\n<p>Best,<br>\n  Peter</p>",
        "id": 294669473,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172960
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear Freek,</p>\n<p>for me, the difference is mostly in how a fact is stated. A basic<br>\nexample from natural deduction is conjunction elimination.</p>\n<p>In textbooks we often see two rules</p>\n<p>conj1: A &amp; B ==&gt; A<br>\nconj2: A &amp; B ==&gt; B</p>\n<p>in Isabelle parlance those are \"dest\" (as in destructive) rules, since<br>\nthey loose information. If you apply such a rule (with drule) in an<br>\napply-script you can turn a provable subgoal into an unprovable one<br>\n(since the fact that B holds disappeared).</p>\n<p>The corresponding \"elim\" rule (which I would really consider to be more<br>\ngeneral, as you suggested) is:</p>\n<p>conjE: A &amp; B ==&gt; (A ==&gt; B ==&gt; thesis) ==&gt; thesis</p>\n<p>if you apply it with \"erule\" you just turn the single fact \"A &amp; B\" into<br>\ntwo facts \"A\" and \"B\" without (really) using information (since you<br>\ncould reconstruct \"A &amp; B\" again with what you got).</p>\n<p>Moreover, the conclusion of \"conjE\" is so general that it will unify<br>\nwith the conclusion of any subgoal. So, whether \"erule\" succeeds or<br>\nfails purely depends on whether some formula of the shape \"?A &amp; ?B\" is<br>\namong the premises of the subgoal.</p>\n<p>hope this helps,</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294669526,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172966
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThe terminology comes from natural deduction.</p>\n<ul>\n<li>intro is for introduction rules, which are used in back-chaining style to reduce a goal to subgoals</li>\n</ul>\n<p>But elimination rules in natural reduction come in two forms. The most general form (e.g. disjE or exE in Isabelle) allows any formula as the conclusion, and is analogous to a sequent calculus rule that operates only on the left side. But there is also a special form (e.g. conjunct1, mp) that doesn’t fit this pattern, but performs forward reasoning. I have called these destruction rules, but this nomenclature is totally non-standard.</p>\n<ul>\n<li>elim is for proper elimination rules</li>\n<li>dest is for destruction rules, and performs forward reasoning in your assumptions </li>\n</ul>\n<p>Larry</p>",
        "id": 294669546,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172972
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear Freek,</p>\n<p>\"inductive_cases\" generates a new fact from the given formula which you<br>\ncan inspect e.g. using \"thm\".</p>\n<p>\"thm SkipE\" reveales</p>\n<p>(SKIP, ?s) ⇒ ?t ⟹ (?t = ?s ⟹ ?P) ⟹ ?P</p>\n<p>which is in \"elim-format\" i.e., the conclusion is fully general and<br>\nunifies with any subgoal and we have a major premise that is eliminated.</p>\n<p>Where did you actually see \"(SKIP,s) \\&lt;Rightarrow&gt; t \\&lt;Longrightarrow&gt; t<br>\n= s\" ?</p>\n<p>cheers,</p>\n<p>chris</p>",
        "id": 294669572,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172985
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>In the example files for Concrete Semantics, I see lemmas<br>\n(for example \"SkipE\") that are proved with \"[elim]\", but<br>\nwhere I think that you do not only want to use them when<br>\ntheir conclusion unifies with the goal?</p>\n</blockquote>\n<p>Do you mean?</p>\n<p>inductive_cases SkipE[elim!]: \"(SKIP,s) ⇒ t\"<br>\nthm SkipE<br>\n  ⟦(SKIP, ?s) ⇒ ?t; ?t = ?s ⟹ ?P⟧ ⟹ ?P</p>\n<p>This is a standard pattern for case distinction, that you see all over<br>\nIsabelle. It is also produced by \"obtains\".</p>\n<p>For SKIP, there is only one case, namely t=s.</p>\n<p>The intuition is as follows:<br>\n  If the premise contains a (SKIP,s) =&gt; t, this rule will unify with any<br>\nconclusion P, and what remains to proof is \"t=s ==&gt; P\" ... the SKIP is<br>\ngone.</p>\n<p>Look, e.g., at <br>\n  thm list.set_cases<br>\nto see examples for more than one case.</p>\n<p>Also inductive predicates generate rules in this format, to be applied<br>\nwith \"rule inversion\", e.g.<br>\n  thm big_step.cases</p>\n<p>Note that the \"proof (cases)\" method essentially applies the<br>\ncorresponding cases rules, and then tries to automatically prove trivial<br>\ngoals.</p>",
        "id": 294669592,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172990
    },
    {
        "content": "<p>From: Freek Wiedijk &lt;<a href=\"mailto:freek@cs.ru.nl\">freek@cs.ru.nl</a>&gt;<br>\nDear Peter,</p>\n<blockquote>\n<p>thm SkipE<br>\n ⟦(SKIP, ?s) ⇒ ?t; ?t = ?s ⟹ ?P⟧ ⟹ ?P</p>\n</blockquote>\n<p>Oops!  From the book (on page 81) I had got the impression<br>\nthat the theorem would be \"(SKIP, s) =&gt; t ==&gt; t = s\".<br>\n(I hadn't actually tried it.)</p>\n<p>I feel embarrassed now.  My apologies for the disturbance,<br>\nand thanks for all the help!</p>\n<p>Freek</p>",
        "id": 294669605,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172996
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThe book is intentionally ambiguous at this point. The fact that the <br>\ninductive_cases command produces the rules in elimination format is merely a <br>\nlogical diversion. Hence I suppressed that discussion.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/A9qxkISsvf-P1vnMmoYztHK4/smime.p7s\">smime.p7s</a></p>",
        "id": 294669638,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173011
    }
]