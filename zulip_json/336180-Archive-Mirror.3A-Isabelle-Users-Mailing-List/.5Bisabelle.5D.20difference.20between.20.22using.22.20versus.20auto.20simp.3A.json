[
    {
        "content": "<p>From: Jeremy Siek &lt;<a href=\"mailto:jeremy.siek@colorado.edu\">jeremy.siek@colorado.edu</a>&gt;<br>\nI've noticed that on a few occasions, referencing a lemma with<br>\na \"using\" followed by auto didn't work, whereas adding the<br>\nlemma to the simp set via \"auto simp:\" did work.<br>\nAre there some general rules of thumb regarding when to use<br>\nwhich?</p>\n<p>Best regards,<br>\nJeremy</p>",
        "id": 294130265,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660842557
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:mail@joachim-breitner.de\">mail@joachim-breitner.de</a>&gt;<br>\nHi,</p>\n<p>heh, I’ve observed it the other way around and came up with this<br>\nexplanation: When it is added via using, the simplifier will actually<br>\nsimplify the fact and then consider it in its rules, making it more<br>\nlikely to match. When adding it via \"simp add:\", the fact might be in a<br>\nform that never matches.</p>\n<p>For your case, the explanation might be similar in that the fact matches<br>\nonly in a non-simplified form. But I’m sure the experts can come up with<br>\nmore explanations.</p>\n<p>I cannot provide a general rule though.</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/n_stJkQQWIEQytB_T45-t6gI/signature.asc\">signature.asc</a></p>",
        "id": 294130280,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660842562
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nMore precisely, Isar does nothing more than adding the facts to the <br>\n\"using\" slot of the proof state.  It is then up to the subsequent proof <br>\nmethod to make sense of it.  For semi-automated methods like simp, auto, <br>\nblast etc. this means to insert the facts into the goal state and proceed <br>\nas usual.  This effectively means that type variables cannot be <br>\ninstantiated under most circumstances.</p>\n<p>It is one of the many pitfalls of implicit polymorphism (or the lack <br>\nthereof) in certain situations.</p>\n<p>Makarius</p>",
        "id": 294130337,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660842581
    },
    {
        "content": "<p>From: Jeremy Siek &lt;<a href=\"mailto:jeremy.siek@colorado.edu\">jeremy.siek@colorado.edu</a>&gt;<br>\nThanks all for the explanations on this!</p>",
        "id": 294130606,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660842667
    }
]