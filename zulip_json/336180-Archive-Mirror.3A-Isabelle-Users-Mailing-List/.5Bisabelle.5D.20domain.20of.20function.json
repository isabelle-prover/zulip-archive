[
    {
        "content": "<p>From: \"Kobayashi, Hidetsune\" &lt;<a href=\"mailto:hd_coba@yahoo.co.jp\">hd_coba@yahoo.co.jp</a>&gt;<br>\nHello!</p>\n<p>Let A be a naive set, then is it true that<br>\narbitrary \\&lt;in&gt; A ?</p>\n<p>The question arose when I tryed to prove the following:</p>\n<p>constdefs<br>\ndomain_test::\"['a set, nat, nat =&gt; 'a] =&gt; bool\"<br>\n\"domain_test A n f == f \\&lt;in&gt; extensional {j. j \\&lt;le&gt; n} \\&lt;and&gt;<br>\n(\\&lt;forall&gt;j \\&lt;le&gt; n. f j \\&lt;in&gt; A)\"</p>\n<p>lemma test:\"[| domain_test A n f; domain_test A m f |] ==&gt; n = m\"</p>\n<p>Is this lemma true? If this is true, is there any proof?</p>\n<p>Hidetsune Kobayashi</p>",
        "id": 294046569,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660817524
    },
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:tjark.weber@gmx.de\">tjark.weber@gmx.de</a>&gt;<br>\nOn Thursday 15 February 2007 23:18, Kobayashi, Hidetsune wrote:</p>\n<blockquote>\n<p>Let A be a naive set, then is it true that<br>\narbitrary \\&lt;in&gt; A ?</p>\n</blockquote>\n<p>Not necessarily.  You can think of \"arbitrary\" as a completely unspecified <br>\nconstant, so unless A = UNIV, you won't be able to prove arbitrary \\&lt;in&gt; A.  <br>\n(Note that you won't be able to prove arbitrary \\&lt;notin&gt; A either, unless A = <br>\n\\&lt;emptyset&gt;.)</p>\n<blockquote>\n<p>The question arose when I tryed to prove the following:</p>\n<p>constdefs<br>\ndomain_test::\"['a set, nat, nat =&gt; 'a] =&gt; bool\"<br>\n\"domain_test A n f == f \\&lt;in&gt; extensional {j. j \\&lt;le&gt; n} \\&lt;and&gt;<br>\n(\\&lt;forall&gt;j \\&lt;le&gt; n. f j \\&lt;in&gt; A)\"</p>\n<p>lemma test:\"[| domain_test A n f; domain_test A m f |] ==&gt; n = m\"</p>\n<p>Is this lemma true? If this is true, is there any proof?</p>\n</blockquote>\n<p>Assuming that extensional is defined as</p>\n<p>\"extensional A = {f. \\&lt;forall&gt;x. x~:A --&gt; f x = arbitrary}\",</p>\n<p>the lemma is not true.  The problem is once again that \"arbitrary\" is just a <br>\nname for some specific value; it is not a value on its own that's somehow <br>\nmagically different from all other values.  So \"f j = arbitrary\" and \"f j <br>\n\\&lt;in&gt; A\" may both be true.</p>\n<p>If you want to model partial functions, then another possibility is to use the <br>\n\"'a option\" datatype, with constructors \"None\" and \"Some 'a\".  The following <br>\nlemma is indeed true, because \"None\" is provably different from \"Some a\":</p>\n<p>constdefs<br>\n  domain_test' :: \"['a set, nat, nat =&gt; 'a] =&gt; bool\"<br>\n  \"domain_test' A n f == (\\&lt;forall&gt;j. n &lt; j --&gt; f j = None) \\&lt;and&gt;<br>\n                           (\\&lt;forall&gt;j\\&lt;le&gt;n. \\&lt;exists&gt;a\\&lt;in&gt;A. f j = Some a)\"</p>\n<p>lemma: \"[| domain_test' A n f; domain_test' A m f |] ==&gt; n = m\"</p>\n<p>See theory HOL/Map (<a href=\"http://isabelle.in.tum.de/dist/library/HOL/Map.html\">http://isabelle.in.tum.de/dist/library/HOL/Map.html</a>) for <br>\nexisting related syntax and lemmas.  I'm not sure however how well this <br>\napproach would go together with the Algebra theories.</p>\n<p>Best,<br>\nTjark</p>",
        "id": 294046611,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660817539
    },
    {
        "content": "<p>From: \"Kobayashi, Hidetsune\" &lt;<a href=\"mailto:hd_coba@yahoo.co.jp\">hd_coba@yahoo.co.jp</a>&gt;<br>\nThanks, Tjark. The lemma should be true, (if not,<br>\n                                                     ~~~~<br>\nthere is a function which is equal to a strict<br>\n                                            ^^^^^^^<br>\nrestriction of itself).</p>\n<p>Hidetsune   </p>\n<p>--- Tjark Weber &lt;<a href=\"mailto:tjark.weber@gmx.de\">tjark.weber@gmx.de</a>&gt; wrote:</p>\n<hr>\n<p>Start Yahoo! Auction now! Check out the cool campaign<br>\n<a href=\"http://pr.mail.yahoo.co.jp/auction/\">http://pr.mail.yahoo.co.jp/auction/</a></p>",
        "id": 294046647,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660817549
    },
    {
        "content": "<p>From: Clemens Ballarin &lt;<a href=\"mailto:ballarin@in.tum.de\">ballarin@in.tum.de</a>&gt;<br>\nDear Hidetsune,</p>\n<p>unfortunately, modelling partial functions with arbitrary is rather <br>\ncounter-intuitive and weak.  Since arbitrary is an (unspecified) <br>\nelement from the underlying type, it is not possible to determine the <br>\ndomain of such a function.  The function could be undefined at point x, <br>\nor it could map x to a value that coincides with the (unspecified) <br>\nvalue of arbitrary.</p>\n<p>If you want to deal with partial functions seriously, you will have to <br>\nmake the domain explicit.  I can think of two ways of dealing with <br>\nthis.  You can either make the function a pair (f, A) where A is the <br>\ndomain of f.  Or you let f be of type 'a =&gt; 'b option, and x is in the <br>\ndomain of f iff f x = None.  Both are precise but not convenient to <br>\ndeal with, I'm afraid.</p>\n<p>Clemens</p>",
        "id": 294046674,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660817557
    },
    {
        "content": "<p>From: \"Dr. Brendan Patrick Mahony\" &lt;<a href=\"mailto:brendan.mahony@dsto.defence.gov.au\">brendan.mahony@dsto.defence.gov.au</a>&gt;<br>\nThere is of course a third (Z) option: modelling partial functions as  <br>\ndeterministic relations,<br>\nie ('a * 'b) set. This is similar to the 'a =&gt; 'b option model in  <br>\nmost respects, but is<br>\nslightly more natural when defining finite functions and has the  <br>\nadvantage of inheriting a lot of<br>\nmachinery from the relational super-type.</p>\n<p>You can reduce this model (and those mentioned by Clemens) to the  <br>\narbitrary-off-domain model by defining an application operator, in  <br>\nthis case</p>\n<p>f.x = (THE y. (x, y) : f),</p>\n<p>but you now have the advantage of an explicit record of the domain.</p>\n<hr>\n<p>Dr Brendan Mahony<br>\nInformation Networks Division                   ph +61 8 8259 6046<br>\nDefence Science and Technology Organisation     fx +61 8 8259 5589<br>\nEdinburgh, South Australia      <a href=\"mailto:Brendan.Mahony@dsto.defence.gov.au\">Brendan.Mahony@dsto.defence.gov.au</a></p>\n<p>Important: This document remains the property of the Australian<br>\nGovernment Department of Defence and is subject to the jurisdiction<br>\nof the Crimes Act section 70. If you have received this document in<br>\nerror, you are requested to contact the sender and delete the document.</p>",
        "id": 294046688,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660817563
    }
]