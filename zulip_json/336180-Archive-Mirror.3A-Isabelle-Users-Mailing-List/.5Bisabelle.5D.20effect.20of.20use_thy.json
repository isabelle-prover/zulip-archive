[
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nUsing Isabelle2007, and doing</p>\n<p>use_thy \"MSA\"</p>\n<p>this seems to work but when I've done it I get the following behaviour, <br>\nwhich I've never noticed before:</p>\n<p>the_context () refers to an ancestor theory, not to MSA</p>\n<p>theory \"MSA\" ;<br>\ngives the following error message:<br>\nException- ERROR \"Theory loader: undefined theory entry for \\\"MSA\\\"\" raised</p>\n<p>Note - at the stage of loading MSA.ML, I also got the message</p>\n<p>*** Theory loader: unresolved dependencies of theory \"MSA\" on file(s): <br>\n\"SatEx1_mk.ML\"</p>\n<p>because \"SatEx1_mk.ML\" was a file that I had \"use\"d before reloading MSA.</p>\n<p>What is happening here?</p>\n<p>Jeremy</p>",
        "id": 294055205,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821267
    },
    {
        "content": "<p>From: Stefan Berghofer &lt;<a href=\"mailto:berghofe@in.tum.de\">berghofe@in.tum.de</a>&gt;<br>\nJeremy Dawson wrote:<br>\nHi Jeremy,</p>\n<p>this error probably occurs because you have declared in the theory header that<br>\nMSA depends on \"SatEx1_mk.ML\", e.g. by writing</p>\n<p>theory MSA<br>\n   imports ...<br>\n   uses<br>\n     (\"SatEx1_mk.ML\")<br>\n     ...<br>\n   begin</p>\n<p>but there is no corresponding \"use\" command in the theory that actually loads<br>\n\"SatEx1_mk.ML\". To fix this, you can either add the missing \"use\" command,<br>\nor remove the parentheses around \"SatEx1_mk.ML\", i.e. write</p>\n<p>theory MSA<br>\n   imports ...<br>\n   uses<br>\n     \"SatEx1_mk.ML\"<br>\n     ...<br>\n   begin</p>\n<p>This causes \"SatEx1_mk.ML\" to be loaded immediately at the beginning of the<br>\ntheory. Note that this option might not be possible if \"SatEx1_mk.ML\" depends<br>\non theorems or constants introduced later in MSA.</p>\n<p>Greetings,<br>\nStefan</p>",
        "id": 294055237,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821286
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nFlorian Haftmann wrote:</p>\n<blockquote>\n<p>Dear Jeremy,</p>\n<blockquote>\n<p>Using Isabelle2007, and doing</p>\n<p>use_thy \"MSA\"</p>\n<p>this seems to work but when I've done it I get the following behaviour,<br>\nwhich I've never noticed before:</p>\n<p>the_context () refers to an ancestor theory, not to MSA</p>\n<p>theory \"MSA\" ;<br>\ngives the following error message:<br>\nException- ERROR \"Theory loader: undefined theory entry for \\\"MSA\\\"\" raised<br>\n</p>\n</blockquote>\n<p>you should use the ML antiquotation</p>\n<p>@{theory}</p>\n<p>which binds the theory context statically.  \"the_context ()\" is<br>\nevaluated dynamically and may return unexpected results.</p>\n<p>Dear Florian and Stefan,</p>\n</blockquote>\n<p>thanks for your replies.  But I find that these ML antiquotations are <br>\nfine when<br>\nthey are in a theory file or ML file which I load, but don't work when <br>\nI'm entering<br>\ncode at the keyboard, which I do when I am developing complex procedures.</p>\n<p>(for that matter, when I'm entering code at the keyboard, presumably <br>\nthere is no difference between static and dynamic - or have I <br>\nmisunderstood these terms?)</p>\n<blockquote>\n<blockquote>\n<p>Note - at the stage of loading MSA.ML, I also got the message</p>\n<p>*** Theory loader: unresolved dependencies of theory \"MSA\" on file(s):<br>\n\"SatEx1_mk.ML\"</p>\n<p>because \"SatEx1_mk.ML\" was a file that I had \"use\"d before reloading MSA.</p>\n<p>What is happening here?<br>\n</p>\n</blockquote>\n<p>Dependencies of theory files on ML files should be declared explicitly<br>\nin the theory header:</p>\n<p>theory MSA<br>\n  imports ...<br>\n  uses (\"SatEx1_mk.ML\")<br>\n  begin</p>\n<p>...</p>\n<p>use \"SatEx1_mk.ML\"</p>\n<p>end</p>\n<p>Hope this helps,<br>\n  Florian</p>\n<p>The theory MSA doesn't depend in the file SatEx1_mk.ML, rather the other <br>\nway around:<br>\n\"SatEx1_mk.ML\" contains code I want to run in the context of the theory MSA</p>\n</blockquote>\n<p>As Stefan's email suggests, if I put<br>\nuses<br>\n    \"SatEx1_mk.ML\"  into the theory file, then it doesn't work if I <br>\ndon't have a<br>\ncorresponding \"use\" command in the theory to load \"SatEx1_mk.ML\"</p>\n<p>So, given that I want to load the theory MSA, and then, subsequently, <br>\nsometimes, maybe,<br>\nuse a file containing some ML procedure, how should I do this?</p>\n<p>Thanks,</p>\n<p>Jeremy</p>",
        "id": 294055302,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821316
    },
    {
        "content": "<p>From: Amine Chaieb &lt;<a href=\"mailto:chaieb@in.tum.de\">chaieb@in.tum.de</a>&gt;<br>\nDear Jeremy,</p>\n<blockquote>\n<p>thanks for your replies.  But I find that these ML antiquotations are <br>\nfine when<br>\nthey are in a theory file or ML file which I load, but don't work when <br>\nI'm entering<br>\ncode at the keyboard, which I do when I am developing complex procedures.</p>\n<p>(for that matter, when I'm entering code at the keyboard, presumably <br>\nthere is no difference between static and dynamic - or have I <br>\nmisunderstood these terms?)</p>\n</blockquote>\n<p>I am not sure about what you mean by \"entering code at the keyboard\", <br>\nbut You can use antiquotations when you program (I do it all the time).<br>\nYou just need to make sure that your file (or piece of Code) is loaded <br>\nby Isar and not by ML. Antiquotations make no since without <br>\nIsar-context. Technically, there is an interpreter of these <br>\nAntiquotations that generates the lengthy Code you would write, when you <br>\nwant to refer to logical entities.<br>\nIn interactive theory development, you can start an ML section inside <br>\nIsar by</p>\n<p>ML{*</p>\n<p>your code with antiquotations and X-symbols etc..</p>\n<p>*}</p>\n<p>You can run this code just like other theory elements, and will be <br>\ninterpreted with respect to the Isar context at that point.<br>\nML antiquotations that depend on the context, with use <em>that</em> context, <br>\n<em>at compile time</em>. This is in contrast with calls like the_context(), <br>\nwhich takes place when called (which again depends -- might be the <br>\ncompile time context or run time depending on the call's position).<br>\nIf you like more details, see [1].</p>\n<blockquote>\n<p>So, given that I want to load the theory MSA, and then, subsequently, <br>\nsometimes, maybe,<br>\nuse a file containing some ML procedure, how should I do this?</p>\n</blockquote>\n<p>You must declare this dependency as Stefan pointed out.<br>\n  theory Foo<br>\n  imports ...<br>\n  uses bar<br>\n  begin</p>\n<p>Now if you want your file to be used <em>before</em> starting the theory, you <br>\nmust set bar = \"yourfilename\". If you want the file to be loaded <br>\nafterwards you must set bar = (\"yourfilename\")  --- Note the <br>\nparentheses. At any point in the theory you can do<br>\n  use \"yourfilename\"</p>\n<p>Hope it helps.<br>\nAmine.</p>\n<p>[1]: Makarius Wenzel and Amine Chaieb. SML with antiquotations embedded <br>\ninto Isabelle/Isar. In Jacques Carette and Freek Wiedijk, editors, <br>\nWorkshop on Programming Languages for Mechanized Mathematics (part of <br>\nCALCULEMUS 2007). Hagenberg, Austria, June 2007</p>",
        "id": 294055321,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821329
    },
    {
        "content": "<p>From: Amine Chaieb &lt;<a href=\"mailto:chaieb@in.tum.de\">chaieb@in.tum.de</a>&gt;<br>\nI do not see the problem clearly any more I must confess. Look at <br>\nHOL/Presburger.thy. There you have a dependency on two sorts of ML files <br>\n: those loaded before, and those loaded during the theory. The second <br>\nones contain antiquotations.</p>\n<p>Btw ML{* *}. You can write pages of code in between, so you would have <br>\nto type ML{* *} only when Proofs and ML code \"alterate\" or interact.<br>\nUsually you prove some theorems and then want to write a procedure to <br>\nmanipulate these. To switch back to \"theorems\" or proof mode, on reason <br>\nwould be to use the developped proof procedure. Do you such a extremely <br>\ncoupled and interdependent bott-strapping process?</p>\n<p>Maybe I misunderstand the issue.</p>\n<p>Amine.</p>\n<p>Jeremy Dawson wrote:</p>",
        "id": 294055332,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821335
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nAmine Chaieb wrote:</p>\n<blockquote>\n<p>Dear Jeremy,</p>\n<blockquote>\n<p>thanks for your replies.  But I find that these ML antiquotations are <br>\nfine when<br>\nthey are in a theory file or ML file which I load, but don't work <br>\nwhen I'm entering<br>\ncode at the keyboard, which I do when I am developing complex <br>\nprocedures.</p>\n<p>(for that matter, when I'm entering code at the keyboard, presumably <br>\nthere is no difference between static and dynamic - or have I <br>\nmisunderstood these terms?)</p>\n</blockquote>\n<p>I am not sure about what you mean by \"entering code at the keyboard\", <br>\nbut You can use antiquotations when you program (I do it all the time).<br>\nDear Amine,</p>\n</blockquote>\n<p>What I mean is something like this</p>\n<p>val a = .... ; (entered interactively, so I can look at the result <br>\nbefore proceeding)<br>\nval b = ... ; (ditto)<br>\nval c = ... ; (ditto)<br>\nval d = the_context ()  (or whatever)</p>\n<p>Now if I start up Isar, none of the above works.</p>\n<p>I gather I could do the following</p>\n<p>ML {* val a = .... ; *}<br>\nML {* val b = ... ;  *}<br>\nML {* val c = ... ;  *}<br>\nML {* val d = the_context () ; *}</p>\n<p>or for that matter</p>\n<p>ML {* val d = @{context}  ; *}</p>\n<p>Is this what you mean?  Forever typing an additional \" ML {* _ *}\" ?</p>\n<blockquote>\n<p>You just need to make sure that your file (or piece of Code) is loaded <br>\nby Isar and not by ML. Antiquotations make no since without <br>\nIsar-context. Technically, there is an interpreter of these <br>\nAntiquotations that generates the lengthy Code you would write, when <br>\nyou want to refer to logical entities.<br>\nIn interactive theory development, you can start an ML section inside <br>\nIsar by</p>\n<p>ML{*</p>\n<p>your code with antiquotations and X-symbols etc..</p>\n<p>*}</p>\n<p>You can run this code just like other theory elements, and will be <br>\ninterpreted with respect to the Isar context at that point.<br>\nML antiquotations that depend on the context, with use <em>that</em> context, <br>\n<em>at compile time</em>. This is in contrast with calls like the_context(), <br>\nwhich takes place when called (which again depends -- might be the <br>\ncompile time context or run time depending on the call's position).<br>\nIf you like more details, see [1].</p>\n<blockquote>\n<p>So, given that I want to load the theory MSA, and then, subsequently, <br>\nsometimes, maybe,<br>\nuse a file containing some ML procedure, how should I do this?</p>\n</blockquote>\n<p>You must declare this dependency as Stefan pointed out.<br>\n theory Foo<br>\n imports ...<br>\n uses bar<br>\n begin</p>\n<p>Now if you want your file to be used <em>before</em> starting the theory, you <br>\nmust set bar = \"yourfilename\". If you want the file to be loaded <br>\nafterwards you must set bar = (\"yourfilename\")  --- Note the <br>\nparentheses. At any point in the theory you can do<br>\n use \"yourfilename\"</p>\n<p>This doesn't work - and if I understood correctly, Stefan explained why,<br>\nthe theory file doesn't contain use bar.  I want to load the theory <br>\nfile, do some work interactively (eg, involving development or changes <br>\nto bar), then use bar.  This is what<br>\nseemed to be related to the failure I reported earlier</p>\n</blockquote>\n<p>Thanks.</p>\n<p>Jeremy</p>\n<blockquote>\n<p>Hope it helps.<br>\nAmine.</p>\n<p>[1]: Makarius Wenzel and Amine Chaieb. SML with antiquotations <br>\nembedded into Isabelle/Isar. In Jacques Carette and Freek Wiedijk, <br>\neditors, Workshop on Programming Languages for Mechanized Mathematics <br>\n(part of CALCULEMUS 2007). Hagenberg, Austria, June 2007</p>\n</blockquote>",
        "id": 294055375,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821353
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi Jeremy, hi all,</p>\n<p>Jeremy Dawson wrote:</p>\n<blockquote>\n<blockquote>\n<p>What I mean is something like this</p>\n<p>val a = .... ; (entered interactively, so I can look at the result<br>\nbefore proceeding)<br>\nval b = ... ; (ditto)<br>\nval c = ... ; (ditto)<br>\nval d = the_context ()  (or whatever)</p>\n</blockquote>\n</blockquote>\n<p>Amine Chaieb wrote:</p>\n<blockquote>\n<p>Btw ML{* *}. You can write pages of code in between, so you would have <br>\nto type ML{* *} only when Proofs and ML code \"alterate\" or interact.</p>\n</blockquote>\n<p>Maybe the misunderstanding is that Jeremy is used to working at the <br>\ninteractive terminal, typing ML expressions and getting responses. When <br>\ndeveloping proof procedures, I used to work like this, too, but now I <br>\nhave switched completely to an \"Isar-centric\" style of working, <br>\nprimarily since the antiquotations are so useful.</p>\n<p>What I usually do nowadays, when I develop ML code interactively is this:</p>\n<p>In ProofGeneral, set up a theory:</p>\n<p>| theory Scratch<br>\n| imports WhateverYouNeed<br>\n| begin</p>\n<p>Then, I open up an ML section, and type term a:</p>\n<p>| ML {*<br>\n|   val a = ...;<br>\n| *}</p>\n<p>To see what happens, I step over this section (using PG). And then I fix <br>\nit until it typechecks :-).</p>\n<p>Now I want to keep editing, so I step back in PG and add the new <br>\ndeclaration:</p>\n<p>| ML {*<br>\n|   val a = ...;<br>\n|   val b = ...;<br>\n| *}</p>\n<p>This is a bit like working on a tty, but you get all the benefits of <br>\nhaving a \"true context\" around that you can refer to using <br>\nantiquotations. E.g. I write</p>\n<p>Const (@{const_name \"wf\"}, ...)</p>\n<p>instead of</p>\n<p>Const (\"<a href=\"http://Wellfounded_Recursion.wf\">Wellfounded_Recursion.wf</a>\", ...)</p>\n<p>and if I mistype the name I get a useful error instead of some <br>\nunpredictable garbage. The same for theorems @{thm ...} and so on.</p>\n<p>Also, with this style of working, I have the development inside a file <br>\nthat I can save. And when the development is finished, the theory can be <br>\n  imported in some other developments, with all the contexts and <br>\ndependencies managed correctly, and you always know statically, what <br>\n@{context} refers to.</p>\n<p>Maybe this helps solving your problems with \"the_context ()\": Avoid it. :-)</p>\n<p>Alex</p>",
        "id": 294055444,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821372
    },
    {
        "content": "<p>From: Amine Chaieb &lt;<a href=\"mailto:chaieb@in.tum.de\">chaieb@in.tum.de</a>&gt;<br>\nDear Jeremy,</p>\n<p>Jeremy Dawson wrote:</p>\n<blockquote>\n<p>Dear Amine,</p>\n<p>I am referring to files I want to load _after_  loading the theory.  Not <br>\nbefore the theory, not during the theory.  That is to say, I want to <br>\nload the theory (without loading the ML file).  I want to load the ML <br>\nfile _later_, at some subsequent time.  If I understand the file</p>\n</blockquote>\n<p>Assume we have bar.thy and file.ML, and you want to load file.ML <em>after</em> <br>\nbar.thy. Choose a name, wlo. bar2.thy, and import bar.thy in the header <br>\nand use file.ML -- doesn't this do the job?</p>\n<p>As I understand you want to use theories and ML files from the ML <br>\ntoplevel. Combining this with Antiquotations is painful. I have tried it <br>\nonce, since I used to develop everything on the ML toplevel. By the <br>\nadvent of antiquotations and other means, I left ML toplevel and only <br>\ndevelop as Alex presented. Antiquotations and Co not only make *no <br>\nsense* without Isar context, but turn against you without it.<br>\nAs Makarius says, this is the Context penalty.</p>\n<blockquote>\n<p>that if I were to type in</p>\n<p>ML {*<br>\nval a = .... ;<br>\nval b = ... ;<br>\nval c = ... ;<br>\n*}<br>\nthen I wouldn't see the result for a before b is calculated, and so on.<br>\nThis is therefore not what I need.</p>\n</blockquote>\n<p>This is indeed an Issue. Especially if a takes long.<br>\nBy the way, In emacs there is a way to make shortcut for these, but I <br>\ndon't know exactly how. Cc Ca Ca gives you the antiquotation @{text \"\"} <br>\nwith cursor ready inside the quotes, so there must be a way for ML{* *}</p>\n<p>Amine.</p>",
        "id": 294055465,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821382
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nAmine Chaieb wrote:</p>\n<blockquote>\n<p>I do not see the problem clearly any more I must confess. Look at</p>\n</blockquote>\n<blockquote>\n<p>There you have a dependency on two sorts of ML files : those loaded <br>\nbefore, and those loaded during the theory. The second ones contain <br>\nantiquotations.</p>\n<p>Dear Amine,</p>\n</blockquote>\n<p>I am referring to files I want to load _after_  loading the theory.  Not <br>\nbefore the theory, not during the theory.  That is to say, I want to <br>\nload the theory (without loading the ML file).  I want to load the ML <br>\nfile _later_, at some subsequent time.  If I understand the file<br>\nHOL/Presburger.thy correctly, it loads some files before loading the <br>\ntheory, and some files during the loading of the theory.  I do not see <br>\nhow it declares files so as to permit them to be loaded afterwards.</p>\n<blockquote>\n<p>Btw ML{* *}. You can write pages of code in between, so you would have <br>\nto type ML{* *} only when Proofs and ML code \"alterate\" or interact.<br>\nIn my experience the code between the ML {* and the *} is executed all <br>\nat once.  I am referring to a situation where I am developing the ML <br>\ncode, and where I do so by entering some ML code, having it run, viewing <br>\nthe result on the screen, and then writing some more ML code, and so <br>\non.  Eventually there may well be lots of ML code which can no doubt be <br>\nenclosed by a single ML {* and *}.  But while I am developing it, or <br>\ndebugging it, I want to view the output of small parts of it.  This is <br>\nwhy I gave the following as the example:</p>\n</blockquote>\n<p>val a = .... ; (entered interactively, so I can look at the result <br>\nbefore proceeding)<br>\nval b = ... ; (ditto)<br>\nval c = ... ; (ditto)<br>\nval d = the_context ()  (or whatever)</p>\n<p>Now I understand (and this is how it works for me, anyway)</p>\n<p>that if I were to type in</p>\n<p>ML {*<br>\nval a = .... ;<br>\nval b = ... ;<br>\nval c = ... ;<br>\n*}<br>\nthen I wouldn't see the result for a before b is calculated, and so on.<br>\nThis is therefore not what I need.</p>\n<p>Regards,</p>\n<p>Jeremy</p>\n<blockquote>\n<p>Usually you prove some theorems and then want to write a procedure to <br>\nmanipulate these. To switch back to \"theorems\" or proof mode, on <br>\nreason would be to use the developped proof procedure. Do you such a <br>\nextremely coupled and interdependent bott-strapping process?</p>\n<p>Maybe I misunderstand the issue.</p>\n<p>Amine.</p>\n<blockquote>\n<p>Dear Amine,</p>\n<p>What I mean is something like this</p>\n<p>val a = .... ; (entered interactively, so I can look at the result <br>\nbefore proceeding)<br>\nval b = ... ; (ditto)<br>\nval c = ... ; (ditto)<br>\nval d = the_context ()  (or whatever)</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>the theory file doesn't contain use bar.  I want to load the theory <br>\nfile, do some work interactively (eg, involving development or <br>\nchanges to bar), then use bar.  This is what<br>\nseemed to be related to the failure I reported earlier</p>\n<p>Thanks.</p>\n<p>Jeremy</p>\n</blockquote>\n</blockquote>",
        "id": 294055472,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821384
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nAmine Chaieb wrote:</p>\n<blockquote>\n<p>Dear Jeremy,</p>\n<p>Jeremy Dawson wrote:</p>\n<blockquote>\n<p>Dear Amine,</p>\n<p>I am referring to files I want to load _after_  loading the theory.  <br>\nNot before the theory, not during the theory.  That is to say, I want <br>\nto load the theory (without loading the ML file).  I want to load the <br>\nML file _later_, at some subsequent time.  If I understand the file</p>\n</blockquote>\n<p>Assume we have bar.thy and file.ML, and you want to load file.ML <br>\n<em>after</em> bar.thy. Choose a name, wlo. bar2.thy, and import bar.thy in <br>\nthe header and use file.ML -- doesn't this do the job?</p>\n<p>Dear Amine,</p>\n</blockquote>\n<p>I haven't tried it but I imagine it would.  I have in the past used <br>\n\"dummy\" theories to<br>\nload an ML file and (in Isabelle2005) it worked.</p>\n<blockquote>\n<p>As I understand you want to use theories and ML files from the ML <br>\ntoplevel. Combining this with Antiquotations is painful. I have tried <br>\nit once, since I used to develop everything on the ML toplevel. By the <br>\nadvent of antiquotations and other means, I left ML toplevel and only <br>\ndevelop as Alex presented. Antiquotations and Co not only make *no <br>\nsense* without Isar context, but turn against you without it.<br>\nAs Makarius says, this is the Context penalty.</p>\n<p>OK, well supposing I used @{theory} instead of the_context () in an ML file.<br>\nNow it was said earlier that @{theory} is evaluated statically, and <br>\nthe_context () is evaluated dynamically.  I take it this means that <br>\nthe_context () is evaluated at the point where the code is encountered.  <br>\nWhen is @{theory} evaluated?  Is it immediately before the ML file is <br>\nloaded?  Or is it before the theory file, in which the ML file is <br>\ndeclared, is loaded?</p>\n</blockquote>\n<p>Likewise if I use @{theory} in an ML {* ... *} portion of a .thy file.  <br>\nIn this event,<br>\nwhat is the point where @{theory} is evaluated?  Is it before the .thy <br>\nfile is loaded, or is it  at the point where the \"ML {*\" is encountered, <br>\nor where?</p>\n<p>Thanks,</p>\n<p>Jeremy</p>",
        "id": 294055479,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821390
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nJeremy Dawson wrote:</p>\n<blockquote>\n<p>OK, well supposing I used @{theory} instead of the_context () in an ML <br>\nfile.<br>\nNow it was said earlier that @{theory} is evaluated statically, and <br>\nthe_context () is evaluated dynamically.  I take it this means that <br>\nthe_context () is evaluated at the point where the code is encountered.  </p>\n</blockquote>\n<p>Worse: When the code is run. Suppose you are defining a function:</p>\n<p>fun f x =<br>\n   let<br>\n      ...<br>\n      val thy = the_context ()</p>\n<p>Now the context will be evaluated (to the value of some global <br>\nreference) whenever you apply the function. This is almost never what <br>\nyou want.</p>\n<blockquote>\n<p>When is @{theory} evaluated?  Is it immediately before the ML file is <br>\nloaded?  Or is it before the theory file, in which the ML file is <br>\ndeclared, is loaded?</p>\n</blockquote>\n<p>The former.</p>\n<blockquote>\n<p>Likewise if I use @{theory} in an ML {* ... *} portion of a .thy file.  <br>\nIn this event,<br>\nwhat is the point where @{theory} is evaluated?  Is it before the .thy <br>\nfile is loaded, or is it  at the point where the \"ML {*\" is encountered, <br>\nor where?</p>\n</blockquote>\n<p>The latter.</p>\n<p>Alex</p>",
        "id": 294055494,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821402
    },
    {
        "content": "<p>From: Lucas Dixon &lt;<a href=\"mailto:ldixon@inf.ed.ac.uk\">ldixon@inf.ed.ac.uk</a>&gt;<br>\n-----BEGIN PGP SIGNED MESSAGE-----<br>\nHash: SHA1</p>\n<p>Jeremy Dawson wrote:<br>\nThis is also the way I develop things for Isabelle. I haven't yet moved<br>\nto ML in antiquotations.</p>\n<p>I use the following to reliably get a specific theory context....</p>\n<p>use_thy \"MyTheory\";<br>\nval thry = Theory.begin_theory \"test\" [theory \"MyTheory\"];<br>\n(* sometime I then use:<br>\nML_Context.set_context (SOME (Context.Theory thry)); *)</p>\n<p>I then usually use the variable \"thry\". If I finally want to publish the<br>\ncode in a theory, I abstract over \"thry\" using the antiquotations, or<br>\nuse the ML loading mechanisms from the theory that needs the ML code -<br>\nin which case I can drop the header from my development file.</p>\n<p>It's interesting to see theory development at the ML level - the need to<br>\ndo this depends on what level of programming you are doing. I quite like<br>\nto be able to automate the making of definitions, and other theory-level<br>\nchanges. Thus I work at the ML level for two reasons:</p>\n<ol>\n<li>I'm not sure how ML can update \"the_context()\" in Isar.</li>\n<li>I find it easier for debugging and develop for the reasons you've<br>\nobserved; ML interactive shell requires less typing for interaction.</li>\n</ol>\n<p>However, I haven't really played seriously with the antiquotations, so<br>\nperhaps I'm just out of date with the latest and best coding fashions :)</p>\n<p>lucas<br>\n-----BEGIN PGP SIGNATURE-----<br>\nVersion: GnuPG v1.4.6 (GNU/Linux)<br>\nComment: Using GnuPG with Mozilla - <a href=\"http://enigmail.mozdev.org\">http://enigmail.mozdev.org</a></p>\n<p>iD8DBQFHlTuRogMqU4edHsMRAnfFAKCM8enLaiPJAGpmKKubJ4b/Y0Q0IQCgkYBc<br>\nPMK4V1NxXrsGNqU/2Hc4DXU=<br>\n=HATY<br>\n-----END PGP SIGNATURE-----</p>",
        "id": 294055645,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821470
    }
]