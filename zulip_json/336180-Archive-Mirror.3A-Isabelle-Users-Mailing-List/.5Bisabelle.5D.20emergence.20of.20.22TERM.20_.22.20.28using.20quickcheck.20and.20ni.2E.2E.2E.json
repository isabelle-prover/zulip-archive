[
    {
        "content": "<p>From: Daniel Raggi &lt;<a href=\"mailto:danielraggi@gmail.com\">danielraggi@gmail.com</a>&gt;<br>\nI'm getting exceptions and having other kinds of problems when using<br>\nquickcheck or nitpick inside tactics.  I define a tactic that should fail<br>\nwhen quickcheck finds a counterexample and shouldn't do anything otherwise,<br>\nas follows:</p>\n<p>fun check_counter_tac ctxt thm =<br>\n  let<br>\n   val term = concl_of thm<br>\n  in<br>\n   case  Quickcheck.test_terms ctxt (true, true) [] [(term, [])] of<br>\n     NONE =&gt; Seq.single thm<br>\n     | _ =&gt; Seq.empty<br>\n  end;</p>\n<p>Then I try to run the tactic in a proof, like this:<br>\nlemma \"0=(1::nat)\" apply (tactic \"check_counter_tac @{context}\")<br>\nbut I get the following exception:</p>\n<p>exception TYPE raised (line 273 of \"sign.ML\"):<br>\n  Type error in application: incompatible operand type</p>\n<p>Operator:  If :: bool =&gt; (bool × term list) option =&gt; (bool × term list)<br>\noption =&gt; (bool × term list) option<br>\n  Operand:   TERM _ :: prop<br>\n  bool =&gt; (bool × term list) option =&gt; (bool × term list) option =&gt; (bool ×<br>\nterm list) option<br>\n  prop<br>\n  If<br>\n  TERM _</p>\n<p>The function Quickcheck.test_terms works fine otherwise, e.g., if I feed it<br>\na term manually, or if I feed it the goal directly inside ML_val{**}.</p>\n<p>I'm having the same problem when trying to use nitpick inside a tactic. I<br>\ndon't get the exception, but it seems that the tactic is feeding the<br>\nnitpick function the same dummy term TERM _, and nitpick will never find a<br>\ncounterexample. It writes:</p>\n<p>Nitpicking goal:<br>\n  TERM _.</p>\n<p>and finds nothing.</p>\n<p>Does anyone know what this is about?</p>\n<p>Thanks,<br>\nDaniel</p>",
        "id": 294319031,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660926342
    },
    {
        "content": "<p>From: Jasmin Christian Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;<br>\nDear Daniel,</p>\n<p>Am 20.11.2014 um 19:21 schrieb Daniel Raggi &lt;<a href=\"mailto:danielraggi@gmail.com\">danielraggi@gmail.com</a>&gt;:</p>\n<blockquote>\n<p>I'm getting exceptions and having other kinds of problems when using<br>\nquickcheck or nitpick inside tactics<br>\n[...]<br>\n.Nitpicking goal:<br>\n TERM _.</p>\n<p>and finds nothing.</p>\n<p>Does anyone know what this is about?</p>\n</blockquote>\n<p>From this output, it would appear that the issue has nothing to do with Quickcheck and Nitpick, and everything to do with the string of tactics that were applied before you called those tools and that gave rise to \"TERM _\" (which I also don't know, but it looks like some dummy placeholder produced by some odd tactic).</p>\n<p>Regards,</p>\n<p>Jasmin</p>",
        "id": 294319515,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660926446
    },
    {
        "content": "<p>From: Daniel Raggi &lt;<a href=\"mailto:danielraggi@gmail.com\">danielraggi@gmail.com</a>&gt;<br>\nThanks for your reply, Jasmin. As you say, the problem seems to be the<br>\ninput Quickcheck and Nitpick are receiving and not what they are doing.<br>\nHowever, I'm not applying anything before trying the checkers. Strangely<br>\nenough, I got around it using Nitipick, but Quickcheck still fails. And<br>\nnitpick doesn't fail but it still behaves strangely, outputting something<br>\nthat lets me know that it is processing that mysterious dummy term \"TERM _\"<br>\nbefore processing the real goal.</p>\n<p>If we have a tactic \"check_tac\" that runs Nitpick before doing its thing,<br>\nshouldn't we get the same from this:</p>\n<hr>\n<p>lemma \"0 = (1::nat)\"<br>\n  ML_val{*<br>\n   val goal = #goal @{Isar.goal}<br>\n   val ctxt = #context @{Isar.goal}<br>\n   val t = check_tac ctxt goal<br>\n  *}</p>\n<hr>\n<p>and from this:</p>\n<hr>\n<p>lemma \"0 = (1::nat)\"<br>\n  apply (tactic \"check_tac @{context}\")</p>\n<hr>\n<p>?</p>\n<p>Instead, the first one prints:</p>\n<hr>\n<p>Nitpicking goal:<br>\n  0 = 1.<br>\nNitpick found a counterexample:</p>\n<p>Empty assignment</p>\n<hr>\n<p>as expected, but the second one prints:</p>\n<hr>\n<p>Nitpicking goal:<br>\n  TERM _.<br>\nNitpick found no counterexample.<br>\nNitpicking goal:<br>\n  0 = 1.<br>\nNitpick found a counterexample:</p>\n<p>Empty assignment</p>\n<hr>\n<p>as if it is processing TERM _ before processing the term 0 = 1.</p>\n<p>I'm attaching a minimalistic thy file just to showcase this behaviour. I<br>\nfind it strange.</p>\n<p>Daniel<br>\n<a href=\"/user_uploads/14278/NX82N9QOg3vJ1o9tkchwgK5P/dummyTERM.thy\">dummyTERM.thy</a></p>",
        "id": 294319932,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660926557
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis ML snipped looks non-canonical in various ways, so it is no surprise <br>\nthat it does not work at all.</p>\n<p>The \"implementation\" manual is the main source of information for proper <br>\nuse of Isabelle/ML, including important naming conventions that direct the <br>\nreader/writer in the right direction what things actually mean. Static <br>\ntypes do not necessarily carry a meaning in ML, especially at the bottom <br>\nof the LCF kernel.</p>\n<p>E.g. a goal state should not be called \"thm\", but \"st\"; concl_of a goal <br>\nstate is its main conclusion, but that is private property of the system <br>\nas pointed out in the manual. It is actually very rare that you access the <br>\ngoal state directly like above: there are combinators to put together <br>\ntactics without exposing the state directly.</p>\n<p>Here is a more standard way to do it:</p>\n<p>ML ‹<br>\nfun check_counter_tac ctxt =<br>\n   SUBGOAL (fn (goal, _) =&gt;<br>\n     if is_none (Quickcheck.test_terms ctxt (true, true) [] [(goal, [])])<br>\n     then all_tac else no_tac)<br>\n›</p>\n<p>lemma \"0 = (1::nat)\"<br>\n   apply (tactic ‹check_counter_tac @{context} 1›)</p>\n<p>See especially \"implementation\" manual section 4.2 Tactics, maybe also <br>\nsection 7.2 Proof methods.  All of what is written there is important.</p>\n<p>(This thread has nothing to do with quickcheck or nitpick in particular.)</p>\n<p>Makarius</p>\n<hr>\n<p><a href=\"http://stop-ttip.org\">http://stop-ttip.org</a>  944,730 people so far</p>\n<hr>",
        "id": 294320398,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660926699
    },
    {
        "content": "<p>From: Stefan Berghofer &lt;<a href=\"mailto:berghofe@in.tum.de\">berghofe@in.tum.de</a>&gt;<br>\nHi Daniel,</p>\n<p>On 11/26/2014 05:47 PM, Makarius wrote:</p>\n<blockquote>\n<p>This ML snipped looks non-canonical in various ways, so it is no surprise that it does not work at all.</p>\n</blockquote>\n<p>this is maybe a bit too hash a criticism. A while ago, I had the very same problem in one of my<br>\ntactics that had worked without problems with earlier versions of Isabelle, and it took me several<br>\nhours of debugging to find the reason for this behaviour.</p>\n<blockquote>\n<p>concl_of a goal state is its main conclusion, but that is private property of the system as pointed out in the manual.</p>\n</blockquote>\n<p>The failure of your tactic is caused by the following changeset:</p>\n<p><a href=\"http://isabelle.in.tum.de/repos/isabelle/rev/31e283f606e2\">http://isabelle.in.tum.de/repos/isabelle/rev/31e283f606e2</a></p>\n<p>In order to do \"more static checking of proof methods\", a proof method is first applied to the<br>\ndummy theorem \"TERM _\" before it gets applied to the actual proof state. The infrastructure<br>\nfor proof methods expects \"proper\" tactics to return Seq.empty when applied to such dummy<br>\ntheorems, rather than failing with an exception.</p>\n<p>Greetings,<br>\nStefan</p>",
        "id": 294320409,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660926704
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat changeset is indeed quite important to produce early failure of<br>\ntactics that are not done right -- the intention was a different one, but <br>\nthis is a good additional benefit.</p>\n<p>Note that the explanation why the TERM occurs is merely informative -- <br>\nthese things belong to the system internals: they change quite a bit over <br>\nthe years.</p>\n<p>Makarius</p>\n<hr>\n<p><a href=\"http://stop-ttip.org\">http://stop-ttip.org</a>  945,396 people so far</p>\n<hr>",
        "id": 294320425,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660926711
    },
    {
        "content": "<p>From: Daniel Raggi &lt;<a href=\"mailto:danielraggi@gmail.com\">danielraggi@gmail.com</a>&gt;<br>\nThank you very much for your suggestions and references, Makarius and<br>\nStefan. I'm updating my code and things work.</p>\n<p>Daniel</p>",
        "id": 294320506,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660926730
    }
]