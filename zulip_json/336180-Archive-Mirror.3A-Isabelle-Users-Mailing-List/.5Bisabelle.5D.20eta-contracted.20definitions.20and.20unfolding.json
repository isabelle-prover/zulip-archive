[
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nHello,</p>\n<p>I've got a few definitions that are supposed to be partially applied,  <br>\nand unfolding them when they are eta-contracted and unsaturated fails  <br>\n(silently in the case of 'unfolding'). I am surprised this doesn't  <br>\nwork in Isabelle2008, e.g.:</p>\n<p>theory t<br>\nimports Main<br>\nbegin</p>\n<p>constdefs<br>\n   f :: \"nat ⇒ nat ⇒ nat\"<br>\n   \"f x y ≡ x + y\"</p>\n<p>g :: \"nat ⇒ nat ⇒ nat\"<br>\n   \"g x y ≡ y + x\"</p>\n<p>lemma \"f = g\"<br>\n   unfolding f_def g_def<br>\n   sorry</p>\n<p>definition \"f' x y ≡ x + y\"<br>\ndefinition \"g' x y ≡ y + x\"</p>\n<p>lemma \"f' = g'\"<br>\n   unfolding f_def g_def<br>\n   sorry</p>\n<p>end</p>\n<p>Has Isabelle always behaved like this?</p>\n<p>In my particular cases I can use extensionality, but I'm keen to know  <br>\nif there are alternatives.</p>\n<p>Thanks,<br>\nPeter.</p>",
        "id": 294075898,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828864
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nYes, unfortunately.  It is high time to make unfold/unfolding really <br>\n\"unfold\" definitions completely, and not to imitate regular simplification <br>\nso much (where it is important to observe argument patterns as originally <br>\ngiven).</p>\n<p>For now you can use the following workaround:</p>\n<p>lemma \"f' = g'\"<br>\n     unfolding f_def_raw g_def_raw ...</p>\n<p>This should work, but is not ideal, because it refers to internals of the <br>\n'definition' package.  On the other hand it is easily cleaned up at a <br>\nlater stage when we provide proper unfolding by default.</p>\n<p>Makarius</p>",
        "id": 294075911,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828873
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nQuoting Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;:</p>\n<p>There is another workaround that I have used before. You can just use  <br>\nan eta-expanded version of your lemma, like this:</p>\n<p>definition \"f' x y = x + y\"<br>\ndefinition \"g' x y = y + x\"</p>\n<p>lemma foo: \"(%x y. f' x y) = (%x y. g' x y)\"<br>\nunfolding f'_def g'_def<br>\nsorry</p>\n<p>Also note that the eta-expanded version of a lemma will work anywhere  <br>\nthe eta-contracted version will, for example:</p>\n<p>lemma bar: \"f' = g'\"<br>\nby (rule foo)</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294075925,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828880
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:lochbihl@ipd.info.uni-karlsruhe.de\">lochbihl@ipd.info.uni-karlsruhe.de</a>&gt;<br>\nHello Peter,</p>\n<p>unfolding tries to rewrite the goal using the provided rewrite rules.<br>\nBoth definitions generate theorems f_def and g_def where the function <br>\nconstant f or g must be applied to two arguments if the rewrite is <br>\nsupposed to happen. This behaviour is useful because one sometimes wants <br>\nto rewrite e.g. only if the function is given its two parameters.</p>\n<blockquote>\n<p>definition \"f' x y ≡ x + y\"<br>\ndefinition \"g' x y ≡ y + x\"</p>\n<p>lemma \"f' = g'\"<br>\n  unfolding f_def g_def<br>\n  sorry<br>\nI suppose you mean \"unfolding f'_def ang g'_def here, f_def and g_def <br>\nshould not have any effect on the goal anyway.</p>\n</blockquote>\n<blockquote>\n<p>In my particular cases I can use extensionality, but I'm keen to know<br>\nif there are alternatives.</p>\n</blockquote>\n<p>The definition package also generates another theorem called <br>\n&lt;constant&gt;_def_raw, i.e. in your case f'_def_raw and g'_def_raw which <br>\nlambda-abstract over all supplied parameters, i.e</p>\n<p>thm f'_def_raw gives<br>\nf' == op +</p>\n<p>and unfolding works with these, but you will still have a hard time to <br>\nprove  f' = g' because the arguments' type is not fixed to nats, so <br>\ncommutativity does not hold.</p>\n<p>Regards,<br>\nAndreas</p>",
        "id": 294075935,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828885
    }
]