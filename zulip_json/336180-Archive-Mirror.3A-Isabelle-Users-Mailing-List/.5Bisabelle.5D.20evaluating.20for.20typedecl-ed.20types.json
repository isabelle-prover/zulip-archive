[
    {
        "content": "<p>From: Hira Taqdees Syeda &lt;<a href=\"mailto:hira@chalmers.se\">hira@chalmers.se</a>&gt;<br>\nHi,</p>\n<p>Can value in Isabelle evaluate for typedecl-ed types?</p>\n<p>I have a setup as below:</p>\n<p>typedecl physical<br>\ndatatype ('a, 'p) addr_t = Addr 'a<br>\ntype_synonym paddr = \"(32 word,physical) addr_t”</p>\n<p>With this,<br>\nvalue \"(Addr 0)::paddr”<br>\noutputs the following error:</p>\n<p>Wellsortedness error:<br>\nType Test.physical not of sort typerep<br>\nNo type arity Test.physical :: typerep</p>\n<p>I understand that typedecl does the minimum for defining types,<br>\nbut can I somehow make the type physical  of sort typerep,<br>\ngiven that I do not have the option for changing its declaration?</p>\n<p>Thanks<br>\nHira</p>",
        "id": 294822148,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242676
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\ntheory Scratch<br>\n  imports Main \"HOL-Word.Word\"<br>\nbegin</p>\n<p>typedecl physical</p>\n<p>consts dummy :: physical</p>\n<p>code_datatype dummy</p>\n<p>datatype ('a, 'p) addr_t = Addr 'a</p>\n<p>type_synonym paddr = ‹(32 word,physical) addr_t›</p>\n<p>value ‹Addr 0 :: paddr›</p>\n<p>end</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/8NT976xf3pSbaiCVSCq5_ge8/signature.asc\">signature.asc</a></p>",
        "id": 294822220,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242694
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:mail@andreas-lochbihler.de\">mail@andreas-lochbihler.de</a>&gt;<br>\nDear Hira,</p>\n<p>The type class typerep belongs to a number of definitional type classes the code generator <br>\nrelies on. The simplest way to make code generation work for typedecls is to tell the code <br>\ngenerator that it should implement them trivially as the unit type. In your example, you <br>\ncan write the following declarations and value should work thereafter.</p>\n<p>consts Physical :: physical<br>\ncode_datatype Physical</p>\n<p>Note that these commands do not affect the minimality of typedecl from the logic <br>\nperspective. All types in HOL are inhabited, so declaring Physical as being an unspecified <br>\nelement of physical is sound. The code_datatype then instantiates the relevant type <br>\nclasses that the code generator needs. All of them are definitional, i.e., no new axioms <br>\nabout physical are introduced on the way.</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 294822232,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242703
    },
    {
        "content": "<p>From: Hira Taqdees Syeda &lt;<a href=\"mailto:hira@chalmers.se\">hira@chalmers.se</a>&gt;<br>\nHi Florain, Andreas,</p>\n<p>Thanks for suggesting the solution and its explanation.</p>\n<p>Thanks<br>\nHira</p>",
        "id": 294822238,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242708
    },
    {
        "content": "<p>From: Hira Taqdees Syeda &lt;<a href=\"mailto:hira@chalmers.se\">hira@chalmers.se</a>&gt;<br>\nHi Florian, Andreas,</p>\n<p>Thanks for suggesting the solution and its explanation.</p>\n<p>Thanks<br>\nHira</p>",
        "id": 294822250,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242716
    }
]