[
    {
        "content": "<p>From: Viorel Preoteasa &lt;<a href=\"mailto:viorel.preoteasa@gmail.com\">viorel.preoteasa@gmail.com</a>&gt;<br>\nHello,</p>\n<p>I have a lemma of the following form: \"g (S f) = f\" and I would like to <br>\nuse it evaluate for example \"g (S Suc) 3\" using</p>\n<p>value \"g (S Suc) 3\"</p>\n<p>Is it possible to achieve this behavior? Simplification works OK, but I <br>\nneed also a quick way to calculate this kind of expressions.</p>\n<p>Next is the complete example</p>\n<p>definition \"S f x = f x\"</p>\n<p>lemma S_simp: \"S f = f\"</p>\n<p>by (simp add: S_def fun_eq_iff)</p>\n<p>definition \"g A = (SOME f . A = S f)\"</p>\n<p>lemma g_S_simp[code,simp]: \"g (S f) = f\"<br>\n   by (simp add: g_def S_simp)</p>\n<p>lemma \"g (S Suc) 3 = 4\"<br>\n   by (simp) (<em>this works OK</em>)</p>\n<p>value \"g (S Suc) 3\" (<em>this gives Wellsortedness error</em>)</p>\n<p>Best regards,</p>\n<p>Viorel Preoteasa</p>",
        "id": 294751754,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195750
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:mail@andreas-lochbihler.de\">mail@andreas-lochbihler.de</a>&gt;<br>\nHi Manuel,</p>\n<p>Thanks for the suggestion. I briefly had thought about this, but then dismissed it because <br>\nViorel wrote that a \"quick way\" to evaluate such expressions, and code-unfold is not quick <br>\nas it is done by the simplifier.</p>\n<p>Andreas</p>",
        "id": 294751779,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195760
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nI don't see what \"code_unfold\" has to do with performance. Are you<br>\nperhaps confusing it with code_simp/\"value [simp]\"?</p>\n<p>As far as I know, \"code_unfold\" is just a code generator preprocessing<br>\noption that allows you to tweak the input before the code generator is<br>\ninvoked. Viorel seems to want to use something as a \"code equation\" that<br>\ndoes not fulfil the syntactic prerequisites to be a code equation, and<br>\ncode_unfold works pretty well for that. I don't see why it should be slow.</p>\n<p>Manuel</p>",
        "id": 294751841,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195766
    },
    {
        "content": "<p>From: <a href=\"mailto:viorel.preoteasa@gmail.com\">viorel.preoteasa@gmail.com</a><br>\nHi,</p>\n<p>Thank you for your messages. code_unfold is exactly what I was looking for. Probably my message was  a bit confusing. <br>\nBy \"a quick way\" I did not mean necessarily efficient, but easy way to evaluate that kind of expressions. </p>\n<p>Before I would define a function F = g (S f), then introduce a lemma [code]: \"F = f\", but to introduce this lemma, I would need<br>\nto obtain f first which could be a very long expression. </p>\n<p>Viorel</p>",
        "id": 294751913,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195797
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:mail@andreas-lochbihler.de\">mail@andreas-lochbihler.de</a>&gt;<br>\nHi Viorel,</p>\n<p>Thanks for clarifying the requirements w.r.t. efficiency. I indeed misread your \"quick\" as <br>\nefficient instead of \"easy to do\".</p>\n<p>Andreas</p>",
        "id": 294751937,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195809
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:mail@andreas-lochbihler.de\">mail@andreas-lochbihler.de</a>&gt;<br>\nDear Viorel,</p>\n<p>value \"...\" tries to generate SML code for the given expression and evaluate it in the <br>\nrun-time system. In your example, the lemma g_S_simp is not a code equation, because in a <br>\ncode equation, you can only pattern match on constructors. This is also what the warning <br>\ntells you. Accordingly, the code generator ignores this equation and tries to generate <br>\ncode for g using its definition. This definition contains SOME and that's where the <br>\nwell-sortedness error comes from.</p>\n<p>So there's no way to get to this behaviour for any of the evaluator. The reason is that <br>\nthe code generator simply does not allow such non-constructor pattern, although the <br>\nsymbolic evaluators code_simp and normalization could deal with such equations.</p>\n<p>Andreas</p>",
        "id": 294752743,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196085
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHello,</p>\n<p>there is one possible solution that Andreas may have missed. Whether<br>\nthis works for you depends a bit on your application, but at least in<br>\nthe case you presented, you can simply use \"g_S_simp\" as a \"code_unfold\"<br>\nrule instead of a \"code\" rule, and then \"value\" works on your example:</p>\n<p>lemma g_S_simp[code_unfold, simp]: \"g (S f) = f\"</p>\n<p>You can read up on what \"code_unfold\" does in the code generator manual;<br>\nvery briefly, if I recall correctly, it just rewrites the input<br>\nexpression with the unfold rules before attempting to generate code for<br>\nit. I often use it to generate code for \"non-executable\" constructs that<br>\ncan be rewritten into a more palatable form, or to introduce optimisations.</p>\n<p>Manuel</p>",
        "id": 294752946,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196153
    }
]