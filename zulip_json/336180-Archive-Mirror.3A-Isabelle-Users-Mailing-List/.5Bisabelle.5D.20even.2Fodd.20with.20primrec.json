[
    {
        "content": "<p>From: Christoph Feller &lt;<a href=\"mailto:c_feller@informatik.uni-kl.de\">c_feller@informatik.uni-kl.de</a>&gt;<br>\nHallo,</p>\n<p>we tried to define the functions even and odd like this:</p>\n<p>primrec even :: \"nat =&gt; bool\"<br>\n     and odd :: \"nat =&gt; bool\" where<br>\n\"even 0 = True\" |<br>\n\"even (Suc n) = odd n\" |<br>\n\"odd 0 = False\" |<br>\n\"odd (Suc n) = even n\"</p>\n<p>and got the error</p>\n<p>inconsistent functions for datatype \"nat\"</p>\n<p>We suppose that this is due to the fact that we define a mutual<br>\nrecursive primrec-function over a datatype (nat) that is not mutual<br>\nrecursive. Is this true? Is there any not too technical explanation<br>\nwhy primrec cannot handle this rather simple looking function?</p>\n<p>Thanks,<br>\nChristoph Feller</p>",
        "id": 294106201,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835282
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi Christoph,</p>\n<blockquote>\n<p>primrec even :: \"nat =&gt; bool\"<br>\n     and odd :: \"nat =&gt; bool\" where<br>\n\"even 0 = True\" |<br>\n\"even (Suc n) = odd n\" |<br>\n\"odd 0 = False\" |<br>\n\"odd (Suc n) = even n\"<br>\n[...]</p>\n</blockquote>\n<blockquote>\n<p>We suppose that this is due to the fact that we define a mutual<br>\nrecursive primrec-function over a datatype (nat) that is not mutual<br>\nrecursive. Is this true?</p>\n</blockquote>\n<p>Yes.</p>\n<blockquote>\n<p>Is there any not too technical explanation<br>\nwhy primrec cannot handle this rather simple looking function?</p>\n</blockquote>\n<p>Simply because it wasn't designed to handle it. As there is no formal <br>\nnotion of \"rather simple looking function\", primrec uses a fixed <br>\nsyntactic scheme with exactly one function per mutually-recursive datatype.</p>\n<p>For everything else use the function package, replacing the \"primrec\" <br>\nkeyword with \"fun\".</p>\n<p>Alex</p>",
        "id": 294106295,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835300
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nAlso note that the original specification of things does not matter as<br>\nlong as you can derive the desired properties.  In that case you could<br>\ne.g. define</p>\n<p>definition even :: \"nat =&gt; bool\" where<br>\n  \"even n &lt;-&gt; n mod 2 = 0\"</p>\n<p>definition odd :: \"nat =&gt; bool\" where<br>\n  odd n &lt;-&gt; n mod 2 = 1\"</p>\n<p>and derive the recursive rules:</p>\n<p>lemma [simp]:<br>\n  \"even 0 = True\"<br>\n  \"even (Suc n) = odd n\"<br>\n  \"odd 0 = False\"<br>\n  \"odd (Suc n) = even n\"<br>\n  &lt;proof&gt;</p>\n<p>Also note that even/odd is already present in the HOL theory Parity;<br>\njust import theory Complex_Main to use it.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/TG2RjgzbengfIQQxWHsn91RI/signature.asc\">signature.asc</a></p>",
        "id": 294106391,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835332
    }
]