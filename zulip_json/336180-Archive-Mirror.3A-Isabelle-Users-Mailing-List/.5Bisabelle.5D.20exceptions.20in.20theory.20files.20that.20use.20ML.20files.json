[
    {
        "content": "<p>From: Lucas Dixon &lt;<a href=\"mailto:ldixon@inf.ed.ac.uk\">ldixon@inf.ed.ac.uk</a>&gt;<br>\nIf I have a theory file which starts:</p>\n<p>theory PureIsaP<br>\nimports HOL<br>\nuses \"src/build/Pure_IsaP.ML\"<br>\nbegin</p>\n<p>The file \"Pure_IsaP.ML\" uses a number of other files. I noticed that <br>\nwhen an exception is raised, I get something like this:</p>\n<p>*** exception SysErr of (\"chdir failed\", SOME ENOENT) raised<br>\n*** val d = \"/home/ldixon/work/IsaP/trunk/IsaPlanner\" : string<br>\n*** val it = () : unit<br>\n*** val it = () : unit<br>\n*** val it = () : unit<br>\n*** val it = () : unit<br>\n*** Exception- TOPLEVEL_ERROR raised<br>\n*** At command \"theory\".</p>\n<p>However, this doesn't tell me in which sub-file the exception was <br>\nraised. Any suggestions?</p>\n<p>thanks,<br>\nlucas</p>",
        "id": 294079081,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830054
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nMaybe the exception trace produced by Toplevel.debug := true provides some <br>\nextra hints.</p>\n<p>Anyway, if this is more that just an experiment, you need to specify <em>all</em> <br>\nloaded ML files in the theory header, via uses (\"my_extra_file.ML\") with <br>\nparentheses.  This means it is usually easier to use all files directly <br>\nfrom the header in the first place, see the start of src/HOL/HOL.thy for <br>\nexample.</p>\n<p>Makarius</p>",
        "id": 294079086,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830056
    },
    {
        "content": "<p>From: Lucas Dixon &lt;<a href=\"mailto:ldixon@inf.ed.ac.uk\">ldixon@inf.ed.ac.uk</a>&gt;<br>\nMakarius wrote:</p>\n<blockquote>\n<p>On Tue, 30 Jun 2009, Lucas Dixon wrote:</p>\n<blockquote>\n<p>If I have a theory file which starts:</p>\n<p>theory PureIsaP<br>\nimports HOL<br>\nuses \"src/build/Pure_IsaP.ML\"<br>\nbegin</p>\n<p>The file \"Pure_IsaP.ML\" uses a number of other files. I noticed that <br>\nwhen an exception is raised, I get something like this:</p>\n<p>*** exception SysErr of (\"chdir failed\", SOME ENOENT) raised<br>\n*** val d = \"/home/ldixon/work/IsaP/trunk/IsaPlanner\" : string<br>\n*** val it = () : unit<br>\n*** val it = () : unit<br>\n*** val it = () : unit<br>\n*** val it = () : unit<br>\n*** Exception- TOPLEVEL_ERROR raised<br>\n*** At command \"theory\".</p>\n<p>However, this doesn't tell me in which sub-file the exception was <br>\nraised. Any suggestions?</p>\n</blockquote>\n<p>Maybe the exception trace produced by Toplevel.debug := true provides <br>\nsome extra hints.</p>\n</blockquote>\n<p>So, to try this, should I change my theory file header to:</p>\n<p>theory PureIsaP<br>\nimports HOL<br>\nuses (\"src/build/Pure_IsaP.ML\")<br>\nbegin<br>\nML{* Toplevel.debug := true; *}<br>\nuse \"src/build/Pure_IsaP.ML\";</p>\n<p>I cannot call ML code outside of a theory, this means I have to move <br>\ntest code like that into the theory, as above, right?</p>\n<p>Having tried this, I found it still didn't tell me the file being <br>\nexecuted that raised the exception, although it did (if I understand it <br>\ncorrectly) tell me the file which contains the function that raised the <br>\nexception (it was library.ML). It also gave me an exception trace, but <br>\nthat wasn't useful in this case:</p>\n<p>ML_Context.exec(2)<br>\nToplevel.generic_theory(1)(1)(1)<br>\nRuntime.debugging(2)(1)<br>\nEnd of trace</p>\n<blockquote>\n<p>Anyway, if this is more that just an experiment, you need to specify <br>\n<em>all</em> loaded ML files in the theory header, via uses <br>\n(\"my_extra_file.ML\") with parentheses. </p>\n<p>This means it is usually easier <br>\nto use all files directly from the header in the first place, see the <br>\nstart of src/HOL/HOL.thy for example.</p>\n</blockquote>\n<p>OK, I guess I can do that. Maybe a good thing to say in the Isabelle <br>\nCookbook.</p>\n<p>If possible, it would be good to have a solution that can reflect the <br>\nstructure of code. I have several collections of files which make sense <br>\nto be loaded together (over 100 files altogether). In ML files, I <br>\npreviously had a collection of different ROOT.ML files which loaded the <br>\nappropriate sub ROOT.ML files, thus providing some structure to the <br>\nvarious modules. I guess I can do this by having a theory for each code <br>\nmodule instead of my old ROOT.ML files ?</p>\n<p>cheers,<br>\nlucas</p>",
        "id": 294079107,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830063
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 30 Jun 2009, Lucas Dixon wrote:</p>\n<blockquote>\n<p>So, to try this, should I change my theory file header to:</p>\n<p>theory PureIsaP<br>\nimports HOL<br>\nuses (\"src/build/Pure_IsaP.ML\")<br>\nbegin<br>\nML{* Toplevel.debug := true; *}<br>\nuse \"src/build/Pure_IsaP.ML\";</p>\n<p>I cannot call ML code outside of a theory, this means I have to move test <br>\ncode like that into the theory, as above, right?</p>\n</blockquote>\n<p>Regular 'ML' needs a context, because it can emit toplevel bindings, which <br>\nare stored there.  You can always say 'ML_val' or 'ML_command', even <br>\nbefore the initial 'theory' (in interactive mode).</p>\n<blockquote>\n<p>Having tried this, I found it still didn't tell me the file being <br>\nexecuted that raised the exception, although it did (if I understand it <br>\ncorrectly) tell me the file which contains the function that raised the <br>\nexception (it was library.ML). It also gave me an exception trace, but <br>\nthat wasn't useful in this case:</p>\n</blockquote>\n<p>Since you are using the repository versions of Poly/ML and Isabelle (both <br>\nmoving very fast), you should in principle get a detailed trace for the <br>\nnested ML invocation, as well as a file/line position for the last <br>\nexception (but that is probably just that of the \"error\" function in <br>\nlibrary.ML).</p>\n<p>On the other hand, things might be broken right now.  Or the situation <br>\nmight be a bit different than expected.  Which \"chdir\" did you use?  Our <br>\n\"cd\" or a different version?</p>\n<blockquote>\n<p>If possible, it would be good to have a solution that can reflect the <br>\nstructure of code. I have several collections of files which make sense <br>\nto be loaded together (over 100 files altogether). In ML files, I <br>\npreviously had a collection of different ROOT.ML files which loaded the <br>\nappropriate sub ROOT.ML files, thus providing some structure to the <br>\nvarious modules.</p>\n</blockquote>\n<p>We used to have this for src/Pure until recently.  Now there is only a <br>\nsingle flat ROOT.ML without any chdirs.  This was motivated by precise <br>\nsource file tracking of Poly/ML 5.3pre, but has also clarified our load <br>\nprocess.</p>\n<blockquote>\n<p>I guess I can do this by having a theory for each code module instead of <br>\nmy old ROOT.ML files ?</p>\n</blockquote>\n<p>You could do that.  In main HOL it happens all the time, although it is <br>\ndue to actual intermediate theory development before further ML files can <br>\nbe loaded.</p>\n<p>Makarius</p>",
        "id": 294079124,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830070
    }
]