[
    {
        "content": "<p>From: Yuhui Lin &lt;<a href=\"mailto:Y.H.Lin-2@sms.ed.ac.uk\">Y.H.Lin-2@sms.ed.ac.uk</a>&gt;<br>\nHi,</p>\n<p>I've got a an exception \"exception XML_ATOM term raised\"  when I use Syntax.parse_term  to parse a string which is exported by Syntax.string_of_term, e.g.</p>\n<p>Syntax.string_of_term @{context} @{term\" a + b\"} |&gt; Syntax.parse_term @{context};</p>\n<p>The reason for me to do this is that the system, which I am developing, need to communicate with Isabelle. So I want to export and import terms in Isabelle as string to my system in the json format in ML. But I get the above exception. Where do I  go wrong here ? Thanks in advance.</p>\n<p>best,<br>\nYuhui</p>",
        "id": 294241495,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907168
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Wed, 15 May 2013, Yuhui Lin wrote:</p>\n<blockquote>\n<p>I've got a an exception \"exception XML_ATOM term raised\"  when I use <br>\nSyntax.parse_term to parse a string which is exported by <br>\nSyntax.string_of_term, e.g.</p>\n<p>Syntax.string_of_term @{context} @{term\" a + b\"} |&gt; Syntax.parse_term <br>\n@{context};</p>\n</blockquote>\n<p>Conceptually, functions like Syntax.string_of_term from Isabelle inner <br>\nsyntax produce a pretty tree with additional markup.  Its main purpose is <br>\nto be output via one of the standard Isabelle channels (writeln, warning <br>\netc.), e.g. like this:</p>\n<p>ML {*<br>\n   val s = Syntax.string_of_term @{context} @{term\" a + b\"};<br>\n   writeln s;<br>\n*}</p>\n<p>The front-end on the Isabelle/Scala side then renders the pretty tree as <br>\nbest as it can -- Isabelle/jEdit presently uses a lot of this information <br>\nfor hilighting, hyperlinks, tooltips etc.</p>\n<p>You can peek at that raw XML tree representation in Isabelle/ML using <br>\nYXML.parse_body on the string s above.  This is mainly for information, <br>\nnormally you don't work with these internal representations directly.</p>\n<p>There are some tricks to avoid producing extra markup, and get back to <br>\nnostalgic raw text output, but one should try first to stay within the <br>\nregular mode of operation.  Note that Syntax.parse_term cannot recover <br>\nexactly the same term in general, even when printed without YXML markup.</p>\n<blockquote>\n<p>The reason for me to do this is that the system, which I am developing, <br>\nneed to communicate with Isabelle. So I want to export and import terms <br>\nin Isabelle as string to my system in the json format in ML. But I get <br>\nthe above exception.</p>\n</blockquote>\n<p>There are various ways to do that, depending what you actually need.</p>\n<p>For example, you can use encode/decode functions from the XML and Term_XML <br>\nmodule (both in Isabelle/ML and Isabelle/Scala) to get structured values <br>\nback and forth, without concrete syntax getting in between.</p>\n<p>The Isabelle term parser also accepts low-level YXML terms directly like <br>\nthis:</p>\n<p>ML {*<br>\n   val t = @{term \"a + b\"};<br>\n   val yxml = YXML.string_of_body (Term_XML.Encode.term t);</p>\n<p>writeln (YXML.embed_controls yxml);<br>\n*}</p>\n<p>Now the Output panel in Isabelle/jEdit shows some funny string with bold X <br>\nand Y characters.  This is you externalized term, it can be sent around <br>\nbetween process, over the Net etc.</p>\n<p>It can be re-internalized in Isabelle/Isar, e.g. like this:</p>\n<p>term \"XY5XXY:...\"</p>\n<p>The same in Isabelle/ML:</p>\n<p>ML {*<br>\n   val t' = Term_XML.Decode.term (YXML.parse_body yxml);<br>\n   @{assert} (t = t');<br>\n*}</p>\n<p>Thus you can bypass traditional troubles with official \"XML\", even json.</p>\n<p>Note that Isabelle/Scala hardly provides any operations on logical Term <br>\nlanguage.</p>\n<p>Makarius</p>",
        "id": 294241511,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907174
    }
]