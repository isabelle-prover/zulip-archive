[
    {
        "content": "<p>From: José Manuel Rodríguez Caballero &lt;<a href=\"mailto:josephcmac@gmail.com\">josephcmac@gmail.com</a>&gt;<br>\nHello,<br>\n  I defined a type class of operators between real vectors spaces using<br>\ntypedef. Then I defined a type class consisting of the above-mentioned<br>\noperators which are also bounded. When I applied \"transfer\" in order to<br>\nprove that 0 + a = a: it works in the first case, but it does not work in<br>\nthe second case. I know that it is possible to define both type classes<br>\nindependently one from the other, but what I did, defining a type class<br>\ninside the other one should work as well (this hereditary approach is<br>\ntypical in mathematical reasoning). The code is below.</p>\n<p>Kind Regards,<br>\nJosé M.</p>\n<p>theory real_bounded_operators<br>\n  imports<br>\n    \"HOL-ex.Sketch_and_Explore\"<br>\n    Operator_Norm_Plus<br>\nbegin</p>\n<p>section ‹Linear operators›<br>\n(* The operators may be unbounded *)</p>\n<p>typedef (overloaded) ('a::real_vector, 'b::real_vector) real_operator<br>\n= ‹{ f::'a⇒'b. linear f}›<br>\n  using linear_zero by blast</p>\n<p>setup_lifting type_definition_real_operator</p>\n<p>lift_definition bounded_real_operator :: ‹('a::real_normed_vector,<br>\n'b::real_normed_vector) real_operator ⇒ bool›<br>\nis ‹λ f. bounded_linear_axioms f›.</p>\n<p>lift_definition ev_real_operator :: ‹('a::real_vector, 'b::real_vector)<br>\nreal_operator ⇒ 'a ⇒ 'b›<br>\nis ‹λ f. λ x. f x›.</p>\n<p>instantiation real_operator :: (real_vector, real_vector) ‹real_vector›<br>\nbegin<br>\nlift_definition uminus_real_operator :: ‹('a, 'b) real_operator ⇒ ('a, 'b)<br>\nreal_operator›<br>\nis ‹λ f. ( λ x. -f x)›<br>\n  by (rule Real_Vector_Spaces.real_vector.linear_compose_neg)<br>\nlift_definition zero_real_operator :: ‹('a, 'b) real_operator› is ‹λ _::'a.<br>\n0::'b›<br>\n  by (rule Real_Vector_Spaces.real_vector.linear_zero)<br>\nlift_definition minus_real_operator :: ‹('a, 'b) real_operator ⇒ ('a, 'b)<br>\nreal_operator ⇒ ('a, 'b) real_operator›<br>\nis ‹λ f. λ g. ( λ x. f x - g x)›<br>\n  by (rule Real_Vector_Spaces.real_vector.module_hom_sub)<br>\nlift_definition plus_real_operator :: ‹('a, 'b) real_operator ⇒ ('a, 'b)<br>\nreal_operator ⇒ ('a, 'b) real_operator›<br>\nis ‹λ f. λ g. ( λ x. f x + g x)›<br>\n  by (rule Real_Vector_Spaces.real_vector.linear_compose_add)<br>\nlift_definition scaleR_real_operator :: ‹real ⇒ ('a, 'b) real_operator ⇒<br>\n('a, 'b) real_operator›<br>\nis ‹λ c. λ f. (λ x. c *⇩R (f x))›<br>\n  by (rule Real_Vector_Spaces.real_vector.linear_compose_scale_right)</p>\n<p>instance<br>\n  apply intro_classes<br>\n  apply transfer<br>\n  apply auto<br>\n  apply transfer<br>\n  apply auto<br>\n  apply transfer<br>\n  apply auto<br>\n  apply transfer<br>\n  apply auto<br>\n  apply transfer<br>\n  apply auto<br>\n  apply transfer<br>\n  apply (simp add: scaleR_add_right)<br>\n  apply transfer<br>\n  apply (simp add: scaleR_add_left)<br>\n  apply transfer<br>\n  apply simp<br>\n  apply transfer<br>\n  apply auto<br>\n  done<br>\nend</p>\n<p>section ‹Bounded linear operators›</p>\n<p>typedef (overloaded) ('a::real_normed_vector, 'b::real_normed_vector)<br>\nreal_bounded<br>\n= ‹{ f::('a, 'b) real_operator. bounded_real_operator f}›<br>\n  apply transfer<br>\n  using bounded_linear.axioms(2) bounded_linear_zero module_hom_zero by<br>\nblast</p>\n<p>setup_lifting type_definition_real_bounded</p>\n<p>lift_definition ev_real_bounded :: ‹('a::real_normed_vector,<br>\n'b::real_normed_vector) real_bounded ⇒ 'a ⇒ 'b›<br>\nis ‹λ f. λ x. ev_real_operator f x›.</p>\n<p>instantiation real_bounded :: (real_normed_vector, real_normed_vector)<br>\n‹real_vector›<br>\nbegin</p>\n<p>lift_definition uminus_real_bounded :: ‹('a::real_normed_vector,<br>\n'b::real_normed_vector) real_bounded ⇒ ('a::real_normed_vector,<br>\n'b::real_normed_vector) real_bounded›<br>\nis ‹λ f. -f›<br>\n  apply transfer<br>\n  using bounded_linear_minus bounded_linear.axioms(2) bounded_linear.intro<br>\nby auto</p>\n<p>lift_definition zero_real_boudned :: ‹('a::real_normed_vector,<br>\n'b::real_normed_vector) real_bounded›<br>\n is ‹0›<br>\n  apply transfer<br>\n  by (simp add: bounded_linear.axioms(2))</p>\n<p>lift_definition minus_real_bounded :: ‹('a::real_normed_vector,<br>\n'b::real_normed_vector) real_bounded ⇒ ('a::real_normed_vector,<br>\n'b::real_normed_vector) real_bounded ⇒ ('a::real_normed_vector,<br>\n'b::real_normed_vector) real_bounded›<br>\nis ‹λ f. λ g. f - g›<br>\n  apply transfer<br>\n  using bounded_linear_sub bounded_linear_def by blast</p>\n<p>lift_definition plus_real_bounded :: ‹('a::real_normed_vector,<br>\n'b::real_normed_vector) real_bounded ⇒ ('a::real_normed_vector,<br>\n'b::real_normed_vector) real_bounded ⇒ ('a::real_normed_vector,<br>\n'b::real_normed_vector) real_bounded›<br>\nis ‹λ f g.  f + g›<br>\n  apply transfer<br>\n  using bounded_linear_add bounded_linear_def by blast</p>\n<p>lift_definition scaleR_real_bounded :: ‹real ⇒ ('a::real_normed_vector,<br>\n'b::real_normed_vector) real_bounded ⇒ ('a::real_normed_vector,<br>\n'b::real_normed_vector) real_bounded›<br>\nis ‹λ c. λ f. c *⇩R f›<br>\n  apply transfer<br>\n  using bounded_linear_const_scaleR bounded_linear_def by blast</p>\n<p>instance<br>\n  apply intro_classes<br>\n  apply transfer<br>\n  apply auto<br>\n  apply transfer<br>\n  apply auto<br>\n  apply transfer<br>\n  sorry</p>\n<p>end</p>\n<p>end</p>\n<p>link to the original file:<br>\n<a href=\"https://github.com/dominique-unruh/bounded-operators/blob/master/real_bounded_operators.thy\">https://github.com/dominique-unruh/bounded-operators/blob/master/real_bounded_operators.thy</a></p>",
        "id": 294757707,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661198236
    }
]