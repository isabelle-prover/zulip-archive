[
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>I just noticed, that for a goal like</p>\n<p>[| ...; it ⊆ S; ... |] ==&gt; (?it it a b c) ⊆ S</p>\n<p>force unifies \"?it it a b c\" with {} -- and not with 'it' as one would<br>\nexpect.</p>\n<p>I suspect, that it first tries to apply intro! rules before looking at<br>\nthe assumptions. Is this the intended behavior? Or is it due to<br>\nsomething completely different?</p>\n<p>A simply DIY-example:</p>\n<p>schematic_lemma<br>\n  \"it ⊆ S ==&gt; ?it ⊆ S\"<br>\n  by force</p>\n<p>This results in \"S ⊆ S\"...</p>\n<ul>\n<li>René</li>\n</ul>\n<p>P.S.: This mattered to me, because it was part of an 'apply force+'<br>\nwhich then instantiated '?it' wrong...<br>\n<a href=\"/user_uploads/14278/owOySwm2f1owzHWCBVJnVHyt/smime.p7s\">smime.p7s</a></p>",
        "id": 294286811,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922146
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThere is no right or wrong here. In the context of a broader proof search and a goal free of logical variables, backtracking should ultimately find a proof if one exists. But with logical variables in the goal, you could get anything. I would need to look at the code to see which one is preferred.<br>\nLarry Paulson</p>",
        "id": 294286842,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922158
    }
]