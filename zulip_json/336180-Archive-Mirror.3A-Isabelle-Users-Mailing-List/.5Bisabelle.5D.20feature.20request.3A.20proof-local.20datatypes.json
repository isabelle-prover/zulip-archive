[
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;<br>\nDear Isabelle,</p>\n<p>I have a theorem. </p>\n<blockquote>\n<p>theorem t: \"......\"</p>\n</blockquote>\n<p>To <em>state</em> my theorem is quite straightforward, but to <em>prove</em> it I require a whole bunch of other lemmas, definitions and datatypes. My theory file, therefore, looks like this:</p>\n<blockquote>\n<p>definition x1: \"......\"</p>\n<p>datatype x2 = ......</p>\n<p>definition x3: \"......\"</p>\n<p>lemma x4: \"......\"</p>\n<p>datatype x5 = ......</p>\n<p>lemma x6: \"......\"</p>\n<p>theorem t: \".......\"<br>\nproof ......</p>\n</blockquote>\n<p>Something about this strikes me as sub-optimal. The lemmas, definitions and datatypes x1...x6 are only required <em>within</em> this one particular proof. It seems like a violation of modularity for them to be globally-available outside of this proof. So I would prefer my theory file to look like this:</p>\n<blockquote>\n<p>theorem t: \".......\"<br>\nproof</p>\n<p>definition x1: \"......\"</p>\n<p>datatype x2 = ......</p>\n<p>definition x3: \"......\"</p>\n<p>lemma x4: \"......\"</p>\n<p>datatype x5 = ......</p>\n<p>lemma x6: \"......\"</p>\n<p>......</p>\n<p>qed</p>\n</blockquote>\n<p>I know I can already kind-of define lemmas within a proof (by writing \"have x4: ...\") and I know I can already kind-of make definitions within a proof (by writing \"let ...\" or \"def ...\"). But what would be quite nice would be to have the <em>full</em> expressivity that is available at the \"top-level\", also available within a proof, so that I can make proof-local datatypes, typedefs, and so on.</p>\n<p>cheers,<br>\njohn</p>",
        "id": 294235493,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904573
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@in.tum.de\">traytel@in.tum.de</a>&gt;<br>\nHello John,</p>\n<p>not quite what you want, but with the new localized datatype package you <br>\ncan structure your proofs and datatypes definition with locales (with <br>\nor) without assumptions.</p>\n<p>theory Scratch<br>\nimports \"~~/src/HOL/BNF/BNF\"<br>\nbegin</p>\n<p>locale A<br>\nbegin</p>\n<p>data 'a list = ...</p>\n<p>theorem x: \"...\"<br>\nusing <a href=\"http://list.map\">list.map</a> ..</p>\n<p>end</p>\n<p>thm A.x</p>\n<p>end</p>\n<p>Of course, these \"local\" datatypes may not depend variables fixed by the <br>\nlocale, since this is already forbidden for typedefs. One could imagine <br>\na proof-local version of the data command with the same restriction.</p>\n<p>Best,<br>\nDmitriy</p>",
        "id": 294235528,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904588
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 28 Feb 2013, Dmitriy Traytel wrote:</p>\n<blockquote>\n<p>Hello John,</p>\n<p>not quite what you want, but with the new localized datatype package you can <br>\nstructure your proofs and datatypes definition with locales (with or) without <br>\nassumptions.</p>\n<p>theory Scratch<br>\nimports \"~~/src/HOL/BNF/BNF\"<br>\nbegin</p>\n<p>locale A<br>\nbegin</p>\n<p>data 'a list = ...</p>\n<p>theorem x: \"...\"<br>\nusing <a href=\"http://list.map\">list.map</a> ..</p>\n<p>end</p>\n<p>thm A.x</p>\n<p>end</p>\n<p>Of course, these \"local\" datatypes may not depend variables fixed by the <br>\nlocale, since this is already forbidden for typedefs. One could imagine a <br>\nproof-local version of the data command with the same restriction.</p>\n</blockquote>\n<p>This is actually the way to go: using the more and more uniform <br>\n'localization' of specification mechanisms to delimit scopes in a soft <br>\nway.  Note that instead of 'locale' above, it could also be 'class' or the <br>\nmore recent \"context begin ... end\", which is also nestable to some <br>\nextent. (Sometimes some combinations of all that breaks down, but then you <br>\nshould report it, so it can be amended.)</p>\n<p>In the next round of refinements, one could imagine further name space <br>\nmanagement to indicate certain specification elements as 'private' like <br>\nthis:</p>\n<p>context<br>\nbegin</p>\n<p>private data ...</p>\n<p>private fun ...</p>\n<p>private lemma ...</p>\n<p>theorem ...</p>\n<p>end</p>\n<blockquote>\n<p>On 28.02.2013 12:17, John Wickerson wrote:</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>Something about this strikes me as sub-optimal. The lemmas, definitions <br>\nand datatypes x1...x6 are only required <em>within</em> this one particular <br>\nproof. It seems like a violation of modularity for them to be <br>\nglobally-available outside of this proof.</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>I know I can already kind-of define lemmas within a proof (by writing <br>\n\"have x4: ...\") and I know I can already kind-of make definitions <br>\nwithin a proof (by writing \"let ...\" or \"def ...\"). But what would be <br>\nquite nice would be to have the <em>full</em> expressivity that is available <br>\nat the \"top-level\", also available within a proof, so that I can make <br>\nproof-local datatypes, typedefs, and so on.</p>\n</blockquote>\n</blockquote>\n<p>This is very hard, both due to logical foundations and technical <br>\ninfrastructure.  In the hot phase (2006/2007) when the current local <br>\ntheory concepts where sorted out, we had discussed that question many <br>\ntimes.</p>\n<p>The non-uniformity of the theory context (with its polymorphic 'define' <br>\nand 'note' elements) and proof context (with its 'fix' and 'assume' <br>\nelements and local conclusions) is there at the bottom of Isabelle/Pure <br>\n(inherited from the way how Church/Milner/Gordon HOL works.)</p>\n<p>In a system like Coq you don't have that restriction, but you have other <br>\nproblems coming from it.  It is this \"water bed syndrom\": you can push <br>\nconceptual complexity from one corner to the other, but it is still there.</p>\n<p>Makarius</p>",
        "id": 294238330,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905819
    }
]