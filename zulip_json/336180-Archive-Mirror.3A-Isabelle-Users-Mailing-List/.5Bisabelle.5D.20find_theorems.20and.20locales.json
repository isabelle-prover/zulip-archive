[
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Bertram et al,</p>\n<blockquote>\n<p>Neither source says that these facts are hidden and only used<br>\ninternally.</p>\n</blockquote>\n<blockquote>\n<p>Secondly, I feel that there is a tangible advantage of making these<br>\nfacts available, which to my mind means that they should also be<br>\ndiscoverable through find_theorems, though not necessarily by<br>\nsledgehammer. (Can those two visibilities be separated in Isabelle?)<br>\nOne advantage is that it allows unfolding locale definitions<br>\nselectively. But perhaps more importantly, by having the definitions<br>\nas theorems, they become compatible with existing proof tactics (for<br>\nexample, I can add loc_def as a simp rule to auto; I cannot do that<br>\nwith unfold_locales).</p>\n</blockquote>\n<p>first, some terminology to make issues more clear:</p>\n<ul>\n<li>\n<p>The facts (or, the locale predicate with corresponding facts) is not<br>\n»hidden«, otherwise it would not be accessible through the name space,<br>\nwhich is not the case.</p>\n</li>\n<li>\n<p>Instead, it is »concealed«, which is no more than an internal flag<br>\nwhich some parts of the system (including find_theorems and probabliby<br>\nsledgehammer) are free to interpret in a certain fashion.  For the case<br>\nof find_theorems, it just skips these on search.</p>\n</li>\n</ul>\n<p>Hence, the definition and rules for locale predicates <em>are</em> accessible,<br>\nand this is used throughout the distribution for some low-level<br>\nconstructions.  Their naming convention is firmly established since 2007<br>\n(?) and with some familiarity it should not be difficult to use them in<br>\nadvanced satisfiability proofs for locale expressions etc. pp.</p>\n<p>It is indeed arguable why locale predicates must be concealed et all,<br>\nbut I guess this has something to do with sledgehammer!?</p>\n<blockquote>\n<p>The reasoning seems to be that the locale predicate (and hence its<br>\ndefinition) is more or less an implementation detail of locales, so you<br>\nshouldn't access it directly.</p>\n</blockquote>\n<p>I tend to put it this way: Isabelle has a module system (locales) which<br>\nis founded in its the logical calculus itself, hence you are free to<br>\nintermix them in formally sound ways.  But then you are loosing a<br>\ncertain discipline which normally is imposed by the way the module<br>\nsystem is implemented, so you have to establish your own discipline in<br>\norder not to screw up the practical (re)usability of the system.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/IB5SImccN8jYxAq_AFZcVnBv/signature.asc\">signature.asc</a></p>",
        "id": 294643504,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163111
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;</p>\n<blockquote>\n<p>It is indeed arguable why locale predicates must be concealed et all,<br>\nbut I guess this has something to do with sledgehammer!?</p>\n</blockquote>\n<p>I doubt it has anything to do with Sledgehammer.</p>\n<p>Jasmin</p>",
        "id": 294643521,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163120
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI've stumbled across a related issue with find_theorems that certainly seems wrong. I was searching for the theorem Real_Vector_Spaces.dist_norm_class.dist_norm, which is introduced as a type class axiom here:</p>\n<p>class dist_norm = dist + norm + minus +<br>\n  assumes dist_norm: \"dist x y = norm (x - y)\"</p>\n<p>Calling find_theorems with suitable patterns, such as </p>\n<p>dist \"norm (_-_)”</p>\n<p>does not return this theorem among the results, but clearly it should.</p>\n<p>Larry</p>",
        "id": 294644034,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163298
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nThere is nothing wrong with type classes here:</p>\n<p>class involutory =<br>\n  fixes f :: \"'a ⇒ 'a\"<br>\n  assumes involutory: \"f (f x) = x\"<br>\nbegin</p>\n<p>lemma involutory3:<br>\n  \"f (f (f x)) = f x\"<br>\n  by (fact involutory)</p>\n<p>end</p>\n<p>find_theorems \"f\"</p>\n<p>It seems to be a constraint issue:</p>\n<p>find_theorems \"_ = norm (_ - _)\"<br>\n    ~&gt; 'a::real_normed_vector is inferred<br>\nfind_theorems \"_ = norm ((_::'a::dist_norm) - _)\"<br>\n    ~&gt; typing error</p>\n<p>Maybe some naughty tweaking of sort constraints or an unforseen<br>\nbehaviour of coercions, but these are mere guesses.  I do not understand<br>\nthese parts of the type class hierarchy.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/fSaFooBPdvLKDUkOHbcAIcFt/signature.asc\">signature.asc</a></p>",
        "id": 294644949,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163674
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nAm Donnerstag, den 25.06.2015, 16:50 +0200 schrieb Florian Haftmann:</p>\n<blockquote>\n<p>There is nothing wrong with type classes here:</p>\n<p>class involutory =<br>\n  fixes f :: \"'a ⇒ 'a\"<br>\n  assumes involutory: \"f (f x) = x\"<br>\nbegin</p>\n<p>lemma involutory3:<br>\n  \"f (f (f x)) = f x\"<br>\n  by (fact involutory)</p>\n<p>end</p>\n<p>find_theorems \"f\"</p>\n<p>It seems to be a constraint issue:</p>\n<p>find_theorems \"_ = norm (_ - _)\"<br>\n  ~&gt; 'a::real_normed_vector is inferred<br>\nfind_theorems \"_ = norm ((_::'a::dist_norm) - _)\"<br>\n  ~&gt; typing error</p>\n<p>Maybe some naughty tweaking of sort constraints or an unforseen<br>\nbehaviour of coercions, but these are mere guesses.  I do not understand<br>\nthese parts of the type class hierarchy.</p>\n</blockquote>\n<p>Yes, in Real_Vector_Spaces are a couple of \"add_const_constraint\"s for<br>\ndist, open, and norm. These give a nicer user experience when only<br>\nworking with the semantic typeclasses. Obviously, if one needs to<br>\ninstantiate syntactic typelcasses it is more complicated.</p>\n<ul>\n<li>Johannes</li>\n</ul>\n<blockquote>\n<p>Am 19.06.2015 um 17:22 schrieb Larry Paulson:</p>\n<blockquote>\n<p>I've stumbled across a related issue with find_theorems that certainly seems wrong. I was searching for the theorem Real_Vector_Spaces.dist_norm_class.dist_norm, which is introduced as a type class axiom here:</p>\n<p>class dist_norm = dist + norm + minus +<br>\n  assumes dist_norm: \"dist x y = norm (x - y)\"</p>\n<p>Calling find_theorems with suitable patterns, such as </p>\n<p>dist \"norm (_-_)”</p>\n<p>does not return this theorem among the results, but clearly it should.</p>\n<p>Larry</p>\n<p>On 14 Jun 2015, at 18:35, Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt; wrote:</p>\n<blockquote>\n<p>Hi Bertram et al,</p>\n<blockquote>\n<p>Neither source says that these facts are hidden and only used<br>\ninternally.</p>\n</blockquote>\n<blockquote>\n<p>Secondly, I feel that there is a tangible advantage of making these<br>\nfacts available, which to my mind means that they should also be<br>\ndiscoverable through find_theorems, though not necessarily by<br>\nsledgehammer. (Can those two visibilities be separated in Isabelle?)<br>\nOne advantage is that it allows unfolding locale definitions<br>\nselectively. But perhaps more importantly, by having the definitions<br>\nas theorems, they become compatible with existing proof tactics (for<br>\nexample, I can add loc_def as a simp rule to auto; I cannot do that<br>\nwith unfold_locales).</p>\n</blockquote>\n<p>first, some terminology to make issues more clear:</p>\n<ul>\n<li>\n<p>The facts (or, the locale predicate with corresponding facts) is not<br>\n»hidden«, otherwise it would not be accessible through the name space,<br>\nwhich is not the case.</p>\n</li>\n<li>\n<p>Instead, it is »concealed«, which is no more than an internal flag<br>\nwhich some parts of the system (including find_theorems and probabliby<br>\nsledgehammer) are free to interpret in a certain fashion.  For the case<br>\nof find_theorems, it just skips these on search.</p>\n</li>\n</ul>\n<p>Hence, the definition and rules for locale predicates <em>are</em> accessible,<br>\nand this is used throughout the distribution for some low-level<br>\nconstructions.  Their naming convention is firmly established since 2007<br>\n(?) and with some familiarity it should not be difficult to use them in<br>\nadvanced satisfiability proofs for locale expressions etc. pp.</p>\n<p>It is indeed arguable why locale predicates must be concealed et all,<br>\nbut I guess this has something to do with sledgehammer!?</p>\n<blockquote>\n<p>The reasoning seems to be that the locale predicate (and hence its<br>\ndefinition) is more or less an implementation detail of locales, so you<br>\nshouldn't access it directly.</p>\n</blockquote>\n<p>I tend to put it this way: Isabelle has a module system (locales) which<br>\nis founded in its the logical calculus itself, hence you are free to<br>\nintermix them in formally sound ways.  But then you are loosing a<br>\ncertain discipline which normally is imposed by the way the module<br>\nsystem is implemented, so you have to establish your own discipline in<br>\norder not to screw up the practical (re)usability of the system.</p>\n<p>Cheers,<br>\n   Florian</p>\n<p>-- </p>\n<p>PGP available:<br>\n<a href=\"http://home.informatik.tu-muenchen.de/haftmann/pgp/florian_haftmann_at_informatik_tu_muenchen_de\">http://home.informatik.tu-muenchen.de/haftmann/pgp/florian_haftmann_at_informatik_tu_muenchen_de</a></p>\n</blockquote>\n</blockquote>\n</blockquote>",
        "id": 294644955,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163679
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nWe clearly need to look at how type inference affects find_theorems.</p>\n<p>The missing at sea (dist_norm) belongs to the type class of the same name, of which real_normed_vector is a subclass. It seems obvious that the pattern \"_ = norm (_ - _)” should pick up</p>\n<p>dist_norm: \"dist x y = norm (x - y)\"</p>\n<p>Larry</p>",
        "id": 294644984,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163690
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nThe reasoning seems to be that the locale predicate (and hence its<br>\ndefinition) is more or less an implementation detail of locales, so you<br>\nshouldn't access it directly. The similarly, the lemmas establishing<br>\nlocale relationships are hidden from the public view. This also effects<br>\nsledgehammer.</p>\n<p>-- Lars</p>",
        "id": 294647031,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164549
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI agree with this view. There are many theorems that probably shouldn’t be given to sledgehammer, though the only justification for this would be that they are unlikely to be helpful for finding proofs. But it should be possible to search for them. I have been tripped up here as well.</p>\n<p>Larry Paulson</p>",
        "id": 294647065,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164561
    }
]