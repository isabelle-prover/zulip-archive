[
    {
        "content": "<p>From: Gergely Buday &lt;<a href=\"mailto:gbuday@gmail.com\">gbuday@gmail.com</a>&gt;<br>\nThis is how I see it: I have met an unexpected behaviour: looking up a<br>\ndefinition did not work. With my limited knowledge of the system, I<br>\ntried to identify the cause. I spot the difference as the definition<br>\nbeing in another file or in the same. This was incorrect. Makarius<br>\nchanged the aspect: the difference is between processed and<br>\nunprocessed definitions. The former's data is in the heap so<br>\nIsabelle/Jedit can look it up.</p>\n<p>But now a question comes to my mind: the mentioned file, Lambda.thy<br>\nwas not itself processed but I use a precompiled heap image of Nominal<br>\nthat includes Lambda.thy as well. I understand that I might change<br>\nLambda.thy but _in theory_ the original definitions of Lambda.thy<br>\n_can_ be looked up in the precompiled heap. Of course I do not know<br>\nthe internals of the Isabelle/JEdit implementation.</p>\n<p>Makarius, what do you think, is this doable? Namely, to identify the<br>\nsource files of a precompiled heap and to look up their definitions,<br>\nif the source files are unchanged? And, possibly, to make these files<br>\nread-only in Isabelle/JEdit?</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294270778,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917139
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nThis should work in practice, too (for example, clicking \"TrueI\" in \"thm<br>\nTrueI\" takes me to correct line in HOL.thy, which is part of the image).</p>\n<p>Can you give a concrete example?</p>\n<p>-- Lars</p>",
        "id": 294270820,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917158
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIndeed.  What is still lacking on this thread is an elementary description <br>\nof the situation that lead to the initial surprise.  So far there were <br>\nseveral educated guesses by Lars and myself what the perceived problem <br>\nactually is.</p>\n<p>We don't need speculations about \"bugs\", \"features\", \"intentions\", <br>\n\"designs\" or whatever, but just some information about the empirical <br>\nobservations.  That is more difficult with the Prover IDE, since it is an <br>\ninteractive game.  So quite often, the problem is in timing and <br>\nreactivity, or lack thereof, but this is hard to phrase in prose text.</p>\n<p>Makarius</p>",
        "id": 294270934,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917207
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Wed, 26 Mar 2014, Gottfried Barrow wrote:</p>\n<blockquote>\n<blockquote>\n<p>Gergely doesn't have any odd ideas about large-scale system<br>\n development at all. In fact, Gergely has the _right_ idea: in large<br>\n developments, there are _bound_ to be program behaviours that are not<br>\n expected, desirable, or intended.</p>\n</blockquote>\n<p>\"Unexpected, unintended, and undesirable\" is a bogus definition of <br>\n\"bug\". That mainly describes what we as users want or don't want.</p>\n<p>If this was Microsoft, then you bash them because you can, because <br>\nthey're some big, faceless corporation, and you use \"bug\" freely, and <br>\ndon't worry about these things. Here, people aren't machines, and people <br>\ncan be motivated or demotivated. If we demotivate people, then they <br>\ndon't work as hard. No one here is dependent on me. I'm dependent on <br>\nothers.</p>\n</blockquote>\n<p>So far this is the most interesting contribution on the meta-discussion on <br>\nthis thread.</p>\n<p>The key problem that I see with the notions of \"bugs + features + fixes\" <br>\nis that the terminology suggests that you talk about a sufficiently small <br>\nand simple thing that you can manipulate arbitrarity (taking it into your <br>\nhands to do with it what you please). You might call that a \"computer <br>\nprogram\", but I prefer to call it a \"plastic model of software reality\".</p>\n<p>So how about the real thing?</p>\n<p>Alan Kay has given a nice lecture about \"Programming and Scaling\" some <br>\nyears ago, which is interesting for various reasons, in particular:</p>\n<p>(1) He as the inventor of the \"object-oriented\" movement repents after<br>\n       all these decades, and sees more realistically the conceptual<br>\n       mistakes they've made in the 1970/80-ies.  I am not in a position to<br>\n       blame him for mistakes of his youth, since I am much younger and<br>\n       less experienced, while he has grown old and wise.</p>\n<p>(2) A huge software system like Microsoft Windows 7 should be<br>\n       visualized as Mexico City.  Do you walk around there and to tell the<br>\n       city administration about \"bugs\" that need to be \"fixed\"?  The<br>\n       people in charge won't take you seriously at all.</p>\n<p>Isabelle is not as large and complex as Windows, not even the Linux <br>\nkernel, but it is definitely beyond the category of \"computer program\".</p>\n<blockquote>\n<p>These are my opinions, expressed with the usual pedanticism. Most of my <br>\nemails are ignored.</p>\n</blockquote>\n<p>I actually read more than half of your mails.  Sometimes it takes time to <br>\nsee the points behind the many words, but quite often I find useful hints <br>\nthere.  E.g. some months ago you have shared your observations about the <br>\nreally ancient 'arities' command, which has no practical use today, but <br>\ncan destroy a user's theory via uncontrolled axiomatization.  So I've <br>\nsorted this out for the next release.</p>\n<p>Makarius</p>",
        "id": 294270946,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917213
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 27 Mar 2014, Gergely Buday wrote:</p>\n<blockquote>\n<p>But now a question comes to my mind: the mentioned file, Lambda.thy was <br>\nnot itself processed but I use a precompiled heap image of Nominal that <br>\nincludes Lambda.thy as well. I understand that I might change Lambda.thy <br>\nbut _in theory_ the original definitions of Lambda.thy _can_ be looked <br>\nup in the precompiled heap. Of course I do not know the internals of the <br>\nIsabelle/JEdit implementation.</p>\n</blockquote>\n<p>This is actually the first time you mention Lambda.thy and Nominal on this <br>\nthread -- or I just overlooked it in the general noise.</p>\n<p>When you open theory files from your base session (main HOL, HOL-Nominal, <br>\nwhatever) you merely see the inactive source and an error in the theory <br>\nheader that says \"Cannot update finished theory\".</p>\n<p>So whatever you edit in that file, it is outside the formal document <br>\nmodel.  And of course, there are no active links, as usual for unprocessed <br>\ntext in that shade of pink.  If the error is missing or the coloring of <br>\nthe body is not there, that is a problem to be sorted out.</p>\n<blockquote>\n<p>Makarius, what do you think, is this doable? Namely, to identify the <br>\nsource files of a precompiled heap and to look up their definitions, if <br>\nthe source files are unchanged? And, possibly, to make these files <br>\nread-only in Isabelle/JEdit?</p>\n</blockquote>\n<p>I am trying for years to sort out the relation of precompiled heaps and <br>\ntheir sources wrt. the active editor session.  This is not imminent -- <br>\nusers need to cope with a situation inherited from the past.  What does <br>\nhave a chance for the coming release is a reform that de-emphasizes heap <br>\nimages, such that you can edit whatever theories you like without thinking <br>\nabout batch sessions. Right now you still need the correct heap to be able <br>\nto process certain sources at all, for historic reasons of the theory name <br>\nspace.</p>\n<p>Makarius</p>",
        "id": 294270983,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917231
    },
    {
        "content": "<p>From: Gergely Buday &lt;<a href=\"mailto:gbuday@gmail.com\">gbuday@gmail.com</a>&gt;<br>\nHi,</p>\n<p>using ctrl-click to find the definition of an identifier is indeed<br>\nvaluable. However, it fails to work sometimes. I cannot make bold claims<br>\nabout the conditions, but one I have met is:</p>\n<p>the definition is in the same file</p>\n<p>Is this a feature, not a bug?</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294273364,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917927
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nNormally this should work.</p>\n<p>A situation where ctrl-click does not take me to the expected location<br>\nis if I am in a locale context (opened by context or implicitly via (in<br>\nlocale)). Then (sometimes?) the click takes me to the opening of the<br>\ncontext, not to place where the lemma was defined.</p>\n<p>Best regards,<br>\n  Lars</p>",
        "id": 294273384,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917931
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nCan you point to a definition of \"feature\" or \"bug\"?  Both don't have any <br>\nmeaning to me.  I mean this seriously.</p>\n<p>One of the key concepts of PIDE is that the prover can report some aspects <br>\nof its internal workings to the document source, via markup that is <br>\npositioned in the proper place.  Aspects, not everything -- the prover is <br>\ndoing many more things internally.</p>\n<p>This restriction was the initial breakthrough of the Prover IDE approach.<br>\nAefore the IDE guys would ask for everything and get nothing.  Afterwards <br>\nit became feasible to reform the prover to support IDEs adequately.</p>\n<p>I've spent the past 5 years or so providing more and more informative <br>\nmarkup from the bottom of the prover.  This is a never-ending process, as <br>\nfar as I can fortell.</p>\n<p>Files are generally not very interesting in PIDE -- the prover does not <br>\nreally know about them.  It matters more if something has been loaded into <br>\nthe underlying heap image in batch mode, or within the current editor <br>\nsession.</p>\n<p>Makarius</p>",
        "id": 294273420,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917937
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThere is a conceptual problem here that was already known in 2008 when no <br>\nconcrete PIDE markup was available yet.  Contexts (class, locale etc.) are <br>\nlike a second-order mechanism on top of plain declarations, and the <br>\nposition reports should somehow take the relation of the two into account, <br>\nbut don't do anything yet.</p>\n<p>PIDE is like a high speed train that runs already at 550 km/h, while only <br>\nhalf of the railway lines are operative.</p>\n<p>Makarius</p>",
        "id": 294273438,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917943
    },
    {
        "content": "<p>From: Gergely Buday &lt;<a href=\"mailto:gbuday@gmail.com\">gbuday@gmail.com</a>&gt;<br>\nOn 26 March 2014 16:14, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<blockquote>\n<blockquote>\n<p>using ctrl-click to find the definition of an identifier is indeed valuable. However, it fails to work sometimes. I cannot make bold claims about the conditions, but one I have met is:</p>\n<p>the definition is in the same file</p>\n<p>Is this a feature, not a bug?</p>\n</blockquote>\n<p>Can you point to a definition of \"feature\" or \"bug\"?  Both don't have any meaning to me.  I mean this seriously.</p>\n</blockquote>\n<p>Yes I am afraid you are serious here. But ordinary language is not<br>\n\"defined\". People usually use the word feature when the behaviour is<br>\nexpected by the software writer, and, possibly, by the users, while a<br>\nbug is something that is not expected and even unpleasant.</p>\n<blockquote>\n<p>I've spent the past 5 years or so providing more and more informative markup from the bottom of the prover.  This is a never-ending process, as far as I can fortell.</p>\n</blockquote>\n<p>And we are all grateful for your efforts. I mean this seriously.</p>\n<blockquote>\n<p>Files are generally not very interesting in PIDE -- the prover does not really know about them.  It matters more if something has been loaded into the underlying heap image in batch mode, or within the current editor session.</p>\n</blockquote>\n<p>Thanks, this explains what has happened. This is a good specification<br>\nof the expected behaviour. Now I know what to expect and my test with<br>\nthe modified expectation ran through.</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294273472,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917955
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis is a slightly odd idea about system development at a large scale. <br>\nQuite often, the not so ideal behaviour is known and expected by the <br>\npeople who did the job, but there were reasons why it could not be done <br>\nbetter in a certain situation, or forcing it would make things worse. <br>\nEqually often, users expect much less than could be done, either in <br>\nprinciple or in actuality after taking a fresh look at the bigger picture.</p>\n<p>Above you say \"it fails to work sometimes\".  What does that mean? Reading <br>\nbetween the lines I guess it might be any of the following behaviour in <br>\nIsabelle2013-2:</p>\n<p>* An entity reference that points to a file from the base session (e.g.<br>\n     from Isabelle/HOL) merely resolves to the file + line number, but not<br>\n     the character precise offset.</p>\n<p>* An entity reference that points to a file within Isabelle/Pure merely<br>\n     points to the start of the file, not even the line number.</p>\n<p>I could have put that in the manual, to make it an official \"feature\", but <br>\nthat would be a bit silly.  It does not really qualify as \"bug\" either, <br>\nbecause there is no real problem here: some entity references are more <br>\nprecise than others, and better than no references.  The hypersearch <br>\nfacility of jEdit helps to finish the procedure to find something <br>\nsomewhere.</p>\n<p>For the coming release there will be more support for files of the base <br>\nsession and bootstrap files of Pure.  Due to other improvements in <br>\nexternal file handling within theories, the file + line reference suddenly <br>\nspoilt the game, so I invested more work to make the landing positions of <br>\nlinks more precise also in that case.</p>\n<p>Does that \"fix a bug\" as many people would say?  I say no, because there <br>\nwas nothing \"loose\" and there is never an end of what else could be <br>\nimproved, i.e. a \"fixed situation\".  For example, after recent <br>\nimprovements I could imagine a visual representation of \"scope groups\" <br>\n(binding position plus occurrences) that can be seen in other IDEs. <br>\nAfter that 5 more things that I don't dare to spell out yet.</p>\n<p>Makarius</p>",
        "id": 294273557,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917968
    },
    {
        "content": "<p>From: David Greenaway &lt;<a href=\"mailto:david.greenaway@nicta.com.au\">david.greenaway@nicta.com.au</a>&gt;<br>\nOn 27/03/14 05:08, Makarius wrote:</p>\n<blockquote>\n<p>On Wed, 26 Mar 2014, Gergely Buday wrote:</p>\n<blockquote>\n<p>On 26 March 2014 16:14, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<blockquote>\n<p>Can you point to a definition of \"feature\" or \"bug\"?  Both don't have<br>\nany meaning to me.  I mean this seriously.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>I'll bite:</p>\n<p>A bug is a behaviour of a computer program that is unexpected,<br>\nunintended and undesirable.</p>\n<p>The behaviour reported was _unexpected_ by Gergely. The behaviour is<br>\npresumably _undesirable_ to Gergely. However, the behaviour was<br>\n_intended_ by the developer (you, I presume), so, in this case, the<br>\nbehaviour is not a bug, but simply a design trade-off.</p>\n<p>Gergely's original question \"Is this a feature, not a bug?\", was a query<br>\nto work out the last piece of the puzzle above, because trying to work<br>\nout the intention of the designer is _hard_.</p>\n<blockquote>\n<blockquote>\n<p>Yes I am afraid you are serious here. But ordinary language is not<br>\n\"defined\". People usually use the word feature when the behaviour is<br>\nexpected by the software writer, and, possibly, by the users, while<br>\na bug is something that is not expected and even unpleasant.</p>\n</blockquote>\n<p>This is a slightly odd idea about system development at a large scale.<br>\nQuite often, the not so ideal behaviour is known and expected by the<br>\npeople who did the job, but there were reasons why it could not be<br>\ndone better in a certain situation, or forcing it would make things<br>\nworse. Equally often, users expect much less than could be done,<br>\neither in principle or in actuality after taking a fresh look at the<br>\nbigger picture.</p>\n</blockquote>\n<p>Gergely doesn't have any odd ideas about large-scale system<br>\ndevelopment at all. In fact, Gergely has the _right_ idea: in large<br>\ndevelopments, there are _bound_ to be program behaviours that are not<br>\nexpected, desirable, or intended.</p>\n<p>The fact that Gergely hit a design trade-off and asked publicly as to<br>\nwhether it was intended or not is simply a sign that the behaviour is<br>\neither ill-document and/or the UI is insufficient.</p>\n<blockquote>\n<p>Above you say \"it fails to work sometimes\".  What does that mean?<br>\nReading between the lines I guess it might be any of the following<br>\nbehaviour in Isabelle2013-2:</p>\n<p>* An entity reference that points to a file from the base session<br>\n   (e.g. from Isabelle/HOL) merely resolves to the file + line number,<br>\n   but not the character precise offset.</p>\n<p>* An entity reference that points to a file within Isabelle/Pure<br>\n   merely points to the start of the file, not even the line number.</p>\n<p>I could have put that in the manual, to make it an official \"feature\",<br>\nbut that would be a bit silly.  It does not really qualify as \"bug\"<br>\neither, because there is no real problem here: some entity references<br>\nare more precise than others, and better than no references.</p>\n</blockquote>\n<p>Again, it is a design trade-off. And yes, you _should_ put it in the<br>\nmanual, not because that would change the status of the behaviour from<br>\n\"bug\" to \"not bug\", but so that users understand what is going on.</p>\n<p>Better still, if a design trade-off needs to be made, modify the UI so<br>\nthat the user's expectations are met. A simple tooltip stating \"Cannot<br>\ndetermine source location\" when the user tries to Ctrl+Click such a term<br>\ngives the user a strong hint that they are hitting a design limitation,<br>\nand not a bug.</p>\n<p>Cheers,<br>\nDavid</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294273614,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917992
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:igbi@gmx.com\">igbi@gmx.com</a>&gt;<br>\nOn 14-03-26 16:33, David Greenaway wrote:</p>\n<blockquote>\n<p>I'll bite:</p>\n<p>A bug is a behaviour of a computer program that is unexpected,<br>\nunintended and undesirable.</p>\n</blockquote>\n<p>I actually try to limit the amount of traffic I generate here, and <br>\nMakarius Wenzel doesn't really need me to help him out, so I'll check <br>\nout of this thread after this.</p>\n<p>It's more general than that. A bug implies something is wrong, and to <br>\nknow something is wrong, you have to have inside information, though at <br>\ntimes, it's fairly safe to claim there's a bug.</p>\n<p>I exported functions that used functions of type 'prop', and the code <br>\ngenerator generated some totally bogus code for Scala and Haskell (or <br>\ndid it?). On my end, it was unexpected and undesirable. On their end, <br>\n\"unintended\" would imply they even care about exporting 'prop' functions.</p>\n<p>The issue at hand, that a link doesn't take you where you want, is not <br>\neven remotely a bug. It's a feature which doesn't meet our expectations, <br>\nbecause other features have fully met our expectations, which has made <br>\nus very unsatisfied, and downright ticked off, because the one feature <br>\nshowed us how easy life could be if we lived in a more perfect world.</p>\n<p>I could say it's wrong for people to complain about that kind of thing, <br>\nbut it's not. Anything put out for public consumption is subject to <br>\ncritique. People are free to produce, and we're free to complain.</p>\n<p>Critiquing becomes a matter of perception. I myself understand there's <br>\nonly one proof assistant in the whole world that has the features I <br>\nneed, no exaggeration. It bares emphasizing, there's only one, and the <br>\none there happens to be is extraordinarily powerful, and free, too. I <br>\nhave a very bad attitude about many things involving proof assistants, <br>\nbut I control myself, a little.</p>\n<blockquote>\n<p>Gergely doesn't have any odd ideas about large-scale system<br>\ndevelopment at all. In fact, Gergely has the _right_ idea: in large<br>\ndevelopments, there are _bound_ to be program behaviours that are not<br>\nexpected, desirable, or intended.</p>\n</blockquote>\n<p>\"Unexpected, unintended, and undesirable\" is a bogus definition of <br>\n\"bug\". That mainly describes what we as users want or don't want.</p>\n<p>If this was Microsoft, then you bash them because you can, because <br>\nthey're some big, faceless corporation, and you use \"bug\" freely, and <br>\ndon't worry about these things. Here, people aren't machines, and people <br>\ncan be motivated or demotivated. If we demotivate people, then they <br>\ndon't work as hard. No one here is dependent on me. I'm dependent on others.</p>\n<p>These are my opinions, expressed with the usual pedanticism. Most of my <br>\nemails are ignored. That would be good here, too.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294273645,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918004
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nSome of the subsequent emails to this may have taken it too seriously.</p>\n<p>Here are two possible definitions -)</p>\n<p>(1) If the developers can't be bothered to fix it, it is a feature; if <br>\nthey can, then it is a bug</p>\n<p>(2) Something is a bug if it a program behaves differently from how the <br>\ndocumentation says it should behave.  (This means that if there is no <br>\ndocumentation, then there are no bugs).</p>\n<p>Regrettably, I can't claim originality in either of these approaches to <br>\nbug-avoidance.</p>\n<p>Jeremy</p>",
        "id": 294273664,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918013
    }
]