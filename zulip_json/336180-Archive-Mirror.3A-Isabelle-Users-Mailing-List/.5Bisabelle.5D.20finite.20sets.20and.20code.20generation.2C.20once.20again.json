[
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nPeter,</p>\n<p>I like this approach - thanks for sharing it.</p>\n<p>However it seems a bit limited: locale-fixed functions (\"choice\") are monomorphic, right? In other words, I would need to instantiate this locale at every type I wanted to apply \"choice\" to. I guess I'm asking for the locale equivalent of the polymorphic SOME.</p>\n<p>In any case I think the amount of proof-pain of eliminating choice is pretty much constant whatever the scaffolding is, having tried out a few approaches recently.</p>\n<p>cheers<br>\npeter</p>",
        "id": 294111454,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836963
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;<br>\nPeter Gammie wrote:<br>\nUnfortunately, that is true. And we also have problems with this limitation.</p>\n<p>Best,<br>\n  Peter</p>",
        "id": 294111481,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836973
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Peter,</p>\n<blockquote>\n<p>Anyway, I wanted to follow up your suggestion about using lists. Given the advice in Executable_Set and what you've said to Tjark, would you now suggest Fset instead? If so, can you perhaps sketch for me how Fset is used (there aren't any examples in the distribution)?</p>\n</blockquote>\n<p>a small sketch using a contrived example:</p>\n<p>Suppose we have the following operation on sets which shall be implemented:</p>\n<p>definition foo :: \"nat ⇒ nat set ⇒ nat set\" where<br>\n  \"foo n A = insert n {n ∈ A. n mod 2 = 0}\"</p>\n<p>To turn this executable, we formally define a lifted counterpart<br>\noperating on fsets:</p>\n<p>definition foo' :: \"nat ⇒ nat fset ⇒ nat fset\" where<br>\n  [simp]: \"foo' n A = Fset (foo n (member A))\"</p>\n<p>Note that this should be done as thumb as possible, using the Fset and<br>\nmember conversions.  The more stylized the lifted definition is, the<br>\neasier the proofs are.  Using [simp] yields reasonable ad-hoc automation.</p>\n<p>This definition is immediately followed by its dual, expressing foo in<br>\nterms of foo':</p>\n<p>lemma [code]:<br>\n  \"foo n A = member (foo' n (Fset A))\"<br>\n  by simp</p>\n<p>The final step is to transfer the code equation of foo to a similar code<br>\nequation for foo':</p>\n<p>lemma [code]:<br>\n  \"foo' n A = Fset.insert n (Fset.filter (\\&lt;lambda&gt;n. n mod 2 = 0) A)\"<br>\n  by (simp add: foo_def)</p>\n<p>This lifting must be done for all operations involving sets in their<br>\ntype signature.</p>\n<p>I hope to provide automation for this one day.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/PFBWbF3tzFWRiejZN0C2IcIs/signature.asc\">signature.asc</a></p>",
        "id": 294112037,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837154
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Peter,</p>\n<p>executing choice is a difficult issue.  It largely depends on the<br>\nscenario.  Here a cursory sketch of approaches which I have thought of<br>\nuntil now how to resolve it:</p>\n<p>a) Make choice irrelevant for generated code</p>\n<p>c.f. src/HOL/ex/Execute_Choice.thy</p>\n<p>b) Turn choice into definite choice</p>\n<p>e.g. Min { ... } instead of SOME x \\&lt;in&gt; { ... }</p>\n<p>c) Turn specification non-deterministic using a set-monad</p>\n<p>e.g. the pred type defined in src/HOL/Predicate.thy.  This means that<br>\ninstead of using choice in an operation, the operation shall operate on<br>\n<em>all</em> suitable elements of a set, returning a set of results.  (I have<br>\nno example at hand because this is a fresh thought which has not yet<br>\nbeen explored further).</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/j5YPXh9ICe4H0lbQjarfThK6/signature.asc\">signature.asc</a></p>",
        "id": 294112050,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837159
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;<br>\nHi</p>\n<blockquote>\n<p>executing choice is a difficult issue.  It largely depends on the<br>\nscenario.  Here a cursory sketch of approaches which I have thought of<br>\nuntil now how to resolve it:</p>\n<p>a) Make choice irrelevant for generated code</p>\n<p>c.f. src/HOL/ex/Execute_Choice.thy</p>\n<p>b) Turn choice into definite choice</p>\n<p>e.g. Min { ... } instead of SOME x \\&lt;in&gt; { ... }</p>\n<p>c) Turn specification non-deterministic using a set-monad</p>\n<p>What's about<br>\n    d) Parameterize over choice-function (e.g. using a locale, fixing<br>\nchoice and assuming: \"s~={} ==&gt; choice s : s\"), do your definition<br>\ninside this locale<br>\n        and then instantiate to concrete set implementation ?</p>\n</blockquote>\n<p>Best,<br>\n  Peter</p>\n<blockquote>\n<p>e.g. the pred type defined in src/HOL/Predicate.thy.  This means that<br>\ninstead of using choice in an operation, the operation shall operate on<br>\n<em>all</em> suitable elements of a set, returning a set of results.  (I have<br>\nno example at hand because this is a fresh thought which has not yet<br>\nbeen explored further).</p>\n<p>Hope this helps,<br>\n  Florian</p>\n</blockquote>",
        "id": 294112076,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837167
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Peter,</p>\n<p>yes, that is also a possibility.  (I had the already the strong<br>\nimpression that I missed something).</p>\n<p>Thanks for pointing this out.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/66YGsqcnDOEHyL3QTrwOK2mP/signature.asc\">signature.asc</a></p>",
        "id": 294112134,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837178
    }
]