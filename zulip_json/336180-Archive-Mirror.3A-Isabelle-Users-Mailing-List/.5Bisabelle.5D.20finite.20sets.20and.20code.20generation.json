[
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nHello,</p>\n<p>I am curious to know what the code generator can do with finite sets.</p>\n<p>For proof re-use reasons I use this idiom to fudge them into lists (in a definition context):</p>\n<p>xs_list = (SOME xs. set xs = { my finite set })</p>\n<p>The only substantial reason I have is that I can make use of the equivalence relation partition operator '_ // _' on these sets.</p>\n<p>Is there a way (does someone have some code) to partition lists? Is there a more-complete treatment of finite sets for the code generator somewhere?</p>\n<p>cheers<br>\npeter</p>",
        "id": 294102329,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834174
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;<br>\nPeter Gammie wrote:</p>\n<blockquote>\n<p>Hello,</p>\n<p>I am curious to know what the code generator can do with finite sets.</p>\n<p>For proof re-use reasons I use this idiom to fudge them into lists (in a definition context):</p>\n<p>xs_list = (SOME xs. set xs = { my finite set })</p>\n<p>The only substantial reason I have is that I can make use of the equivalence relation partition operator '_ // _' on these sets.</p>\n<p>When using SOME, you run into a fundamental problem: SOME makes a choice<br>\nthat the<br>\nexecutable code cannot follow (as you can't tell anything about the<br>\nchoice made).</p>\n</blockquote>\n<p>One workaround is to parameterize over the SOME-operator, i.e. work<br>\nunder the assumption that you have an operator that<br>\nbehaves like SOME, but having the possibility to replace it by a<br>\nconcrete one later.<br>\nHowever, I'm think this will not work without some manual refinement<br>\nsteps from sets to lists (?)</p>\n<p>Best,<br>\n  Peter</p>\n<blockquote>\n<p>Is there a way (does someone have some code) to partition lists? Is there a more-complete treatment of finite sets for the code generator somewhere?</p>\n<p>cheers<br>\npeter</p>\n</blockquote>",
        "id": 294102580,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834239
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Peter,</p>\n<blockquote>\n<p>For proof re-use reasons I use this idiom to fudge them into lists (in =<br>\na definition context):<br>\n=20<br>\nxs_list =3D (SOME xs. set xs =3D { my finite set })<br>\n=20<br>\nThe only substantial reason I have is that I can make use of the equiva=<br>\nlence relation partition operator '_ // _' on these sets.</p>\n</blockquote>\n<p>If this is indeed the only reason, you should perhaps define an<br>\nalternative equivalence relation partition operator on lists and then<br>\nproof some lemmas which allow you to transfer theorems from the set to<br>\nthe list representation (at least to some extent).</p>\n<p>Sorry for being that vague, but we are still exploring how a systematic<br>\ntransfer principle for such situations should look like.</p>\n<p>Hope this helps,<br>\n    Florian</p>\n<p>--=20</p>\n<p>Home:<br>\n<a href=\"http://www.in.tum.de/~haftmann\">http://www.in.tum.de/~haftmann</a></p>\n<p>PGP available:<br>\n<a href=\"http://home.informatik.tu-muenchen.de/haftmann/pgp/florian_haftmann_at_in=\">http://home.informatik.tu-muenchen.de/haftmann/pgp/florian_haftmann_at_in=</a><br>\nformatik_tu_muenchen_de<br>\n<a href=\"/user_uploads/14278/RZdXTayuPbemY0Gp-mN7A3Ez/signature.asc\">signature.asc</a></p>",
        "id": 294102667,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834258
    },
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nDaniel:</p>\n<p>Thanks for this! I am embarrassed that I didn't consult the AFP before sending that email</p>\n<p>(Co)Incidentally this will at least solve another problem I was facing, viz dealing with functions over finite subsets of some arbitrary type, which may or may not coincide on the rest of the type... a problem I didn't expect to be so neatly treated as it is here.</p>\n<p>Rene: thanks for your kind offer. I will see how Andreas's FinFuns work out.</p>\n<p>cheers<br>\npeter</p>",
        "id": 294102718,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834270
    }
]