[
    {
        "content": "<p>From: Eddy Westbrook &lt;<a href=\"mailto:westbrook@kestrel.edu\">westbrook@kestrel.edu</a>&gt;<br>\nHi,</p>\n<p>I was wondering if there is any way to directly construct a fixed-point type in Isabelle, without (at least, without directly) using datatypes. That is, I have a type constructor F x, and I would like to construct a fixed-point type tau = F tau. Any ideas on how to go about this? Of course, this should only be possible if F is a functor, since otherwise it doesn’t have a fixed-point.</p>\n<p>In more detail, I am trying to axiomatize the resumption monad transformer, as follows. I start by declaring the underlying monad type, as follows:</p>\n<p>typedecl ‘a Monad</p>\n<p>By positing the monad laws as axioms, I am assured that Monad is a functor. Then I would like to define the resumption transformer like this:</p>\n<p>datatype 'a ResumpT<br>\n   = Done 'a<br>\n   | Pause \"('a ResumpT) Monad\"</p>\n<p>Of course, this is not a valid datatype, because Isabelle does not know that Monad is positive. I was thinking, however, that I could turn ResumpT into a type-level function, as follows:</p>\n<p>datatype (‘a, ’t) ResumpT<br>\n   = Done 'a<br>\n   | Pause “’t Monad\"</p>\n<p>Then, if I could build a fixed-point type over the ’t type argument, I would by able to define ResumpT, at least indirectly.</p>\n<p>Any help on this front would be appreciated.</p>\n<p>Thanks,<br>\n-Eddy</p>",
        "id": 294292233,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923840
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Eddy,</p>\n<p>Of course you can construct your fixpoint type manually, but this will be a lot of work. <br>\nOr, you just continue to axiomatize the structure of the resumption monad transformer, <br>\ntoo, but axioms are better avoided.</p>\n<p>The new datatype package might, however, offer a solution, because it supports fixpoint <br>\ntypes for natural functors that are <em>bounded</em>. Boundedness means that the cardinality of <br>\nthe elements of the type is bounded by some cardinal that does not depend on the type <br>\nvariable over which the fixpoint is built. To that end, you have to register your monad <br>\ntype as a BNF.</p>\n<p>In Isabelle2013-2, you have to import the BNF package via \"~~/src/HOL/BNF/BNF\", in the <br>\ncoming Isabelle2014 release, the datatype_new command will already be part of Main. The <br>\ntutorial on datatypes tells you what is needed and provides further references.</p>\n<p>By the way, I would also suggest to think about taking the greatest fixpoint (codatatype) <br>\nrather than the least (datatype) for ResumpT. Then you can also reason about possibly <br>\ninfinite computations.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294292314,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923852
    },
    {
        "content": "<p>From: Eddy Westbrook &lt;<a href=\"mailto:westbrook@kestrel.edu\">westbrook@kestrel.edu</a>&gt;<br>\nAndreas,</p>\n<p>The new datatype package sounds pretty cool, if it can do all the things that you say here. I will definitely try it out… as soon as we upgrade our tool to work with the latest Isabelle. But now, we will have an excuse. :)</p>\n<p>Thanks so much for getting back to me, and for the helpful pointers!<br>\n-Eddy</p>",
        "id": 294292440,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923893
    }
]