[
    {
        "content": "<p>From: Thomas Genet &lt;<a href=\"mailto:thomas.genet@irisa.fr\">thomas.genet@irisa.fr</a>&gt;<br>\nDear Isabelle users,</p>\n<p>I have a theory parameterized by a constant stack_lim which defines the <br>\nmaximal stack_size of a given stack machine.</p>\n<p>I defined:</p>\n<p>consts<br>\n   stack_lim::nat</p>\n<p>I also have a function, eval, running the stack machine and using the <br>\nstack_size constant to check that no stack overflow has occured.</p>\n<p>However, to test my eval function I'd like to run some small tests using <br>\n\"value\". The problem is that stack_lim is not defined (has no code <br>\nequations) and value fails.</p>\n<p>Would it be possible to define \"stack_lim\" for a particular test.</p>\n<p>Something like:</p>\n<p>value \"let stack_lim=4 in (eval ...)\"</p>\n<p>??</p>\n<p>Thanks in advance and best regards,</p>\n<p>Thomas</p>",
        "id": 294763393,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200721
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThis is not possible. You have to make it an explicit parameter of all relevant <br>\nfunctions or use a locale.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/dutnbDAfAWneNrIBvBmrXJ87/smime.p7s\">smime.p7s</a></p>",
        "id": 294763441,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200744
    },
    {
        "content": "<p>From: Thomas Genet &lt;<a href=\"mailto:thomas.genet@irisa.fr\">thomas.genet@irisa.fr</a>&gt;<br>\nDear Tobias,</p>\n<p>thank you for your answer.</p>\n<p>Thomas</p>",
        "id": 294763454,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200750
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nHello,</p>\n<p>I think there are two possibilities, but both I would recommend only for <br>\nexperiments, not for the final theory (because of potential unsoundness).</p>\n<p>Approach 1: Use code_printing (see Section 7.4 of the code generation <br>\ntutorial) and write something like: code_printing constant stack_size =&gt; <br>\n(SML) \"123\".</p>\n<p>Approach 2: Use an unproven fact. I.e., write   lemma stack_size[code]: <br>\n\"stack_size = 123\" sorry  .   If you write this inside an \"experiment <br>\nbegin ... end\" block, it should be safe. (You can also use <br>\n\"axiomatization\" instead of \"lemma ... sorry\" but that does not work in <br>\nan experiment block.)</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 294763464,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200759
    },
    {
        "content": "<p>From: Thomas Genet &lt;<a href=\"mailto:thomas.genet@irisa.fr\">thomas.genet@irisa.fr</a>&gt;<br>\nDear Dominique,</p>\n<p>Thank you very much.</p>\n<p>I tried to play with the second approach (that I prefer because of the <br>\nexpected soundness of it (?)). The \"lemma[code]\" construct produces the <br>\nequation but not inside an experiment block.</p>\n<p>theory temp<br>\n   imports Main<br>\nbegin</p>\n<p>consts<br>\n   stack_size::nat</p>\n<p>fun f::\"bool ⇒ nat\"<br>\n   where<br>\n\"f _ = stack_size\"</p>\n<p>experiment<br>\nbegin<br>\nlemma stack_size[code]: \"stack_size=4\"<br>\n   sorry</p>\n<p>value \"f True\"  (* fails *)<br>\nend</p>\n<p>lemma stack_size[code]: \"stack_size=4\"<br>\n   sorry</p>\n<p>value \"f True\" (* succeeds! *)<br>\nend</p>",
        "id": 294763470,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200762
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nThen, unfortunately, I don't have any better ideas than using the unsafe <br>\napproach (possibly in a separate theory that cannot be included in other <br>\ntheories by accident, this can be achieved by omitting the final \"end\" <br>\nin that theory). If it is for experiments only, this should work.</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 294763490,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200772
    },
    {
        "content": "<p>From: Thomas Genet &lt;<a href=\"mailto:thomas.genet@irisa.fr\">thomas.genet@irisa.fr</a>&gt;<br>\nOK,</p>\n<p>thank you very much. This will be <strong>very</strong> helpful anyway.</p>\n<p>Best regards,</p>\n<p>Thomas</p>",
        "id": 294763500,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200775
    }
]