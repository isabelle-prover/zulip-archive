[
    {
        "content": "<p>From: Viorel Preoteasa &lt;<a href=\"mailto:viorel.preoteasa@aalto.fi\">viorel.preoteasa@aalto.fi</a>&gt;<br>\nHello,</p>\n<p>Is it possible to have a semantic construct which works like</p>\n<p>(a,b,c,d) @ (x,y,z) = (a,b,c,d,x,y,z)</p>\n<p>for tuples of arbitrary lengths.<br>\nThe elements a, b, ... should be of different types,<br>\nbut they are not tuples.</p>\n<p>I can also work with a version which has a terminator like:</p>\n<p>(a,b,c,d,()) @ (x,y,z,()) = (a,b,c,d,x,y,z,())</p>\n<p>If this is not possible at the semantic level, is it possible<br>\nto have a syntactic construct?</p>\n<p>Best regards,</p>\n<p>Viorel Preoteasa</p>",
        "id": 294326835,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928839
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nAn operator such as your @ seems unlikely to exist, because its operands would not have fixed types. What you mean by “syntactic construct” isn’t clear, unless you never need to write a thing like x@y.</p>\n<p>I imagine that you cannot use lists because you need a variety of types. But is there is no possibility of creating a super type for them?</p>\n<p>Larry Paulson</p>",
        "id": 294326877,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928851
    },
    {
        "content": "<p>From: Viorel Preoteasa &lt;<a href=\"mailto:viorel.preoteasa@aalto.fi\">viorel.preoteasa@aalto.fi</a>&gt;<br>\nHi Larry,</p>\n<p>Thank you for your answer.</p>\n<p>I want to model some \"product of programs\" in the following way:</p>\n<p>S is a program with inputs x (tuple) and v (also tuple) and outputs y<br>\n(tuple) and u (tuple).<br>\nS' is similar but with inputs x', v' and outputs y', u'</p>\n<p>I want the result of the product of S and S' to have input (x @ x') and<br>\n(v @ v')<br>\nand output (y @ y') and (u @ u').</p>\n<p>I have a simple product S * S' that has (x,v), (x',v') as input and<br>\n(y,u), (y', y') as output.<br>\nIf I would have the operator @, then I will define my product S ** S' as</p>\n<p>[X, V --&gt; (x,v), (x',v') . X = (x @ x') /\\ V = (v @ v')] o (S * S') o<br>\n[(y,u), (y',u') --&gt; Y,U . Y = (y @ y') /\\ U = (u @ u')]</p>\n<p>Here [x,y --&gt; a, b . P x y a b] is the nondeterministic assignment of<br>\nvalues to a and b based on<br>\ninput x, y such that P x y a b is true.</p>\n<p>The programs are modeled as predicate transformers, and I can write in<br>\nIsabelle<br>\nthe above composition almost like I have it here, except that I do not<br>\nhave @.</p>\n<p>Ideally the splinting of X and V in the first statement in (x @ x') and<br>\n(v @ v')<br>\nwould be based on the type of S * S'.</p>\n<p>These programs are supposed to work with variables of different types<br>\nmixed together (real, int, nat, bool). I can create a super type of them<br>\nbut then the verification of these programs will become more complicated.<br>\nLists are also not good because I could no longer encode in the type the<br>\nnumber<br>\nof arguments a program expects as input.</p>\n<p>In my case these programs are automatically generated, so in principle<br>\nI know the structure of the tuples x, v, x', v' ..., so I can generate<br>\ninstead<br>\nof the general product from above, specialized versions for the specific<br>\nx, v, x', v' ...</p>\n<p>Best regards,</p>\n<p>Viorel Preoteasa</p>",
        "id": 294327042,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928892
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nPersonally, I would try to model values in your example using the hereditarily finite sets, as illustrated in my recent AFP paper and entry:</p>\n<p>Paper: <a href=\"http://www.cl.cam.ac.uk/~lp15/papers/Formath/automata.pdf\">http://www.cl.cam.ac.uk/~lp15/papers/Formath/automata.pdf</a></p>\n<p>AFP entry: <br>\n<a href=\"http://afp.sourceforge.net/entries/Finite_Automata_HF.shtml\">http://afp.sourceforge.net/entries/Finite_Automata_HF.shtml</a></p>\n<p>Into this one type, you can naturally embed integers, booleans, characters, rationals, along with lists and trees built over them. You can also embed floating-point numbers, but not real numbers. Possibly that would be enough for your purposes. In the development version of the AFP, I’ve installed a file that defines a new type class, finitary, of types equipped with an embedding into HF. This is open-ended, because anything that is essentially a finite construction can be represented by a hereditarily finite set.</p>\n<p>Larry Paulson</p>",
        "id": 294327048,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928894
    },
    {
        "content": "<p>From: Viorel Preoteasa &lt;<a href=\"mailto:viorel.preoteasa@aalto.fi\">viorel.preoteasa@aalto.fi</a>&gt;<br>\nThank you. I will check your paper.</p>\n<p>I used in the past one single type to represent all values from<br>\na program. It was OK, but I could not have the type<br>\nchecker solve type miss matches anymore. Maybe<br>\nusing hereditarily finite sets is different.</p>\n<p>This was in PVS, using dependent types. The problem<br>\nwas that dependent types could be only uninterpreted,<br>\nor subtypes of a given type.</p>\n<p>Viorel Preoteasa</p>",
        "id": 294327080,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928912
    }
]