[
    {
        "content": "<p>From: Buday Gergely &lt;<a href=\"mailto:gbuday@karolyrobert.hu\">gbuday@karolyrobert.hu</a>&gt;<br>\nHi,</p>\n<p>I am formalising an abstract machine. For being able to prove pattern completeness, I defined the function to evalute to</p>\n<p>value option</p>\n<p>and added a last clause that returns None if all the other patterns fail.</p>\n<p>But it is not clear how this interplays with</p>\n<p>abstract_machine_dom arguments =&gt; (abstract_machine arguments) meets specification</p>\n<p>type theorems. Would it be better to simply make an infinite recursive call as a last pattern?</p>\n<p>| abstract_machine arguments = abstract_machine arguments</p>\n<p>letting it not to terminate at all?</p>\n<p>What is the standard way of defining an interpreter and its partial correctness in Isabelle?</p>\n<p>Cheers</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294263808,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915354
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn 28/01/2014 12:10, Buday Gergely wrote:</p>\n<blockquote>\n<p>Hi,</p>\n<p>I am formalising an abstract machine. For being able to prove pattern completeness, I defined the function to evalute to</p>\n<p>value option</p>\n<p>and added a last clause that returns None if all the other patterns fail.</p>\n<p>But it is not clear how this interplays with</p>\n<p>abstract_machine_dom arguments =&gt; (abstract_machine arguments) meets specification</p>\n<p>type theorems.</p>\n</blockquote>\n<p>If you have a dom predicate, you don't need the option type because the<br>\npredicate should guaratee you never get into an underdefined situation.<br>\nConversely, with option you can formulate your theorem like this:</p>\n<p>abstract_machine arguments = Some result ==&gt; results meets spec</p>\n<blockquote>\n<p>Would it be better to simply make an infinite recursive call as a last pattern?</p>\n<p>| abstract_machine arguments = abstract_machine arguments</p>\n<p>letting it not to terminate at all?</p>\n</blockquote>\n<p>You would not be able to define this with \"fun\" and would need to use<br>\n\"partial_function (option)\". However, you should only do this if it is a genuine<br>\ncase of nontermination and not failed pattern-matching turned into artificial<br>\nnontermination.</p>\n<p>Tobias</p>\n<blockquote>\n<p>What is the standard way of defining an interpreter and its partial correctness in Isabelle?</p>\n<p>Cheers</p>\n<ul>\n<li>Gergely<br>\n</li>\n</ul>\n</blockquote>",
        "id": 294263834,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915367
    },
    {
        "content": "<p>From: Buday Gergely &lt;<a href=\"mailto:gbuday@karolyrobert.hu\">gbuday@karolyrobert.hu</a>&gt;<br>\nWhere can I find documentation on this <code>partial_function (option)</code> keyword? I did not find it in the function definition paper -- I have found its definition in an ML file but that was not very helpful.</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294264125,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915483
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;</p>\n<blockquote>\n<p>Where can I find documentation on this <code>partial_function (option)</code> keyword? I did not find it in the function definition paper -- I have found its definition in an ML file but that was not very helpful.</p>\n</blockquote>\n<p>I don't know whether this is the most recent reference, but it is described in:</p>\n<p>A. Krauss. Recursive definitions of monadic functions. In Proc. PAR ’10, volume 43<br>\nof EPTCS, pages 1–13, 2010.</p>\n<p>(available at <a href=\"http://arxiv.org/pdf/1012.4895v1.pdf\">http://arxiv.org/pdf/1012.4895v1.pdf</a>)</p>\n<p>To see its use in practice, you may also have a look at the IsaFoR/CeTA formalization<br>\n(<a href=\"http://cl-informatik.uibk.ac.at/software/ceta/\">http://cl-informatik.uibk.ac.at/software/ceta/</a>)<br>\nwhich contains at least 18 definitions via partial function, where also a user-defined<br>\nmonad is utilized. </p>\n<p>Cheers,<br>\nRené</p>",
        "id": 294264147,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915492
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThere are two examples in ex/Fundefs.thy.</p>\n<p>Tobias</p>",
        "id": 294264152,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915495
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@in.tum.de\">traytel@in.tum.de</a>&gt;<br>\nThere is also a page about it in the Isar reference manual:</p>\n<p>Isabelle2013-2 doc isar-ref</p>\n<p>Section 11.2.2</p>\n<p>Dmitriy</p>",
        "id": 294264174,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915501
    }
]