[
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nHOL Light defines a type “frag” of free Abelian groups over some other type: finite maps from type elements to integers. Each such map represents a monomial with integer exponents. Do we have such a thing already? (We have finite maps, of course.)</p>\n<p>Larry Paulson</p>",
        "id": 294743214,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661192385
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nI don't think we have anything like that. It is a very nice structure,<br>\nbut I have never really run into a situation where I needed anything<br>\nlike it.</p>\n<p>I guess you need that for homology, right?</p>\n<p>Manuel<br>\n<a href=\"/user_uploads/14278/QhAh_WO5Z0RMtvM6b6nwvxyH/pEpkey.asc\">pEpkey.asc</a></p>",
        "id": 294743558,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661192520
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:johannes.hoelzl@gmx.de\">johannes.hoelzl@gmx.de</a>&gt;<br>\nOne option is to use the Poly_Mapping theory in AFP/Polynomials:</p>\n<p><a href=\"https://www.isa-afp.org/browser_info/current/AFP/Polynomials/Poly_Mapping.html\">https://www.isa-afp.org/browser_info/current/AFP/Polynomials/Poly_Mapping.html</a></p>\n<p>These are the finite maps where the default value is 0. To represent free Abelian group over 'a<br>\nuse:  'a ⇒⇩0 int  the group structure is given by the additive operations.</p>\n<p>What is missing is the map to interpret a free Abelian group as a formal sum:<br>\n  map :: ('a = 'b::ab_group_add) =&gt; ('a ⇒⇩0 int) =&gt; 'b<br>\n  map f G = (SUM a | lookup G a ~= 0. lookup G a *_i f a)</p>\n<p>where *_i is scalar multiplication with an integer, defines as:<br>\n  (n + 1) *_i a = n *_i a + a<br>\n  (n - 1) *_i a = n *_i a - a<br>\n  0 *_i a = 0</p>\n<p>- Johannes</p>",
        "id": 294743730,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661192587
    },
    {
        "content": "<p>From: José Manuel Rodriguez Caballero &lt;<a href=\"mailto:josephcmac@gmail.com\">josephcmac@gmail.com</a>&gt;<br>\nThere is a deep theoretical reason in order to explain why the above<br>\nmentioned frag from HOL Light is avoided, whenever it is possible, in<br>\nAbstract Algebra, e.g., in Serge Lang's approach:<br>\n<a href=\"https://www.springer.com/gp/book/9780387953854\">https://www.springer.com/gp/book/9780387953854</a></p>\n<p>First, a little bit of terminology. Let M be a module over the ring R<br>\n(R-module for short). The R-module of finite maps from elements in M to R,<br>\nwhich are homomorphisms, is denoted M* and it is called the dual R-module<br>\nof M. An Abelian group is the same as an R-module, where R is the ring of<br>\nintegers, denoted Z. If M a free Z-module, i.e. a free Abelian group, then<br>\nM* can be identified with the above-mentioned frag of HOL Light, endowed<br>\nwith the componentwise addition. Reference for dual modules:<br>\n<a href=\"https://en.wikipedia.org/wiki/Dual_module\">https://en.wikipedia.org/wiki/Dual_module</a></p>\n<p>The problem is that Abstract Algebra concerns the properties of structures<br>\nwhich are independent from their concrete presentations. For any R-module<br>\nM, its dual R-module M* depends upon both M and a set S of generators of M.<br>\nIn general, for a given M, there are many choices of the set S. So, in<br>\norder to prove a property of M from a property of M*, the set S should be<br>\narbitrary from the beginning of the proof. Otherwise, the property of M*<br>\nwill be translated into a property of the pair (M, S), not just of M.<br>\nAbstract Algebra is not interested in the pair (M, S), although<br>\nComputational Algebra may be interested in such a pair.</p>\n<p>This problem was the main motivation for the introduction of the concept of<br>\nnatural transformation, and then for the development of Category Theory.<br>\nFor example, there is a natural transformation between M and M** (its<br>\ndouble dual, i.e., the dual of its dual).</p>\n<p>References for natural transformations:<br>\nText (advanced): <a href=\"https://ncatlab.org/nlab/show/natural+transformation\">https://ncatlab.org/nlab/show/natural+transformation</a><br>\nVideo (elementary introduction): <a href=\"https://www.youtube.com/watch?v=2LJC-XD5Ffo\">https://www.youtube.com/watch?v=2LJC-XD5Ffo</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"2LJC-XD5Ffo\" href=\"https://www.youtube.com/watch?v=2LJC-XD5Ffo\"><img src=\"https://uploads.zulipusercontent.net/dab4f5cf27822b3d3d651ba0ce6bf44a9eb41e54/68747470733a2f2f692e7974696d672e636f6d2f76692f324c4a432d58443546666f2f64656661756c742e6a7067\"></a></div><p>Kind Regards,<br>\nJose M.</p>",
        "id": 294743986,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661192685
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThat background is very interesting, thanks! However, I merely need this in order to port some HOL Light proofs involving homology theory. As I port these proofs with almost no knowledge of the subject matter, I'm seldom able to improve them very much. I leave that to people who know what they are doing. Meanwhile, even in their original form, the ported HOL Light libraries seem to be very useful.</p>\n<p>Larry</p>",
        "id": 294744340,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661192814
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThanks for the suggestion. I've already reported a decent chunk of the HOL Light code, but it's surely better to work with this more general development.</p>\n<p>I wonder whether Poly_Mapping.thy should be moved to the Library directory? It doesn't depend on anything else in the Polynomial entry.</p>\n<p>Larry</p>",
        "id": 294744406,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661192845
    },
    {
        "content": "<p>From: Askar Safin via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi, Lawrence. Look how your e-mail looks like in archive:<br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2018-September/msg00041.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2018-September/msg00041.html</a> .<br>\nAs you can see, it transforms to one big line which is very hard to<br>\nread, because you have to scrool horizontally. Please, configure your mail<br>\nclient properly or (better) configure mailing list archive to display mails<br>\nproperly.</p>\n<p>==<br>\nAskar Safin<br>\n<a href=\"http://vk.com/safinaskar\">http://vk.com/safinaskar</a></p>",
        "id": 294744539,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661192890
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThat’s annoying. Looks like Mailman wants to work for Linux only. The rest of the world formats paragraphs as single lines.</p>\n<p>I don’t see any formatting options on the mailing list configuration page, but I’m open to hints.</p>\n<p>Larry</p>",
        "id": 294744551,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661192894
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Larry,</p>\n<blockquote>\n<p>I wonder whether Poly_Mapping.thy should be moved to the Library directory? It doesn't depend on anything else in the Polynomial entry.</p>\n</blockquote>\n<p>this would be feasible of course, with the following issues:</p>\n<ul>\n<li>\n<p>I still do not have a more appropriate name at hand than poly_mapping<br>\nand I am open to suggestions.</p>\n</li>\n<li>\n<p>Since the theory has a strong bias towards constructing and executing<br>\nalgebraic concepts, Computational_Algebra might be a better session.</p>\n</li>\n<li>\n<p>The theory contains auxiliary concerning lists with no trailing zeros,<br>\nwhich would be useful as separate theory also: for radix representations<br>\nand HOL-Library.Polynomial also.</p>\n</li>\n<li>\n<p>Another prospective application: ‹(nat, 8 word) poly_mapping› would be<br>\na suitable model for big integers as bytes.</p>\n</li>\n</ul>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/B6wu4aLlepag3IUQRQpC9vZ_/signature.asc\">signature.asc</a></p>",
        "id": 294745043,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193096
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI would be equally happy to see it in Computational_Algebra. Presumably its dependence on three other theories from HOL-Library isn't relevant.</p>\n<p>Presumably no_trailing_zeros could be transferred to Library.More_List, since it builds on primitives defined in that theory.</p>\n<p>I have no suggestions for a more appropriate name.</p>\n<p>Larry<br>\n<a href=\"/user_uploads/14278/x2lO8vVAYJft1JlViNkZL3gW/signature.asc\">signature.asc</a></p>",
        "id": 294745055,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193102
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nIf the 'b is restricted to int, one has the subgroup of a finite Abelian<br>\ngroup where all the elements have finite support. This is commonly<br>\ncalled a the group of ‘formal sums’. Another possible name would be<br>\n‘signed multisets’.</p>\n<p>Not of course, ‘poly_mapping’ is a bit more general than that in that it<br>\nallows an arbitrary result type, not just integers. Perhaps ‘formal sum’<br>\nis still good enough. Or ‘formal quasisum’?</p>\n<p>Manuel<br>\n<a href=\"/user_uploads/14278/uLnttXQmexmcl9KMD4c1rZzv/pEpkey.asc\">pEpkey.asc</a></p>",
        "id": 294745072,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193109
    }
]