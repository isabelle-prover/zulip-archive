[
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;<br>\nDear Isabelle,</p>\n<p>I am using a groovy mutually-recursive datatype a bit like the following one:</p>\n<blockquote>\n<p>datatype jack = A \"int\" | B \"jill\"<br>\nand jill = C \"int =&gt; jack\" \"int list\"</p>\n</blockquote>\n<p>I would like to write a (mutually-recursive) function over my datatype, something like this:</p>\n<blockquote>\n<p>datatype jack = A \"int\" | B \"jill\"<br>\nand jill = C \"int =&gt; jack\" \"int list\"</p>\n<p>fun <br>\n  foo_jack :: \"jack =&gt; int\" and<br>\n  foo_jill :: \"jill =&gt; int\"<br>\nwhere<br>\n  \"foo_jack (A n) = n\"<br>\n| \"foo_jack (B j) = foo_jill j\"<br>\n| \"foo_jill (C f ns) = listsum (map (foo_jack \\&lt;circ&gt; f) ns)\"</p>\n</blockquote>\n<p>But the &lt;fun&gt; command says: \"Could not find lexicographic termination order.\" Does anybody know how one might prove that such a function terminates? </p>\n<p>Thanks very much!<br>\nJohn</p>\n<p>ps. I wondered whether the problem was the (infinite) \"int =&gt; jack\" in the C-constructor. I replaced it with a (finite) association list \"(int * jack) list\", and changed foo_jill so</p>\n<blockquote>\n<p>\"foo_jill (C f ns) = listsum (map (foo_jack \\&lt;circ&gt; (lookup f)) ns)\"</p>\n</blockquote>\n<p>where</p>\n<blockquote>\n<p>\"lookup A x == (map snd A) ! (THE i. (map fst A) ! i = x)\"</p>\n</blockquote>\n<p>but it didn't help.</p>",
        "id": 294157593,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851861
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman@in.tum.de\">huffman@in.tum.de</a>&gt;<br>\nIf you unfold the function composition operator \\&lt;circ&gt;, then the<br>\ndefinition works with primrec:</p>\n<p>primrec<br>\n  foo_jack :: \"jack =&gt; int\" and<br>\n  foo_jill :: \"jill =&gt; int\"<br>\nwhere<br>\n  \"foo_jack (A n) = n\"<br>\n| \"foo_jack (B j) = foo_jill j\"<br>\n| \"foo_jill (C f ns) = listsum (map (\\&lt;lambda&gt;n. foo_jack (f n)) ns)\"</p>\n<p>Infinitely-branching datatypes are one area where primrec still holds<br>\na lead over the function package.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294157604,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851867
    },
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;<br>\nAwesome. Many thanks Brian :)</p>",
        "id": 294157612,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851873
    },
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;<br>\nWhy must the definition of \\&lt;circ&gt; be unfolded? I mean, why does primrec throw an \"Unknown variable foo_jack\" otherwise? (I'm finding this problem with several of my other primrec definitions.)</p>\n<p>Thanks,<br>\njohn</p>",
        "id": 294157704,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851910
    }
]