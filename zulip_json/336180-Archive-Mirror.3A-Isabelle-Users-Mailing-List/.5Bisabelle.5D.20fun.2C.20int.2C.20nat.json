[
    {
        "content": "<p>From: Amine Chaieb &lt;<a href=\"mailto:chaieb@in.tum.de\">chaieb@in.tum.de</a>&gt;<br>\nHi Perry,</p>\n<p>The problem here the usual Suc/0 vs. numerals representation of things. <br>\nFunction prod is written by pattern matching and its clauses are <br>\nnormally aded to the simplifier. Now these match terms in your subgoals <br>\nonly if they have the 0/Suc _ pattern. Obviously 3 is not such a <br>\npattern, since it is internally some binary bit string.</p>\n<p>One magic set of simp rules you can use here is \"nat_number\" which will <br>\nturn 3 into Suc (Suc (Suc 0)) after which, you can proceed the <br>\nsimplification.</p>\n<p>The same problem disturbs the proof of your second goal where you need a <br>\nsubgoal saying that nat i = Suc (nat (i - 1)) since i &gt;0, after this <br>\nyour statement should be proved by simp.</p>\n<p>In such cases, and only when I really need this, I derive a lemma saying <br>\nthat prod n ... = (if n = 0 then ... else f (n) * prod (n - 1) ...)</p>\n<p>this is better for evaluation by the simplifier.</p>\n<p>Furthermore you can see the value of a function using value (just <br>\ninteractive).</p>\n<p>There are also methods which basically \"prove\" by evaluation.</p>\n<p>Hope it helps,<br>\nAmine.</p>\n<p>Perry James wrote:</p>",
        "id": 294064807,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825080
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>Furthermore you can see the value of a function using value (just <br>\ninteractive).</p>\n</blockquote>\n<p>Just to be clear on this one:</p>\n<p>value \"prod 3 1 (%x. x)\"</p>\n<p>yields \"6\".</p>\n<p>Tobias</p>",
        "id": 294064822,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825082
    }
]