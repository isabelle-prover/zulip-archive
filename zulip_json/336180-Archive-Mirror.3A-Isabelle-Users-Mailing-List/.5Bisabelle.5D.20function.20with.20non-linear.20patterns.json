[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nexception THM 1 raised (line 334 of \"drule.ML\"):<br>\nRSN: no unifiers<br>\n?t = ?t<br>\n_av3 = _av4 ⟹ P<br>\n   [⋀xa xs. x = (Seq xa xs, xa) ⟹ P, x = (_av2, _av3),<br>\n     _av2 = Seq _av4 _av5]</p>\n<p>This is Isabelle2012-RC2.  The full example based an Main looks like this:</p>\n<p>theory Scratch<br>\nimports Main<br>\nbegin</p>\n<p>datatype 'a seq = Empty | Seq 'a \"'a seq\"</p>\n<p>function contains :: \"'a seq =&gt; 'a =&gt; bool\"<br>\nwhere<br>\n   \"contains Empty x = False\"<br>\n| \"contains (Seq x xs) x = True\"<br>\n| \"contains (Seq y xs) x = contains(xs) x\"<br>\n   apply pat_completeness<br>\n   apply auto</p>\n<p>Is there anything fundamentally wrong with the idea of such non-linear<br>\nfunction patterns?</p>\n<p>I am posting this on behalf of Trung, who is participating in our <br>\nIsabelle/HOL tutorial today and tomorrow at Paris Sud.</p>\n<p>Makarius</p>",
        "id": 294157098,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851646
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nOn 05/14/2012 07:29 PM, Makarius wrote:</p>\n<blockquote>\n<p>On Mon, 14 May 2012, trung tran nguyen wrote:</p>\n<blockquote>\n<p>function contains ::\"'a seq =&gt; 'a =&gt; bool\"<br>\nwhere<br>\n\"contains Empty x = False\"<br>\n|\"contains (Seq x xs) x = True\"<br>\n|\"contains (Seq y xs) x = contains(xs) x\"</p>\n<p>apply pat_completeness</p>\n</blockquote>\n<p>exception THM 1 raised (line 334 of \"drule.ML\"):</p>\n</blockquote>\n<p>[...]</p>\n<blockquote>\n<p>Is there anything fundamentally wrong with the idea of such non-linear<br>\nfunction patterns?</p>\n</blockquote>\n<p>No, but it is outside the scope of pat_completeness (for mere syntactic <br>\nreasons).</p>\n<p>With the definition above, while you can prove completeness manually, <br>\nthe other goals (compatibility) will be unsolvable, since the third <br>\nequation is inconsistent with the second one. Note that when using <br>\n\"function\", the automatic disambiguation for pattern overlaps is <br>\ndisabled, which means that you have to write what you mean, e.g. by <br>\nadding a precondition \"y ~= x\" to the third equation.</p>\n<p>However, I generally do not recommend this, since you are then leaving <br>\nthe area of functional programming, which means that you lose quite a <br>\nbit of tool support (simplifier, code generation, quickcheck, etc.). <br>\nWriting \"if\" is usually better.</p>\n<p>Alex</p>",
        "id": 294157117,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851659
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 14 May 2012, Alexander Krauss wrote:</p>\n<blockquote>\n<p>On 05/14/2012 07:29 PM, Makarius wrote:</p>\n<p>On Mon, 14 May 2012, trung tran nguyen wrote:</p>\n<blockquote>\n<blockquote>\n<p>function contains ::\"'a seq =&gt; 'a =&gt; bool\"<br>\nwhere<br>\n\"contains Empty x = False\"<br>\n|\"contains (Seq x xs) x = True\"<br>\n|\"contains (Seq y xs) x = contains(xs) x\"</p>\n<p>apply pat_completeness</p>\n</blockquote>\n<p>exception THM 1 raised (line 334 of \"drule.ML\"):</p>\n</blockquote>\n<p>[...]</p>\n<blockquote>\n<p>Is there anything fundamentally wrong with the idea of such non-linear<br>\nfunction patterns?</p>\n</blockquote>\n<p>No, but it is outside the scope of pat_completeness (for mere syntactic <br>\nreasons).</p>\n<p>With the definition above, while you can prove completeness manually, the <br>\nother goals (compatibility) will be unsolvable, since the third equation is <br>\ninconsistent with the second one. Note that when using \"function\", the <br>\nautomatic disambiguation for pattern overlaps is disabled, which means that <br>\nyou have to write what you mean, e.g. by adding a precondition \"y ~= x\" to <br>\nthe third equation.</p>\n</blockquote>\n<p>We have tried the precondition later, but it also produced a low-level <br>\nexception (in Isabelle2012-RC2):</p>\n<p>exception TERM raised (line 256 of \"~~/src/HOL/Tools/hologic.ML\"):<br>\ndest_eq<br>\nxa ~= x</p>\n<blockquote>\n<p>However, I generally do not recommend this, since you are then leaving <br>\nthe area of functional programming, which means that you lose quite a <br>\nbit of tool support (simplifier, code generation, quickcheck, etc.). <br>\nWriting \"if\" is usually better.</p>\n</blockquote>\n<p>This was also my conclusion: it falls into the \"don't do it then\" <br>\ncategory.</p>\n<p>Makarius</p>",
        "id": 294157382,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851781
    }
]