[
    {
        "content": "<p>From: José Manuel Rodríguez Caballero &lt;<a href=\"mailto:josephcmac@gmail.com\">josephcmac@gmail.com</a>&gt;<br>\nHi,<br>\n  I am defining the group GL(n, complex) in Isabelle/HOL (where n can be<br>\ninfinite)</p>\n<p>typedef (overloaded) ('a::complex_normed_vector) GL<br>\n  = ‹{A::('a,'a) bounded. ∃ B. A *⇩o B = idOp ∧ B *⇩o A = idOp}›</p>\n<p>It would be nice to have</p>\n<p>instantiation GL :: (complex_normed_vector) group_mult</p>\n<p>for some class of multiplicative groups, but I only found the class of<br>\nadditive groups (group_add). So, my current instantiation is</p>\n<p>instantiation GL :: (complex_normed_vector) group_add</p>\n<blockquote>\n<p>From a formal point of view, it is fine, but the traditional notation for<br>\nGL(n, complex) is multiplicative rather than additive. Is there any<br>\nsolution in order to work with GL(n, complex) using multiplicative notation?</p>\n</blockquote>\n<p>Kind regards,<br>\nJosé M.</p>",
        "id": 294762950,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200529
    },
    {
        "content": "<p>From: Akihisa Yamada &lt;<a href=\"mailto:akihisayamada@nii.ac.jp\">akihisayamada@nii.ac.jp</a>&gt;<br>\nDear José,</p>\n<p>one solution would be to instantiate up to comm_monoid_mult, and then <br>\ninterpret locale <a href=\"http://Groups.group\">Groups.group</a>:</p>\n<p>interpretation mult_GL: <a href=\"http://Groups.group\">Groups.group</a><br>\n  ‹(*)::'a::complex_normed_vector GL ⇒ _› ‹1› ‹your_inverse› sorry</p>\n<p>Then some lemmas are available, e.g., mult_GL.right_inverse.</p>\n<p>Best regards,<br>\nAkihisa</p>",
        "id": 294762987,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200548
    }
]