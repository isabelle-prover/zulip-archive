[
    {
        "content": "<p>From: Michael Norrish &lt;<a href=\"mailto:Michael.Norrish@nicta.com.au\">Michael.Norrish@nicta.com.au</a>&gt;<br>\nI have a definitional term, of the form </p>\n<p>Const (\"==\", ty) $ Free(name, ty') $ tm</p>\n<p>such that it certifies with respect to a given theory, thy.</p>\n<p>Thus, </p>\n<blockquote>\n<p>cterm_of thy eqt;<br>\n  val it =<br>\n     \"foo_body ==<br>\n      TRY \\&lt;acute&gt;j :== the (h_val \\&lt;acute&gt;the_heap \\&lt;acute&gt;i) CATCH SKIP END\"<br>\n  : Thm.cterm</p>\n</blockquote>\n<p>But, if I try to use this as the basis for a definition, I get an<br>\nerror from the constant certification part of the code:</p>\n<blockquote>\n<p>thy |&gt; Constdefs.add_constdefs_i ([], [(NONE, ((\"\", []), eqt))]);<br>\n  Exception-<br>\n     TYPE<br>\n        (\"Illegal type for constant \\\"mytest.globals.the_heap\\\" :: globals =&gt; addr =&gt; word8\",<br>\n           [],<br>\n           []) raised</p>\n</blockquote>\n<p>What am I likely to be doing wrong in my invocation of<br>\nadd_constdefs_i?</p>\n<p>Thanks,<br>\nMichael.</p>",
        "id": 293899855,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660744012
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis is hard to guess from a distance.</p>\n<p>Generally speaking, add_constdefs_i is just the internal version of a <br>\nuser-level command -- it is common practice to provide both external and <br>\ninternal version just to make sure that ML packages can always invoke each <br>\nother.  For basic definitions the primitive add_consts/add_defs are <br>\nusually easier to use in ML.  Even more, constdefs is about to become a <br>\nlegacy feature pretty soon, being superceded by a more general <br>\n'definition' element.</p>\n<p>Anyway, add_constdefs_i actually does work for me as follows:</p>\n<p>val eq = Logic.mk_equals (Free (\"x\", HOLogic.boolT), Const (\"True\", HOLogic.boolT));<br>\n  val thy =<br>\n    Theory.begin_theory \"Test\" [Main.thy]<br>\n    |&gt; Constdefs.add_constdefs_i ([], [(NONE, ((\"\", []), eq))]);</p>\n<p>print_theory thy;</p>\n<p>Note that Constdefs.add_constdefs_i produces extra noise on the message <br>\nchannel -- this is a toplevel command after all.</p>\n<p>Makarius</p>",
        "id": 293899863,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660744013
    },
    {
        "content": "<p>From: Michael Norrish &lt;<a href=\"mailto:Michael.Norrish@nicta.com.au\">Michael.Norrish@nicta.com.au</a>&gt;<br>\nMakarius writes:</p>\n<blockquote>\n<p>On Tue, 28 Feb 2006, Michael Norrish wrote:</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>What am I likely to be doing wrong in my invocation of add_constdefs_i?</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>This is hard to guess from a distance.</p>\n</blockquote>\n<p>Trying to step through the code, inasmuch as this is possible without<br>\nhitting hidden functions, I get to the point where </p>\n<p>ProofContext.cert_term (ProofContext.init thy) tm</p>\n<p>fails, but </p>\n<p>cterm_of thy tm</p>\n<p>succeeds.  </p>\n<p>Having looked at the code, I'm now pretty sure the reason for this is<br>\nthat</p>\n<p>Sign.certify_term </p>\n<p>calls certify_typ on the types of its argument (using map_term_types),<br>\nbut</p>\n<p>ProofContext.cert_term </p>\n<p>does not.  It would be nice if the two behaved a little more<br>\nconsistently, but I can now deal with the issue.  In particular, if<br>\nyou pass Consts.certify a term that doesn't have its type<br>\nabbreviations expanded, then it will complain.  The action of<br>\ncertifying a type does this expansion (among other things, I'm sure).</p>\n<blockquote>\n<p>Generally speaking, add_constdefs_i is just the internal version of<br>\na user-level command -- it is common practice to provide both<br>\nexternal and internal version just to make sure that ML packages can<br>\nalways invoke each other.  For basic definitions the primitive<br>\nadd_consts/add_defs are usually easier to use in ML.  Even more,<br>\nconstdefs is about to become a legacy feature pretty soon, being<br>\nsuperceded by a more general 'definition' element.</p>\n</blockquote>\n<p>When implemented, please document the ML API for this new entry-point!</p>\n<blockquote>\n<p>Note that Constdefs.add_constdefs_i produces extra noise on the message <br>\nchannel -- this is a toplevel command after all.</p>\n</blockquote>\n<p>Yes, this is what I want because I'm implementing a top-level command<br>\nmyself.</p>\n<p>Michael.</p>",
        "id": 293899875,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660744015
    }
]