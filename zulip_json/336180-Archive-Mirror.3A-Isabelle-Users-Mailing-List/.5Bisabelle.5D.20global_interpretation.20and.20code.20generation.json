[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi.</p>\n<p>Suppose I have the following locale hierachy:</p>\n<p>A              definition f = ...<br>\n  A' = A + ...   <br>\n  B = A + ...    definition h = ... f ...</p>\n<p>I (globally) interpret i10: A', and then B (using the i10-<br>\ninterpretation for the A part). The proof obligations are as expected,<br>\nhowever, it will not generate code equations for functions in B that<br>\nuse functions from A.</p>\n<p>If I build i10 stepwise, by first interpreting A and then A',<br>\neverything works fine. Is there a canonical way to obtain code<br>\nequations with global_interpretation? Does it include manually<br>\nproviding interpretations for every super-locale, as worked in my case?<br>\nIs it documented somewhere?</p>",
        "id": 294729684,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661187578
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Peter,</p>\n<blockquote>\n<p>Suppose I have the following locale hierachy:</p>\n<p>A              definition f = ...<br>\n  A' = A + ...   <br>\n  B = A + ...  definition h = ... f ...</p>\n<p>I (globally) interpret i10: A', and then B (using the i10-<br>\ninterpretation for the A part). The proof obligations are as expected,<br>\nhowever, it will not generate code equations for functions in B that<br>\nuse functions from A.</p>\n<p>If I build i10 stepwise, by first interpreting A and then A',<br>\neverything works fine. Is there a canonical way to obtain code<br>\nequations with global_interpretation? Does it include manually<br>\nproviding interpretations for every super-locale, as worked in my case?<br>\nIs it documented somewhere?</p>\n</blockquote>\n<p>the rewrite morphisms stemming from mixin definitions are not propagated<br>\nalong an import hierarchy. Hence you have to spell it out explicitly.<br>\nThe standard pattern looks as follows:</p>\n<blockquote>\n<p>global_interpretation B where n = \"10\" and m = \"100\"<br>\n  rewrites \"A.f 10 = f_impl\"<br>\n  defines h_impl = h<br>\nproof -<br>\n  show \"B 10 100\"<br>\n    by standard simp<br>\n  then interpret B where n = \"10\" and m = \"100\" .<br>\n  show \"A.f 10 = f_impl\"<br>\n    by (simp add: f_impl_def)<br>\nqed</p>\n</blockquote>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/-cqmBKV5nN19KHu6Uz7f8Dek/signature.asc\">signature.asc</a></p>",
        "id": 294729707,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661187585
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi Florian,</p>\n<p>that worked for me, with the only change that (in Isabelle2017) the<br>\n\"rewrites\" section must come AFTER the \"defines\" section.</p>\n<p>Thanks a lot,<br>\n  Peter</p>",
        "id": 294729790,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661187603
    }
]