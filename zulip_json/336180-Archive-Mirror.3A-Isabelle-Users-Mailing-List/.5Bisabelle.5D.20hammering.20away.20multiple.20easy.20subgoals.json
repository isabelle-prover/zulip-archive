[
    {
        "content": "<p>From: \"Nagashima, Yutaka\" &lt;<a href=\"mailto:Yutaka.Nagashima@uibk.ac.at\">Yutaka.Nagashima@uibk.ac.at</a>&gt;<br>\nHi Peter,</p>\n<p>With PSL in the AFP [1], one can keep hammering away easy sub-goals while deferring difficult sub-goals by defining a strategy, \"JackHammer\", as following:</p>\n<p>===<br>\ntheory Test<br>\n  imports \"PSL/PSL\"<br>\nbegin</p>\n<p>definition \"my_true ≡ True\"<br>\ndefinition \"my_true2 ≡ True\"</p>\n<p>strategy JackHammer = RepeatN (Ors [Hammer, Defer])</p>\n<p>lemma \"my_true\" \"my_true2\" \"False\" \"my_true\"<br>\n  apply -<br>\n  find_proof JackHammer<br>\n(* This should suggest<br>\napply ( simp add : my_true_def )<br>\napply ( simp add : my_true2_def )<br>\ndefer <br>\napply ( simp add : my_true_def )<br>\n*)<br>\n  oops</p>\n<p>end<br>\n===</p>\n<p>The drawback is this strategy is a bit slow and sequential.</p>\n<p>Regards,<br>\nYutaka</p>\n<p>[1] <a href=\"https://www.isa-afp.org/entries/Proof_Strategy_Language.html\">https://www.isa-afp.org/entries/Proof_Strategy_Language.html</a></p>",
        "id": 294727383,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186833
    }
]