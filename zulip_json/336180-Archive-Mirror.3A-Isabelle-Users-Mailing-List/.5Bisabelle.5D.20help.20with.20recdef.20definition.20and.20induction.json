[
    {
        "content": "<p>From: Lucas Cavalcante &lt;<a href=\"mailto:thesupervisar@gmail.com\">thesupervisar@gmail.com</a>&gt;<br>\n1st.:<br>\nIs there some \"For-Newbie Forum/Chat\" about Isabelle? I think most of my<br>\nquestions are about how to proceed more than how Isabelle works.<br>\nForgive me for that.</p>\n<p>2nd.:<br>\nOnce I need to apply induction in a variable with 'bool' datatype I need to<br>\n'measure' this variable when using recdef. Is there a way how to make it by<br>\nusing primrec, or i will need recdef?<br>\nIf recdef is needed, i will need 'measure'. Thus I need the function to<br>\ndefine itself.</p>\n<p>I was trying something like that:</p>\n<p>consts f :: \"bool =&gt; nat\"<br>\n  primrec<br>\n  \"f (~P) = 1 + f P\"<br>\n  \"f (P-&gt;Q) = 1 + f P + f Q\"<br>\n  ... (the other conectives, like &amp;, | and &lt;-&gt;)<br>\n  \"f P = 0\"</p>\n<p>But it says there is a constructor missing. (Then I began to use recdef)</p>\n<p>3rd.:<br>\nConsider the following function:</p>\n<p>consts sum1 :: '[nat,nat] =&gt; nat\"<br>\n  primrec<br>\n   \"sum1 m 0 = m\"<br>\n   \"sum1 m (Suc n) = sum1 (Suc m) n\"</p>\n<p>Then I try to prove:</p>\n<p>lemma 1: \"sum 0 n = n\"</p>\n<p>by<br>\n     apply (induct_tac n, auto)</p>\n<p>resulting this:</p>\n<p>!!n. sum1  0 n = n ==&gt; sum1 (Suc 0) n = Suc n</p>\n<p>but this remaing stage seems trivial by definition of sum1.<br>\nIs 'auto' instead other more specific methods a mistake?</p>\n<p>Doesn't Isabelle allow the Complete Induction?</p>\n<p>Thank You<br>\nLucas</p>",
        "id": 294050994,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819462
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nIt does <em>not</em> follow trivially - you have no defn or lemma which tells <br>\nyou what \"sum1 (Suc 0) n\" is. You need to prove such lemmas first.</p>\n<p>Tobias</p>",
        "id": 294051003,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819467
    },
    {
        "content": "<p>From: Stefan Berghofer &lt;<a href=\"mailto:berghofe@in.tum.de\">berghofe@in.tum.de</a>&gt;<br>\nLucas Cavalcante wrote:<br>\nIt seems that you are confusing the datatype \"bool\" with the datatype of<br>\nboolean formulae. Note that for example the term \"(~ True) --&gt; False\" of<br>\ntype \"bool\" is equivalent to the term \"True\", but the above function would<br>\nmap the former term to 2 and the latter to 0. Therefore, such a function<br>\ncannot exist. While the datatype \"bool\" just consists of the two constructors<br>\n\"True\" and \"False\", the datatype of boolean formulae could be defined as follows:</p>\n<p>datatype form = TT | FF | Neg form | Impl form form | And form form | Or form form | ...</p>\n<p>Note that the datatype package already provides a \"size\" function for this<br>\ndatatype automatically.</p>\n<p>Greetings,<br>\nStefan</p>",
        "id": 294051017,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819473
    }
]