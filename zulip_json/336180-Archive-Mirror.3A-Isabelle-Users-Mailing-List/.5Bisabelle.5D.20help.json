[
    {
        "content": "<p>From: \"jwang <a href=\"http://whu.edu.cn\">whu.edu.cn</a> (jwang)\" &lt;<a href=\"mailto:jwang@whu.edu.cn\">jwang@whu.edu.cn</a>&gt;<br>\nWhen Isabelle was run , the error<br>\n-\"/usr/local/ProofGeneral/generic/proof-autoloads.elc was not compiled<br>\nin Emacs \"was show.Why is it?</p>",
        "id": 294050429,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819209
    },
    {
        "content": "<p>From: Lucas Cavalcante &lt;<a href=\"mailto:lu_cavalcante_@hotmail.com\">lu_cavalcante_@hotmail.com</a>&gt;<br>\nIt happened with me once, but i<code>m not sure i remember what to do.Try open the file </code>Makefile<code> found at /usr/local/ProofGeneral and edit all fields containing </code>xEmacs<code>, changing it for </code>Emacs<code>. I</code>m not sure it<code>s gonna fix your problem, but i remember many bugs were fix when i</code>ve tried it, and your message is very familiar. Then you must recompile.You could be more precise about your Emacs version, and bla bla bla. =)I also tried some versions of Emacs where <code>the little Belle</code> did<code>t work. Probably your version simply don</code>t support Belle.Regards,Lucas Cavalcante&gt; &gt;     When Isabelle was run , the error&gt; -\"/usr/local/ProofGeneral/generic/proof-autoloads.elc was not compiled&gt; in Emacs \"was show.Why is it? &gt; &gt; <strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong>****</p>\n<hr>\n<p>Encontre o que procura com mais eficiência! Instale já a Barra de Ferramentas com Windows Desktop Search GRÁTIS!<br>\n<a href=\"http://desktop.msn.com.br/\">http://desktop.msn.com.br/</a></p>",
        "id": 294050463,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819232
    },
    {
        "content": "<p>From: \"jwang <a href=\"http://whu.edu.cn\">whu.edu.cn</a> (jwang)\" &lt;<a href=\"mailto:jwang@whu.edu.cn\">jwang@whu.edu.cn</a>&gt;<br>\nWhen I click \"Isabelle--start isabelle \" of the emacs menu =<br>\n ,emacs show the error:unknow logic \"HOL\" ,no heap file found  =<br>\n in:/root/isabelle/heaps/polyml_x86-linux,/usr/local/Isabele2005/=<br>\nheaps/polyml_x86-linux.   Why?<br>\n    another,there is  not \"Settings\" command in \"Isabelle\" menu=<br>\n item of the emacs menu,why?</p>",
        "id": 294050838,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819397
    },
    {
        "content": "<p>From: Lucas Dixon &lt;<a href=\"mailto:ldixon@inf.ed.ac.uk\">ldixon@inf.ed.ac.uk</a>&gt;<br>\njwang <a href=\"http://whu.edu.cn\">whu.edu.cn</a> (jwang) wrote:<br>\nThe easiest thing is probably just to remove all the compiled lisp files<br>\n(the .elc files). The reason is probably that the lisp files have been<br>\ncompiled for xemacs.</p>\n<p>lucas</p>",
        "id": 294050870,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819412
    },
    {
        "content": "<p>From: Lucas Cavalcante &lt;<a href=\"mailto:thesupervisar@gmail.com\">thesupervisar@gmail.com</a>&gt;<br>\nYou must build the logics. Try</p>\n<p>\"sudo ./usr/local/Isabelle/build -a\"</p>\n<p>Regards,<br>\nLucas Cavalcante</p>",
        "id": 294050876,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819415
    },
    {
        "content": "<p>From: David Aspinall &lt;<a href=\"mailto:da@inf.ed.ac.uk\">da@inf.ed.ac.uk</a>&gt;<br>\n[ Here's a copy of the email message I sent off list.  Note the GNU <br>\nEmacs/XEmacs switch in latest (development) versions.  Also note use of <br>\nEMACS= to avoid editing Makefile. - David ]</p>\n<p>jwang <a href=\"http://whu.edu.cn\">whu.edu.cn</a> (jwang) wrote:<br>\n<a href=\"http://proofgeneral.inf.ed.ac.uk/FAQ\">http://proofgeneral.inf.ed.ac.uk/FAQ</a></p>\n<p>Q. Proof General fails to load with an error message on start-up:</p>\n<p>error: \"File `.../ProofGeneral/generic/proof-autoloads.elc' was<br>\nnot compiled in Emacs\"</p>\n<p>What's wrong?</p>\n<p>A. We distribute .elcs for GNU Emacs, so you will have to delete<br>\nthem and (optionally) recompile for XEmacs. Using the Makefile:</p>\n<p>Use 'make clean' to remove all .elc files.<br>\nUse 'make compile' to recompile .elc files.</p>\n<p>Check that the Makefile sets EMACS to your Emacs executable<br>\n(or simply run 'make compile EMACS=emacs')</p>",
        "id": 294051538,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819687
    },
    {
        "content": "<p>From: \"jwang <a href=\"http://whu.edu.cn\">whu.edu.cn</a> (jwang)\" &lt;<a href=\"mailto:jwang@whu.edu.cn\">jwang@whu.edu.cn</a>&gt;<br>\nhello,<br>\n   Apply(simp) or by auto often is used to  prove some  theorems automatically,so we can not see the process of simplication and we only see the result of simplication.How to  show the simplification process in Proof-General ,for example the rewrite rules used by the current simplification? Is there the command?<br>\n                                                                         thanks<br>\n                                                                           Jean</p>",
        "id": 294059353,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660822972
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\njwang <a href=\"http://whu.edu.cn\">whu.edu.cn</a> (jwang) wrote:<br>\nSelect in ProofGeneral menu: Isabelle -&gt; Settings -&gt; Trace simplifier<br>\nAttention!  Output is verbose.</p>\n<p>Note that you may also do single-step rewrites using the \"unfold\" and<br>\n\"subst\" methods and the \"unfolding\" keyword.  See Isar Reference manual.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/O4o_abrsWwc6Jh6iK-jcVbf8/florian.haftmann.vcf\">florian.haftmann.vcf</a><br>\n<a href=\"/user_uploads/14278/WU6S0yCyJ4P2G8M6QhBckg-_/signature.asc\">signature.asc</a></p>",
        "id": 294059362,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660822979
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nYou will find documentation at</p>\n<p><a href=\"http://isabelle.in.tum.de/documentation.html\">http://isabelle.in.tum.de/documentation.html</a></p>\n<p>Start with the first one. For greater depth, or for reference, you could look at the second one. The remaining documents are specialised.</p>\n<p>Isabelle/HOL refers to the higher-order logic instance of Isabelle, which practically everybody uses; Isar refers to the structured proof language in which proofs are written.</p>\n<p>Larry Paulson</p>",
        "id": 294236685,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905071
    },
    {
        "content": "<p>From: Walther Neuper &lt;<a href=\"mailto:wneuper@ist.tugraz.at\">wneuper@ist.tugraz.at</a>&gt;<br>\nCopy and paste from PDF to jEdit works nicely, if you observe some <br>\ndetails (which will disappear soon, as we all hope). As an example, <br>\ngiven isar-ref.pdf p.3 copy&amp;paste into this simple mail program:</p>\n<p>notepad<br>\nbegin<br>\nVia explicit name:<br>\nassume a: A<br>\nnote a<br>\nVia implicit name:<br>\nassume A<br>\nnote this<br>\nVia literal proposition (unification with results from the proof text):<br>\nassume A<br>\nnote ‘A‘<br>\nassume x . B x<br>\nnote ‘B a‘<br>\nnote ‘B b‘<br>\nend</p>\n<p>If you copy&amp;paste this into jEdit, you easily remove the syntax errors by:<br>\n(<em>1</em>) identifying comments<br>\n(<em>2</em>) replace inappropriate apostrophs<br>\n(<em>3</em>) enclose terms and types by \"\" in case they consist of more than 1 <br>\ncharacter and look for dropped special characters,</p>\n<p>which finally results in<br>\nnotepad<br>\nbegin<br>\n   -- \"Via explicit name:\" (<em>1</em>)<br>\n     assume a: A<br>\n     note a<br>\n   -- \"Via implicit name:\" (<em>1</em>)<br>\n     assume A<br>\n     note this<br>\n   -- \"Via literal proposition (unification with results from the proof <br>\ntext):\" (<em>1</em>)<br>\n     assume A<br>\n     note <code>A</code> (<em>2</em>)<br>\n     assume \"⋀x. B x\" (<em>3</em>)<br>\n     note <code>B a</code> (<em>2</em>)<br>\n     note <code>B b</code> (<em>2</em>)<br>\nend</p>\n<p>Hope this helps,<br>\nWalther</p>",
        "id": 294236714,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905083
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nYou can copy and paste the following example into jEdit:</p>\n<p>theory Scratch<br>\nimports Main<br>\nbegin</p>\n<p>datatype 'a myList = Nil | Cons 'a \"'a myList\"</p>\n<p>fun app :: \"'a myList =&gt; 'a myList =&gt; 'a myList\" where<br>\n  \"app Nil ys = ys\" |<br>\n  \"app (Cons x xs) ys = Cons x (app xs ys)\"</p>\n<p>fun rev :: \"'a myList =&gt; 'a myList\" where<br>\n  \"rev Nil = Nil\" |<br>\n  \"rev (Cons x xs) = app (rev xs) (Cons x Nil)\"</p>\n<p>value \"rev (Cons True (Cons False Nil))\"<br>\nvalue \"rev (Cons a (Cons b Nil))\"</p>\n<p>lemma app_Nil2 [simp]: \"app xs Nil = xs\"<br>\napply(induction xs)<br>\napply(auto)<br>\ndone</p>\n<p>lemma app_assoc [simp]: \"app (app xs ys) zs = app xs (app ys zs)\"<br>\napply(induction xs)<br>\napply(auto)<br>\ndone</p>\n<p>lemma rev_app [simp]: \"rev (app xs ys) = app (rev ys) (rev xs)\"<br>\napply(induction xs)<br>\napply(auto)<br>\ndone</p>\n<p>theorem rev_rev [simp]: \"rev (rev xs) = xs\"<br>\napply(induction xs)<br>\napply(auto)<br>\ndone</p>\n<p>end</p>\n<p>make sure that you save it in a file called Scratch.thy</p>\n<p>Cheers<br>\n  Cornelius</p>",
        "id": 294236726,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905089
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nMy example for first exposure is Isabelle2013/src/HOL/ex/Seq.thy -- you <br>\ncan open that file directly in Isabelle/jEdit.  That is just a totally <br>\narbitrary entry point to a huge amount of Isabelle material.</p>\n<p>Copy-paste from latex-generated PDF is indeed a black art.  To avoid it, <br>\nyou can look through Isabelle2013/src/Doc/ although that material might <br>\noccasionally look a bit odd in source form.</p>\n<p>Makarius</p>",
        "id": 294236739,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905095
    },
    {
        "content": "<p>From: Christoph LANGE &lt;<a href=\"mailto:math.semantic.web@gmail.com\">math.semantic.web@gmail.com</a>&gt;<br>\nHi Liu Jing,</p>\n<p>welcome!</p>\n<p>2013-03-01 12:27 liujing657949251:</p>\n<blockquote>\n<p>However, what make me confused is, what is the difference between Isabelle/HOL and Isabelle/Isar?</p>\n</blockquote>\n<p>Isabelle/HOL refers to higher-order logic as it is implemented within<br>\nIsabelle's logical framework.</p>\n<p>Isabelle/Isar is a textbook-style syntax for proofs on the<br>\nlogic-independent level.</p>\n<blockquote>\n<p>And what syntax should I learn, Isabelle/Isar syntax or Isabelle/HOL syntax?</p>\n</blockquote>\n<p>Both: the reference manual (invoke with \"isabelle doc isar-ref\" from the<br>\ncommand line) lists the former as \"outer syntax\" and the latter as<br>\n\"inner syntax\".  Terms are given in the \"inner syntax\", which depends on<br>\nthe logic you are using, i.e. HOL in your case.</p>\n<blockquote>\n<p>Please tell me the specific tutorial I should learn.</p>\n</blockquote>\n<p>\"isabelle doc prog-prove\" is your friend.</p>\n<blockquote>\n<p>Here, I am learning the simple example, which is in appendix. Am I right?</p>\n</blockquote>\n<p>I didn't have time to look into this, but indeed this is similar to the<br>\nexample discussed in prog-prove.  Note however that this is in the<br>\n\"apply tactics\" proof style, not using Isar.</p>\n<p>Cheers,</p>\n<p>Christoph</p>",
        "id": 294236849,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905139
    },
    {
        "content": "<p>From: liujing657949251 &lt;<a href=\"mailto:liujing657949251@126.com\">liujing657949251@126.com</a>&gt;<br>\nDear all proof lovers:<br>\nI am really new to Isabelle. Recently I hope to learn HOL and try to use automatic therom prover. So I download the Isabelle2013. Now I hope to use Isabelle/jEdit in Windows OS for therom proving. However, what make me confused is, what is the difference between Isabelle/HOL and Isabelle/Isar? And what syntax should I learn, Isabelle/Isar syntax or Isabelle/HOL syntax? Please tell me the specific tutorial I should learn. <br>\nHere, I am learning the simple example, which is in appendix. Am I right?<br>\nThanks very much.</p>\n<p>Liu Jing<br>\n<a href=\"/user_uploads/14278/53x3TfnJis_Q-kQwAnNOxZTX/Seq.thy\">Seq.thy</a></p>",
        "id": 294238496,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905889
    },
    {
        "content": "<p>From: liujing657949251 &lt;<a href=\"mailto:liujing657949251@126.com\">liujing657949251@126.com</a>&gt;<br>\nDear all proof lovers:<br>\nI am really new to Isabelle. I hope to use Isabell/HOL for proving. Recently I am reading prog-prove in Isabelle.doc. Until now I have read half of it, but I am so puzzled that I really don't know how to combine the little examples in doc with the Isabelle/jEdit. <br>\nThey are just some fragments in one proof, I guess. So what should I do next? <br>\nBy the way, if I use Isabelle/jEdit, do I need study Isar in chapter 4 of the doc? <br>\nMy tutor told me to read some little examples, but I usually do not know why some lemmas should be proved first or some else. I do not know why I read the doc, but it doesn't help me to these question. <br>\nSo I really hope to know how to learn. <br>\nThank you very much!<br>\nBest wishes!<br>\nLiu Jing</p>",
        "id": 294238841,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906065
    },
    {
        "content": "<p>From: \"Yannick Duchêne (Hibou57 )\" &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nLe Sat, 16 Mar 2013 10:34:00 +0100, liujing657949251  <br>\n&lt;<a href=\"mailto:liujing657949251@126.com\">liujing657949251@126.com</a>&gt; a écrit:</p>\n<blockquote>\n<p>Dear all proof lovers:<br>\nI am really new to Isabelle. I hope to use Isabell/HOL for proving.  <br>\nRecently I am reading prog-prove in Isabelle.doc. Until now I have read  <br>\nhalf of it, but I am so puzzled that I really don't know how to combine  <br>\nthe little examples in doc with the Isabelle/jEdit.</p>\n</blockquote>\n<p>When you read the PDF doc, see an interesting sample and then want to give  <br>\nit a try in Isabelle/jEdit, be aware the text you may copy/past from the  <br>\nPDF to jEdit, may often be incorrect. Better learn Isar, to be able to  <br>\ninput the samples directly in Isabelle/jEdit.</p>\n<blockquote>\n<p>By the way, if I use Isabelle/jEdit, do I need study Isar in chapter 4  <br>\nof the doc?</p>\n</blockquote>\n<p>Isar is one of the thing which make Isabelle so relevant. So yes, you  <br>\nreally have to study Isar. Isar is for readable and expressive proof text  <br>\n(and what's more readable is more trustable), close enough to what you may  <br>\nsee in some logic or maths books, although the concrete notation differs a  <br>\nlot, the structure is a lot similar. Learn Isar if you don't want to have  <br>\nproof looking like machine code.</p>",
        "id": 294238845,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906070
    }
]