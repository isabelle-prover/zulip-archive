[
    {
        "content": "<p>From: Michael Norrish &lt;<a href=\"mailto:Michael.Norrish@nicta.com.au\">Michael.Norrish@nicta.com.au</a>&gt;<br>\nI am implementing an Isar toplevel directive that takes a filename as<br>\nan argument.  I'd like to interpret this as relative to the directory<br>\ncontaining the enclosing theory file, instead of the base directory of<br>\nthe Isabelle session.  (These two things can be different.)</p>\n<p>Thanks,<br>\nMichael.</p>",
        "id": 293912369,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660747768
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nFirst of all note that actual theory values have no notion of the source <br>\ntext or file-system location.  You may still get something like this by <br>\nasking the theory loader, e.g. using Context.theory_name and <br>\nThyInfo.loaded_files.  The latter merely records file dependencies, but <br>\nthe main thy source will show up as head element eventually.  (The file <br>\nlist may well be empty, e.g. in interactive composition of theory sources <br>\nwithout loading any files.)</p>\n<p>Maybe this kind of peeking into theory loader internals can even be <br>\navoided.  The theory system does not really maintain qualified theory <br>\nnames anyway.  By use_thy \"/foo/bar/MyTheory\" or ``theory ... imports <br>\n\"/foo/bar/MyTheory\"\" ...'' the system merely augments the load path <br>\ntemporarily and then looks for \"MyTheory.thy\" as usual.  This means when <br>\nprocessing a thy file one may assume its path is already included in the <br>\nlookup -- if it has been found then it must have been via the load path. <br>\nAny subsequent load operation (with base file names) will go through the <br>\nsame procedure.</p>\n<p>To make a long story short, just do something like ``use \"myfile.ML\"'' to <br>\nrefer to auxiliary files within the same directory as the current thy <br>\nsource.</p>\n<p>Makarius</p>",
        "id": 293912387,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660747772
    },
    {
        "content": "<p>From: Michael Norrish &lt;<a href=\"mailto:Michael.Norrish@nicta.com.au\">Michael.Norrish@nicta.com.au</a>&gt;<br>\nMakarius writes:<br>\nYes.  In this case, I'm loading C files with a custom piece of code,<br>\nso I need to make my code as smart as \"use\".</p>\n<p>Michael.</p>",
        "id": 293912393,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660747774
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSo maybe ThyLoad.check_file is what you want, e.g.:</p>\n<p>ThyLoad.check_file NONE (Path.basic \"Primes.thy\");</p>\n<p>(This example finds a file through the \"$ISABELLE_HOME/src/HOL/Library\"<br>\nload_path entry.)</p>\n<p>Makarius</p>",
        "id": 293912399,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660747776
    }
]