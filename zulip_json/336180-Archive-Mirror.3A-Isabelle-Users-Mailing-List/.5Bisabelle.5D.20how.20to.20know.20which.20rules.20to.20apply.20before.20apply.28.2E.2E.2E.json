[
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nOn 26.10.2014 18:44, M A wrote:</p>\n<blockquote>\n<p>is it fact_filter to give hints about what lemma to be used? what is<br>\nthe correct command to return hints about which lemmas to be used?<br>\nUsually you just start sledgehammer (e.g., from the the sledgehammer<br>\npanel). Options like fact_filter are either for very advanced or just<br>\ninternal usage.<br>\nafter tried, it seems same as giving hints about rules, however not<br>\nlemmas.<br>\nRules are lemmas. Or did you expect sledgehammer to suggest you a<br>\nproposition which you should prove to prove the theorem?<br>\nSometimes it do not have immediate response, I do not know whether it<br>\nstart or running or not start.<br>\nIf you use the sledgehammer panel, there is a small rotating circle<br>\nindicating whether sledgehammer is running. If you write the<br>\n\"sledgehammer\" command in your theory file, it has a different<br>\nbackground as long as it is running.<br>\n \"remote_vampire\": Cannot connect to remote server.<br>\nYou probably had no network connection, so the vampire server could not<br>\nbe reached.<br>\n\"spass\": Try this: by (metis list.inject) (0 ms).<br>\nSpass found a proof involving the \"list.inject\" lemma.<br>\n(No structured proof available -- proof too simple.)<br>\nThe proof is so simple, that sledgehammer cannot split it into more<br>\nsimple steps.</p>\n</blockquote>\n<p>-- Lars</p>",
        "id": 294309403,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925350
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nOn 26.10.2014 19:37, M A wrote:</p>\n<blockquote>\n<p>After find<br>\n<a href=\"https://www.mail-archive.com/isabelle-dev@mailbroy.informatik.tu-muenchen.de/msg03468.html\">https://www.mail-archive.com/isabelle-dev@mailbroy.informatik.tu-muenchen.de/msg03468.html</a><br>\nThis is about improving how Sledgehammer is working -- note that it was<br>\nposted on the development mailing list. This is nothing you need to care<br>\nabout as a beginner.<br>\n I click apply that can see it is running, it seems need to know at<br>\nleast one lemma.<br>\nSledgehammer tries to discharge the current proof goal, yes.<br>\n1. How about if we do not know any lemma so that no starting lemma for<br>\nit to run the command?<br>\nThen what should sledgehammer try to prove?</p>\n</blockquote>\n<p>Be careful with the notation: A lemma (or theorem, fact, rule) is a<br>\nproven statement which can be used in further proofs.<br>\nThe \"lemma\" command in Isabelle allows you to state a proposition. It<br>\nthen sets up (one or more) goals you need to prove (using the commands<br>\nproof, apply, ...). After finishing the prove, a lemma with the<br>\nproposition you stated is added to your theory.</p>\n<blockquote>\n<ol start=\"2\">\n<li>do not know from example of the link about Facts in \"e\" proof (of<br>\n1000): zip_rev@1, length_map@5 &lt;mailto:length_map@5&gt;<br>\nthe information is not like a lemma, how to know what is zip_rev@1<br>\n&lt;mailto:zip_rev@1&gt; and length_map@5 &lt;mailto:length_map@5&gt; ?<br>\nThis is some internal sledgehammer stuff.</li>\n<li>using example below, how to find two lemma below ?<br>\nlemma app_assoc [simp]: \"(xs @ ys) @ zs = xs @ (ys @ zs)\"<br>\nlemma rev_app [simp]: \"rev(xs @ ys) = (rev ys) @ (rev xs)\"<br>\nI am not sure what you are trying to do here. You don't need them<br>\nexplicitly in your proof?</li>\n</ol>\n</blockquote>\n<p>-- Lars</p>",
        "id": 294309413,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925355
    },
    {
        "content": "<p>From: M A &lt;<a href=\"mailto:tesleft@hotmail.com\">tesleft@hotmail.com</a>&gt;<br>\nHi  I use toylist example in <a href=\"http://isabelle.in.tum.de/doc/tutorial.pdf\">http://isabelle.in.tum.de/doc/tutorial.pdf</a> To practise how it find other lemma from one lemma with Sledgehammer when I left click it , it runs a very long time without a listbox pop up. lemma app_Nil2 [simp]: \"xs @ [] = xs\"sledgehammer learn_isar are essential lemmas must include associative lemma and distributive lemma? Regards, Martin &gt; Date: Sun, 26 Oct 2014 19:33:36 +0100</p>",
        "id": 294309433,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925365
    },
    {
        "content": "<p>From: M A &lt;<a href=\"mailto:tesleft@hotmail.com\">tesleft@hotmail.com</a>&gt;<br>\nHi  after find lack of lemma length_map, I use find_theorems can not find length_maphow to find lemma length_map ?  theory ts<br>\nimports Main<br>\nbegin<br>\nlemma \"map f xs = ys ==&gt; rev (zip xs ys) = zip (rev xs) (rev ys)\"<br>\nsledgehammer [prover = e, fact_filter = mesh, verbose]<br>\nfind_theorems \"length_map ?\" Regards, Martin &gt; From: <a href=\"mailto:tesleft@hotmail.com\">tesleft@hotmail.com</a></p>",
        "id": 294309444,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925369
    },
    {
        "content": "<p>From: M A &lt;<a href=\"mailto:tesleft@hotmail.com\">tesleft@hotmail.com</a>&gt;<br>\nHi</p>\n<ol>\n<li>how to know which rules to apply before apply(auto)?2. any manual to show all the rules that can be applied for each library when import them?3. is there any difference to apply rules in one statement or apply one by one?<br>\na. apply(a)apply(b)done<br>\nb.apply(a,b)done</li>\n</ol>\n<p>Regards,<br>\nMartin</p>",
        "id": 294318364,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660926177
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nBecoming an expert at Isabelle takes time and cannot be rushed. It sounds like you simply need to work through the tutorials, doing small examples to begin with. Before attempting to prove a theorem, you need to have an intuitive grasp of the key steps of the proof. Don’t expect “auto” to work miracles. </p>\n<p>Larry Paulson</p>",
        "id": 294318479,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660926207
    },
    {
        "content": "<p>From: M A &lt;<a href=\"mailto:tesleft@hotmail.com\">tesleft@hotmail.com</a>&gt;<br>\nHi ,<br>\nI just think to apply all the rules at one time and then apply(auto) to see which rules it use in debug rather than guess by observation and trial and error.It seems think out essential number of lemmas in order before theorem already a miracle. apply(a,b,c,d,e,f,g.......etc)apply(auto)<br>\nRegards,<br>\nMartin</p>",
        "id": 294318548,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660926229
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nWhen proving something in Isabelle, you should have an idea how you would prove it on paper first: This should give you an idea which properties you need for the proof.</p>\n<p>Isabelle offers you a few tools to discover useful lemmas: Sledgehammer can search for a proof and gives you a list of lemmas it needed for a proof. Inspecting this list often helps to give the right lemmas to auto (and similar tools), so they can find a proof.</p>\n<p>Very helpful is also the \"find theorems\" tool which is found in the query panel: You can search for lemmas containing certain constants or having a specific shape. In particular, you can also search for lemmas which are applicable by rule (using the intro, elim, dest  keywords).</p>\n<p>It is important to keep in mind that lemmas are often formulated a bit differently than in maths, to make them work better with the various proof tools.</p>\n<p>There is no manual of all rules. Rather, the lemmas available can be either discovered by browsing the theories or (more directly) by the use of find theorems.</p>\n<p>In many cases, \"apply(a,b)\" and \"apply a apply b\" are equivalent, but there are some differences: Some proof methods (e.g. rule) don't return a single proof step but potentially a sequence of multiple proof steps (try applying the \"back\" command). In the (a,b) case, when the second proof method fails, Isabelle backtracks and tries the next proof step produced by a. Also, if there are chained facts (from using then, from, using or similar) then these facts are available to both proof methods. This is usually not what you want.</p>\n<p>Best regards, Lars</p>",
        "id": 294318582,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660926238
    },
    {
        "content": "<p>From: M A &lt;<a href=\"mailto:tesleft@hotmail.com\">tesleft@hotmail.com</a>&gt;<br>\nHi  is it fact_filter to give hints about what lemma to be used? what is the correct command to return hints about which lemmas to be used? after tried, it seems same as giving hints about rules, however not lemmas. Sometimes it do not have immediate response, I do not know whether it start or running or not start. \"remote_vampire\": Cannot connect to remote server. <br>\n\"spass\": Try this: by (metis list.inject) (0 ms).<br>\n(No structured proof available -- proof too simple.) <br>\n\"e\": Try this: by (metis the_elem_set) (0 ms).<br>\n(No structured proof available -- proof too simple.) theory ts<br>\nimports Main<br>\nbegin<br>\nlemma \"[a] = [b] ==&gt; a = b\"<br>\nsledgehammer fact_filter = &lt;\"[a] = [b] ==&gt; a = b\"&gt;  {smart} Regards, Martin &gt; From: <a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a></p>",
        "id": 294318665,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660926248
    },
    {
        "content": "<p>From: M A &lt;<a href=\"mailto:tesleft@hotmail.com\">tesleft@hotmail.com</a>&gt;<br>\nHi  After find <a href=\"https://www.mail-archive.com/isabelle-dev@mailbroy.informatik.tu-muenchen.de/msg03468.html\">https://www.mail-archive.com/isabelle-dev@mailbroy.informatik.tu-muenchen.de/msg03468.html</a> I click apply that can see it is running, it seems need to know at least one lemma. 1. How about if we do not know any lemma so that no starting lemma for it to run the command? 2.  do not know from example of the link about Facts in \"e\" proof (of 1000): zip_rev@1, length_map@5the information is not like a lemma, how to know what is zip_rev@1 and length_map@5 ? 3. using example below, how to find two lemma below ?lemma app_assoc [simp]: \"(xs @ ys) @ zs = xs @ (ys @ zs)\"</p>\n<p>lemma rev_app [simp]: \"rev(xs @ ys) = (rev ys) @ (rev xs)\"<br>\n sledgehammer_params [fact_filter = mesh]<br>\ntheory Scratch<br>\nimports Datatype<br>\nbegin<br>\ndatatype 'a list  = Nil (\"[]\")<br>\n                  | Cons 'a \"'a list\" (infixr \"#\" 65)<br>\n(* This is the append function: *)<br>\nprimrec app :: \"'a list =&gt; 'a list =&gt; 'a list\" (infixr \"@\" 65)<br>\nwhere<br>\n\"[] @ ys = ys\" |<br>\n\"(x # xs) @ ys = x # (xs @ ys)\"<br>\nprimrec rev :: \"'a list =&gt; 'a list\" where<br>\n\"rev [] = []\" |<br>\n\"rev (x # xs) = (rev xs) @ (x # [])\"primrec itrev :: \"'a list =&gt; 'a list =&gt; 'a list\" where<br>\n\"itrev [] ys = ys\" |<br>\n\"itrev (x#xs) ys = itrev xs (x#ys)\"<br>\nvalue \"rev (True # False # [])\"<br>\nlemma app_Nil2 [simp]: \"xs @ [] = xs\"<br>\nsledgehammer learn_isar<br>\napply(induct_tac xs)<br>\napply(auto)<br>\ndoneend Regards, Martin &gt; From: <a href=\"mailto:tesleft@hotmail.com\">tesleft@hotmail.com</a></p>",
        "id": 294318673,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660926251
    }
]