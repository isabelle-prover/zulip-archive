[
    {
        "content": "<p>From: 游珍 &lt;<a href=\"mailto:yucy0405@163.com\">yucy0405@163.com</a>&gt;<br>\ndear,<br>\n  I'm an Isabelle newbie trying to verify a proof.  The statement of the proof  involves \\&lt;Sum&gt;. I meet some prombles, the following are my proof;<br>\ntheory sumlist<br>\nimports Main List<br>\nbegin<br>\nconsts<br>\nsetn::\"nat  \\&lt;Rightarrow&gt;  nat set\"<br>\nprimrec<br>\n\"setn 0 = {}\"<br>\n\"setn (Suc n) = insert (Suc n) (setn n)\"</p>\n<p>lemma f: \" (\\&lt;Sum&gt;i\\&lt;in&gt;(setn (Suc j)). i)=(Suc j)+(\\&lt;Sum&gt;i\\&lt;in&gt;(setn j). i)\"<br>\napply auto<br>\napply  ?????</p>\n<p>The reslut is displayed in the next window<br>\nproof (prove): step 1<br>\ngoal (1 subgoal):</p>\n<ol>\n<li>\\&lt;Sum&gt;(insert (Suc j) (setn j)) = Suc (j + \\&lt;Sum&gt;(setn j))</li>\n</ol>\n<p>Which method or rule I can choose? How to use these methods and rules? I don't known any lemmas and themorems about \\&lt;Sum&gt;.How can i get some informations about \\&lt;Sum&gt;?</p>\n<p>need help!<br>\nthanks in advance!<br>\n                                          yucy</p>",
        "id": 294066966,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825794
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nQuoting 游珍 &lt;<a href=\"mailto:yucy0405@163.com\">yucy0405@163.com</a>&gt;:</p>\n<p>At this point in your proof, you need to you can search for relevant  <br>\nlemmas by typing ctrl-c, ctrl-f, and using the patterns  <br>\n\"\\&lt;Sum&gt;_\\&lt;in&gt;_. _\" or \"SUM _:_. _\" together with \"insert\". The lemma  <br>\nyou need is setsum_insert. In fact, setsum_insert is declared as a  <br>\nsimp rule, but it has a couple of side conditions which prevent it  <br>\nfrom rewriting automatically.</p>\n<p>If you type:<br>\napply (subst setsum_insert)</p>\n<p>you get the following subgoals:<br>\ngoal (3 subgoals):</p>\n<p>1. finite (setn j)<br>\n  2. Suc j \\&lt;notin&gt; setn j<br>\n  3. Suc j + \\&lt;Sum&gt;(setn j) = Suc (j + \\&lt;Sum&gt;(setn j))</p>\n<p>If you prove the first two subgoals as separate lemmas, and declare  <br>\nthem both as [simp] rules, then your lemma f can be proved completely  <br>\nby auto.</p>\n<p>Hope this helps,</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294067098,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825822
    },
    {
        "content": "<p>From: Simon Winwood &lt;<a href=\"mailto:sjw@cse.unsw.edu.au\">sjw@cse.unsw.edu.au</a>&gt;<br>\nAt Wed, 8 Oct 2008 17:01:38 +0800 (CST),<br>\n=?gbk?B?087V5A==?= &lt;<a href=\"mailto:yucy0405@163.com\">yucy0405@163.com</a>&gt; wrote:<br>\n&gt; </p>\n<p>[...]</p>\n<blockquote>\n<p>The reslut is displayed in the next window<br>\nproof (prove): step 1<br>\ngoal (1 subgoal):<br>\n 1. \\&lt;Sum&gt;(insert (Suc j) (setn j)) = Suc (j + \\&lt;Sum&gt;(setn j))</p>\n<p>Which method or rule I can choose? How to use these methods and<br>\nrules? I don't known any lemmas and themorems about \\&lt;Sum&gt;.How can i<br>\nget some informations about \\&lt;Sum&gt;?</p>\n</blockquote>\n<p>It seems obvious that you need something about \\&lt;Sum&gt; and insert.<br>\nIsabelle has a very useful find-theorems command (I use it via C-c C-f<br>\nin Emacs) --- in this case it is a little tricky as \\&lt;Sum&gt; is a<br>\ntranslation for setsum (which I found by greping for \\&lt;Sum&gt; in<br>\nisabelle/HOL).  If you search for \"\\&lt;Sum&gt;_._\" and insert (or setsum<br>\nand insert), you get a number of lemmas from Finite_Set, of which<br>\nsetsum_insert is the one we want.</p>\n<p>This requires a few helper lemmas, but the proof is more or less<br>\nstraightforward (especially if you keep in mind that most lemmas to be<br>\nproved about setn will be via induction):</p>\n<p>theory sumlist<br>\nimports Main List<br>\nbegin</p>\n<p>consts<br>\nsetn::\"nat  \\&lt;Rightarrow&gt;  nat set\"</p>\n<p>primrec<br>\n\"setn 0 = {}\"<br>\n\"setn (Suc n) = insert (Suc n) (setn n)\"</p>\n<p>lemma finite_setn:<br>\n  \"finite (setn n)\"<br>\n  apply (induct n)<br>\n   apply simp<br>\n  apply simp<br>\n  done</p>\n<p>lemma setn_n_le_n:<br>\n  \"x \\&lt;in&gt; setn n \\&lt;Longrightarrow&gt; x \\&lt;le&gt; n\"<br>\n  apply (induct n)<br>\n   apply simp<br>\n  apply fastsimp<br>\n  done</p>\n<p>lemma f: \" (\\&lt;Sum&gt;i\\&lt;in&gt;(setn (Suc j)). i)=(Suc j)+(\\&lt;Sum&gt;i\\&lt;in&gt;(setn j). i)\"<br>\nproof (subst setn.simps, rule setsum_insert)<br>\n  show \"finite (setn j)\" by (rule finite_setn)</p>\n<p>show \"Suc j \\&lt;notin&gt; setn j\"<br>\n  proof<br>\n    assume \"Suc j \\&lt;in&gt; setn j\"<br>\n    hence \"Suc j \\&lt;le&gt; j\" by (rule setn_n_le_n)<br>\n    thus False by simp<br>\n  qed<br>\nqed</p>\n<p>end</p>\n<p>Simon</p>",
        "id": 294067129,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825832
    }
]