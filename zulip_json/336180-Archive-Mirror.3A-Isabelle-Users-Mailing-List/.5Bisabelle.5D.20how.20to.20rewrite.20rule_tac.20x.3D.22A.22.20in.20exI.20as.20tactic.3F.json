[
    {
        "content": "<p>From: Nils Jähnig &lt;<a href=\"mailto:jaehnig@mi.fu-berlin.de\">jaehnig@mi.fu-berlin.de</a>&gt;<br>\nHello,</p>\n<p>I was hoping that someone of you could give me a little help with tactics.</p>\n<p>I try to rewrite an apply-style proof into a tactic, for future<br>\nautomization.</p>\n<p>my goal:<br>\nrewrite apply(rule_tac x=\"A\" in exI) as a tactic</p>\n<p>my attempt:<br>\nval tac = let x = @{term \"A\"} in rtac @{thm exI} 1 end</p>\n<p>my problem:<br>\nthe bound variable x is represented in another way, i.e. I'm substituting<br>\nnothing with the let-in command.</p>\n<p>my questions:<br>\n1) could somebody tell me, how it will work<br>\n2) how can i display the internal representation of a theorem (on ML-level,<br>\nso that i can see which term instead of x i need to substitute)</p>\n<p>thanks in advance<br>\nNils</p>",
        "id": 294150522,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849150
    },
    {
        "content": "<p>From: Nils Jähnig &lt;<a href=\"mailto:jaehnig@mi.fu-berlin.de\">jaehnig@mi.fu-berlin.de</a>&gt;<br>\ni forgot \"val\" in my attempt<br>\nval tac = let val x = @{term \"A\"} in rtac @{thm exI} 1 end</p>",
        "id": 294150531,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849156
    },
    {
        "content": "<p>From: Nils Jähnig &lt;<a href=\"mailto:jaehnig@mi.fu-berlin.de\">jaehnig@mi.fu-berlin.de</a>&gt;<br>\nthis helped. thank you.</p>",
        "id": 294150574,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849168
    },
    {
        "content": "<p>From: Lukas Bulwahn &lt;<a href=\"mailto:bulwahn@in.tum.de\">bulwahn@in.tum.de</a>&gt;<br>\nHello Nils,</p>\n<p>I suggest you have a look at the tactics in subgoal.ML.<br>\nSubgoal.FOCUS and friends should be helpful for your quest.<br>\nMaybe the Isabelle Programming Tutorial (Cookbook) also tells you a <br>\nlittle bit about those functions.</p>\n<p>Lukas</p>",
        "id": 294150591,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849174
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jlcaadawson@netspeed.com.au\">jlcaadawson@netspeed.com.au</a>&gt;<br>\nNils,</p>\n<p>For this you want res_inst_tac, described in the Reference manual.<br>\nEg (res_inst_tac [(\"x\", \"A\")] exI 1)</p>\n<p>For your second question (not needed to answer the first) the ML <br>\nfunction prop_of gives the content of a theorem as a term, which (by <br>\ndefault) gets printed out in all its detail.</p>\n<p>Jeremy</p>",
        "id": 294150649,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849199
    },
    {
        "content": "<p>From: Nils Jähnig &lt;<a href=\"mailto:jaehnig@mi.fu-berlin.de\">jaehnig@mi.fu-berlin.de</a>&gt;<br>\nThank you.<br>\ni will give the terms a try.</p>",
        "id": 294151545,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849481
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nAppendix C of the \"isar-ref\" manual explains the correspondence of ML <br>\ntactic expressions and Isar proof methods a little.  It was originally <br>\nwritten to help converting old ML proof scripts, which are now obsolete <br>\nand hardly ever encountered in recent years, but it also helps in the <br>\nother direction.</p>\n<p>The \"implementation\" manual explains further things about rules and <br>\ntactics from the bottom up.  The important FOCUS combinator has already <br>\nbeen mentioned -- it is based on Isar structuring principles in ML, and is <br>\nable to get rid of most res_inst_tac applications in practice. For plain <br>\nthm instantiation you mainly use Thm.instantiate, despite various later <br>\nattempts (mostly outdated now) to produce more convenient alternatives.</p>\n<p>Makarius</p>",
        "id": 294152103,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849683
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis probably refers to Isabelle2005, which was the last version with all the <br>\nold things from Isabelle98 etc. still present. The \"Reference manual\" is called <br>\n\"Old Reference manual\" for quite some years already, and it explicitly says in <br>\ncurrent Isabelle2011-1:</p>\n<p>Note: this document is part of the earlier Isabelle<br>\n   documentation and is mostly outdated.  Fully obsolete parts of the<br>\n   original text have already been removed.  The remaining material<br>\n   covers some aspects that did not make it into the newer manuals yet.</p>\n<p>The \"newer manuals\" refers mainly to the \"Isabelle/Isar Reference Manual and <br>\n\"Isabelle/Isar Implementation Manual\".</p>\n<p>Makarius</p>",
        "id": 294152171,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849708
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nMakarius wrote:<br>\nYes, I observe that now res_inst_tac requires a proof context argument, <br>\nand some other changes as well. </p>\n<p>Makarius is right in guessing that I'm referring to Isabelle2005 - it <br>\nwas when I started to convert all my proofs from Isabelle 2005 to 2007 I <br>\nseemed to be spending a lot of time on it when I would rather be doing <br>\nuseful work.</p>\n<p>I gather things have got worse since then, in terms of <br>\nincompatibilities between versions of Isabelle and therefore the <br>\nprospects of users making use of other users' work</p>\n<p>Jeremy</p>",
        "id": 294152190,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849714
    },
    {
        "content": "<p>From: Nils Jähnig &lt;<a href=\"mailto:jaehnig@mi.fu-berlin.de\">jaehnig@mi.fu-berlin.de</a>&gt;<br>\nI did forget to reply.<br>\nit helped. with the name i found the tactic and its syntax. the right way<br>\nto use it is</p>\n<p>res_inst_tac @{context} [ ( (x,0) , \"A\" ) ] exI 1</p>\n<p>which was convenient for me, as i don't have a term, but a string, which is<br>\neasier to manipulate, if you're not yet on good terms with terms.</p>\n<p>Nils</p>",
        "id": 294152456,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849806
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 16 Feb 2012, Nils Jähnig wrote:</p>\n<blockquote>\n<p>I did forget to reply.<br>\nit helped. with the name i found the tactic and its syntax. the right way<br>\nto use it is</p>\n<p>res_inst_tac @{context} [ ( (x,0) , \"A\" ) ] exI 1</p>\n</blockquote>\n<p>Is this going to be a generally abstracted tactic or proof method?  If so, <br>\nthe compile-time @{context} needs to be passed as runtime parameter, <br>\ntypically as ctxt : Proof.context.  You get the runtime value via the<br>\nnormal method_setup syntax wrapping.</p>\n<p>The static @{context} only makes sense for one-shot applications as in the <br>\nproof method called \"tactic\", or certain ML commands in Isar.</p>\n<blockquote>\n<p>which was convenient for me, as i don't have a term, but a string, which <br>\nis easier to manipulate, if you're not yet on good terms with terms.</p>\n</blockquote>\n<p>Again, it depends on the situation.  Little can be done reliably with <br>\nstrings: accepting them from the end-user and passing them to certain <br>\nother ML operations that expect such source input.</p>\n<p>Composing \"terms\" in concrete syntax representation in general tactics <br>\nbreaks very quickly.  Moreover, if the official source position markup is <br>\npreserved, as is done by default by Args.term parsers etc. for Isar <br>\nmethods, any attempt to paste together such formal source will be rejected <br>\nquickly.  This is good because it makes such accidents immediately clear.</p>\n<p>Makarius</p>",
        "id": 294152467,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849812
    }
]