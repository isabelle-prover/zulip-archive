[
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:johnwickerson@cantab.net\">johnwickerson@cantab.net</a>&gt;<br>\nThis is a really basic question, and I'll probably kick myself once somebody tells me the answer.</p>\n<p>How can I state a lemma that simply says my function is \"well-defined\"? I mean: suppose I define</p>\n<p>definition \"foo x == x ! 0\"</p>\n<p>I want to say that foo is \"well-defined\" on all inputs other than the empty list. I'm imagining something like </p>\n<p>lemma \"x ≠ [] ⟹ ∃!y. foo x = y\"</p>\n<p>but that's true for any foo.</p>\n<p>Thanks!</p>\n<p>john</p>",
        "id": 294256056,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912640
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI’m afraid that this concept of \"well-defined” does not exist in higher-order logic. You may find that some properties of foo only hold for non-empty lists, that’s all.</p>\n<p>Larry Paulson</p>",
        "id": 294257875,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913261
    },
    {
        "content": "<p>From: Christoph LANGE &lt;<a href=\"mailto:math.semantic.web@gmail.com\">math.semantic.web@gmail.com</a>&gt;<br>\nHi John,</p>\n<p>2013-11-01 19:41 John Wickerson:</p>\n<blockquote>\n<p>How can I state a lemma that simply says my function is \"well-defined\"? I mean: suppose I define</p>\n<p>definition \"foo x == x ! 0\"</p>\n<p>I want to say that foo is \"well-defined\" on all inputs other than the empty list. I'm imagining something like</p>\n<p>lemma \"x ≠ [] ⟹ ∃!y. foo x = y\"</p>\n<p>but that's true for any foo.</p>\n</blockquote>\n<p>I'm not sure what your concrete application is, but we have experienced<br>\nthe same problem in the concrete setting of proving the well-definedness<br>\nof an auction.  To our most general understanding, an auction is a<br>\nrelation of inputs (participants' bids on available goods) to outcomes<br>\n(an allocation of goods to participants, and a specification of who has<br>\nto pay how much to the auctioneer).  Of such a relation we seek to prove<br>\nthree properties:</p>\n<ol>\n<li>\n<p>it is left-total on valid inputs, i.e. for any such input there<br>\nexists an outcome</p>\n</li>\n<li>\n<p>these outcomes are unique.  (1) and (2) means that the auction<br>\nrelation is a function.</p>\n</li>\n<li>\n<p>the outcomes satisfy some additional properties.  Note that we call<br>\nthese properties \"well-definedness\", whereas we use \"soundness\" to refer<br>\nto what you call \"well-definedness\".</p>\n</li>\n</ol>\n<p>OK, but one concrete auction for which we'd like to prove this is<br>\nalready stated as a HOL function.  This means, taking into account what<br>\nLarry explained, that (1) and (2) are easy to prove, but that you don't<br>\ngain much from this close-to-vacuous observation in practice.  Thus …</p>\n<p>2013-11-01 20:00 Lawrence Paulson:</p>\n<blockquote>\n<p>You may find that some properties of foo only hold for non-empty lists, that’s all.</p>\n</blockquote>\n<p>… (3) is indeed the only interesting part of our proof.  For the source<br>\nsee<br>\n<a href=\"https://github.com/formare/auctions/blob/master/isabelle/Auction/CombinatorialVickreyAuctionSoundness.thy\">https://github.com/formare/auctions/blob/master/isabelle/Auction/CombinatorialVickreyAuctionSoundness.thy</a>,<br>\nand for an explanation (to an audience without a theorem proving<br>\nbackground) see section 5 of<br>\n<a href=\"https://codex.cs.bham.ac.uk/svn/mmk/formare/pubs/wine2013/130719n-VCG.pdf\">https://codex.cs.bham.ac.uk/svn/mmk/formare/pubs/wine2013/130719n-VCG.pdf</a> (use<br>\nusername/password guest/guest).  Note that both are work in progress.</p>\n<p>Cheers,</p>\n<p>Christoph</p>",
        "id": 294258081,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913330
    }
]