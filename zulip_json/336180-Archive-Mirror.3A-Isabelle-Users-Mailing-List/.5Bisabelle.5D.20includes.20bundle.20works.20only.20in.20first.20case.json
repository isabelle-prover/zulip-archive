[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nHi all,</p>\n<p>I stumbled across the following (unexpected) behaviour: If I do an Isar proof of <br>\nmultiple goals I have refined the proof state by including a bundle prior to the <br>\nopening \"proof\", the \"next\" separator deletes the bundle.</p>\n<p>Here's an example:</p>\n<p>definition test :: \"'a list =&gt; 'a list\" where \"test xs = []\"<br>\nbundle test = test_def[simp]<br>\nlemma shows \"test xs = []\" and \"test ys = []\"<br>\n   including test<br>\nproof -<br>\n   show \"test xs = []\" by simp<br>\nnext<br>\n   show \"test ys = []\" by simp (* fails *)<br>\nqed</p>\n<p>Surprisingly, it works if I nest the multiple goals inside a block:</p>\n<p>proof -<br>\n   {<br>\n     show \"test xs = []\" by simp<br>\n   next<br>\n     show \"test ys = []\" by simp (* works *)<br>\n   }<br>\nqed</p>\n<p>Is this behaviour intended?</p>\n<p>Andreas</p>",
        "id": 294159859,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660852727
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIt follows naturally from the true meaning of Isar commands, also from the <br>\nprinciple of liberality in Isar design (cf. the concluding note on \"abusus <br>\nnon tollit usus\" in my PhD thesis).</p>\n<p>So yes, it is all within the normal parameters of Isar, despite the <br>\npotential surprise.  The above example indicates that the new 'including' <br>\ncommand is better not used before a proof block.  BTW, the longer existing <br>\n'using', with its later addition to affect the context, already produces <br>\nthe same effect:</p>\n<p>lemma \"x = x\" \"y = y\"<br>\n   using [[show_types]]<br>\nproof<br>\nnext<br>\n   show \"y = y\" ..<br>\nqed</p>\n<p>In some sense the above indentation provides a vague hint on the scoping <br>\nrules, although it is better not to stretch things that far.</p>\n<p>Generally, the 'next' command switches blocks, here the implicit one of <br>\nthe enclosing goal statement.  So you don't delete declarations from the <br>\ncontext, you go back to an earlier context that does not have them.</p>\n<p>In the example above you are using 'next' as if would \"separate subgoals\", <br>\nbut this is not really its meaning.  Plain 'show' statements do not have <br>\nto be separated.  Separate blocks are only required for goals with their <br>\nown local context.  In that case { ... show ... next ... show ... } works, <br>\nbut is a bit awkward just to get a common context for what you are <br>\nproving.</p>\n<p>Here is an alternative form that includes a bundle in the context of a <br>\ntoplevel statement:</p>\n<p>lemma<br>\n     includes test<br>\n     shows \"test xs = []\" and \"test ys = []\"<br>\n   proof -<br>\n     show \"test xs = []\" by simp<br>\n   next -- \"redundant\"<br>\n     show \"test ys = []\" by simp<br>\n   qed</p>\n<p>For local statements within a proof you can use 'include' with regular <br>\nblock structure, if it is really required.</p>\n<p>Makarius</p>",
        "id": 294159889,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660852739
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nHi Makarius,</p>\n<p>thanks for the explanation.</p>\n<blockquote>\n<p>So yes, it is all within the normal parameters of Isar, despite the potential<br>\nsurprise. The above example indicates that the new 'including' command is better<br>\nnot used before a proof block. BTW, the longer existing 'using', with its later<br>\naddition to affect the context, already produces the same effect:</p>\n<p>lemma \"x = x\" \"y = y\"<br>\nusing [[show_types]]<br>\nproof<br>\nnext<br>\nshow \"y = y\" ..<br>\nqed<br>\nI have never tried this. So far, I only used \"using &lt;facts&gt;\" and \"unfolding <br>\n&lt;some_def&gt;\". The latter always worked on all goals and the former affected all <br>\ngoals if used with the right initial method (-, simp_all, auto, etc.), so I <br>\nwould have expected that something similar applies to including.</p>\n</blockquote>\n<blockquote>\n<p>In the example above you are using 'next' as if would \"separate subgoals\", but<br>\nthis is not really its meaning. Plain 'show' statements do not have to be<br>\nseparated.<br>\nIn my real use case, each goal had the full fix-assume-show chain, so the next <br>\nwas necessary there.</p>\n</blockquote>\n<blockquote>\n<p>Here is an alternative form that includes a bundle in the context of a toplevel<br>\nstatement:</p>\n<p>lemma<br>\nincludes test<br>\nshows \"test xs = []\" and \"test ys = []\"<br>\nproof -<br>\nshow \"test xs = []\" by simp<br>\nnext -- \"redundant\"<br>\nshow \"test ys = []\" by simp<br>\nqed<br>\nI read about that alternative, but I actually prefer \"including\" over <br>\n\"includes\", because including does not clutter the statement of the lemma with <br>\nhints to the prover.</p>\n</blockquote>\n<p>Andreas</p>",
        "id": 294159900,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660852745
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nYet another alternative keeps the context and the statement separate:</p>\n<p>context includes test<br>\n   begin</p>\n<p>lemma shows ...</p>\n<p>end</p>\n<p>Makarius</p>",
        "id": 294159918,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660852750
    }
]