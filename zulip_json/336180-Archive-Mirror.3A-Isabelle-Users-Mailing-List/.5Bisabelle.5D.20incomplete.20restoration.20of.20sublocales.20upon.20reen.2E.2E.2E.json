[
    {
        "content": "<p>From: Bertram Felgenhauer via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nIn the attached (minimized) theory, I have the following setup:</p>\n<ul>\n<li>\n<p>there are two locales, \"infinite\" and \"permutation_type\"; the latter<br>\n  defines a constant \"eqvt\".</p>\n</li>\n<li>\n<p>\"permutation_type\" is a sublocale of \"infinite\" in two different<br>\n  ways; the corresponding sublocales are named \"atom_pt\" and \"bool_pt\".</p>\n</li>\n</ul>\n<p>Everything works fine so far; the locale \"permutation_type\" is<br>\ninstantiated twice, and both \"atom_pt.eqvt\" and \"bool_pt.eqvt\" are<br>\navailable.</p>\n<p>However, when leaving the context and entering it again, only<br>\n\"atom_pt.eqvt\" is restored; \"bool_pt.eqvt\" is no longer accessible.</p>\n<p>Is this behavior expected? It doesn't fit into my mental model of how<br>\nsublocales are supposed to work.</p>\n<p>I've observed this with Isabelle 2017, but a7de81d847b0 does the same.</p>\n<p>Cheers,</p>\n<p>Bertram</p>\n<p>Background: This example is based on the \"Renaming\" theory in IsaFoR,<br>\nwhich is itself an adaptation of notions from HOL-Nominal2. In its<br>\ncurrent version, the fact that there are infinitely atoms is modelled<br>\nby a type class (called \"infinite\"). The problem I described above<br>\narose in an attempt to change the type class into a locale; in order<br>\nfor this to work, a number of top-level interpretations that use a kind<br>\nconstraint \"'a :: infinite\" (including \"atom_pt\" and \"bool_pt\") would<br>\nhave to become sublocales of \"infinite\".<br>\n<a href=\"/user_uploads/14278/0yt-nMvco85IBYgpgyX4UJGx/R.thy\">R.thy</a></p>",
        "id": 294725125,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186162
    },
    {
        "content": "<p>From: Clemens Ballarin &lt;<a href=\"mailto:ballarin@in.tum.de\">ballarin@in.tum.de</a>&gt;<br>\nYou are bitten by cyclic dependencies between infinite and <br>\npermutation_type.  This is the sublocale graph:</p>\n<p>infinite --&gt; permutation_type<br>\n   permutation_type --&gt; infinite (qualifier atom_pt)<br>\n   permutation_type --&gt; infinite (qualifier bool_pt)</p>\n<p>Activation of infinite yields these locale instances:</p>\n<p>atom_pt.bool_pt : permutation_type \"permute_bool\"<br>\n   atom_pt : infinite \"()\"<br>\n   atom_pt : permutation_type \"permute_atom\"<br>\n   infinite \"bar\"</p>\n<p>and you will see that</p>\n<p>term \"atom_pt.bool_pt.eqvt\"</p>\n<p>is defined; perhaps not the way you want it, though.</p>\n<p>You probably want to make a clone of one of the involved locales, say</p>\n<p>locale meaningful_name = infinite</p>\n<p>to break the cycles.</p>\n<p>Clemens</p>",
        "id": 294725215,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186186
    }
]