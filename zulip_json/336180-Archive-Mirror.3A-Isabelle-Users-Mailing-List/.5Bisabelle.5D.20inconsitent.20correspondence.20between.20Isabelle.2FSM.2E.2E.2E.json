[
    {
        "content": "<p>From: \"<a href=\"mailto:lyj238@ios.ac.cn\">lyj238@ios.ac.cn</a>\" &lt;<a href=\"mailto:lyj238@ios.ac.cn\">lyj238@ios.ac.cn</a>&gt;<br>\nDear experts:<br>\n   I  am confused on an inconsitent correspondence between Isabelle SMT and z3 SMT.<br>\n   It is really annonying, and I look forward to an answer.</p>\n<p>I have a Isabelle theory:</p>\n<p>datatype locationType= m| e| s| i </p>\n<p>type_synonym state=\"nat ⇒ locationType\" </p>\n<p>lemma test1:\"~(if ((st::state) 1 = e) then s <br>\nelse (if ((st::state) 1 = m) then s <br>\nelse (if ((st::state) 1 = i) then i <br>\nelse s))) = m\" <br>\nby (metis locationType.distinct(3))</p>\n<p>In Isabelle, it is tautology</p>\n<p>But accordingly, I have a z3 theory:</p>\n<p>(declare-datatypes () ((locationType m e s i ))) </p>\n<p>(declare-fun state (Int) locationType)<br>\n( assert (not (=&gt; true (= (ite (= (state 1) e) <br>\ns (ite (= (state 1) m) s (ite (= (state 1) i) i s ) ) ) m) ) ))<br>\n(check-sat)</p>\n<p>In z3, I get a counterExample:<br>\nsat (model (define-fun state ((x!1 Int)) locationType (ite (= x!1 1) e e)) )</p>\n<p>regards</p>\n<p><a href=\"mailto:lyj238@ios.ac.cn\">lyj238@ios.ac.cn</a></p>",
        "id": 294325946,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928538
    },
    {
        "content": "<p>From: \"<a href=\"mailto:lyj238@ios.ac.cn\">lyj238@ios.ac.cn</a>\" &lt;<a href=\"mailto:lyj238@ios.ac.cn\">lyj238@ios.ac.cn</a>&gt;<br>\nDear experts:<br>\n   I  am confused on an inconsitent correspondence between Isabelle SMT and z3 SMT.<br>\n   It is really annonying, and I look forward to an answer.</p>\n<p>I have a Isabelle theory:</p>\n<p>datatype locationType= m| e| s| i </p>\n<p>type_synonym state=\"nat ⇒ locationType\" </p>\n<p>lemma test1:\"~(if ((st::state) 1 = e) then s <br>\nelse (if ((st::state) 1 = m) then s <br>\nelse (if ((st::state) 1 = i) then i <br>\nelse s))) = m\" <br>\nby (metis locationType.distinct(3))</p>\n<p>In Isabelle, it is tautology</p>\n<p>But accordingly, I have a z3 theory:</p>\n<p>(declare-datatypes () ((locationType m e s i ))) </p>\n<p>(declare-fun state (Int) locationType)<br>\n( assert (not (=&gt; true (= (ite (= (state 1) e) <br>\ns (ite (= (state 1) m) s (ite (= (state 1) i) i s ) ) ) m) ) ))<br>\n(check-sat)</p>\n<p>In z3, I get a counterExample:<br>\nsat (model (define-fun state ((x!1 Int)) locationType (ite (= x!1 1) e e)) )</p>\n<p>regards</p>\n<p><a href=\"mailto:lyj238@ios.ac.cn\">lyj238@ios.ac.cn</a></p>",
        "id": 294325964,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928544
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:thomas.sewell@nicta.com.au\">thomas.sewell@nicta.com.au</a>&gt;<br>\nDear lyj238.</p>\n<p>You have your SMT sat/unsat cases around the wrong way.</p>\n<p>In short, to \"prove\" a fact in SMT-land, you must assert its <em>negation</em><br>\nand observe unsatisfiability.</p>\n<p>If you assert a true fact, this changes nothing, the world is still<br>\nsatisfiable, and any model will do. That's what you've done here.</p>\n<p>Your equality ((if-then-else expression) = m) is always false. Thus its<br>\nnegation is a tautology in Isabelle.</p>\n<p>In SMT-land, it is always false, thus (not (=&gt; true (= (ite-expression) m)))<br>\n   is equal to (not (=&gt; true false))<br>\n   and to (true).</p>\n<p>Cheers,<br>\n     Thomas.</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294327243,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928992
    }
]