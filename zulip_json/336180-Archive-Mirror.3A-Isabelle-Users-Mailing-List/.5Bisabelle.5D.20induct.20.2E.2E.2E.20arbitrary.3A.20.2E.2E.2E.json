[
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:christian.sternagel@uibk.ac.at\">christian.sternagel@uibk.ac.at</a>&gt;<br>\nHi there!</p>\n<p>I'm a bit puzzled by the behavior of arbitrary for induct. After the <br>\ninitial proof part</p>\n<p>lemma success_sequenceI:<br>\n   assumes \"!!m s. m : set ms ==&gt; success m s\"<br>\n   shows \"success (sequence ms) s\"<br>\nusing assms proof (induct ms arbitrary: s)<br>\n   case Nil thus ?case by (auto intro!: success_intros)<br>\nnext</p>\n<p>I have to prove</p>\n<p>!!a ms x.<br>\n   [|!!x. (!!m x. m : set ms ==&gt; success m x)<br>\n       ==&gt; success (sequence ms) x;<br>\n     !!m x. m : set (a # ms) ==&gt; success m x|]<br>\n   ==&gt; success (sequence (a # ms)) x</p>\n<p>which is as expected (note the nested bindings of x). However, after the <br>\nfurther step</p>\n<p>case (Cons m ms)</p>\n<p>I obtain the facts (this:)</p>\n<p>(!!m x. m : set ms ==&gt; success m x) ==&gt; success (sequence ms) ?x<br>\n   ?m : set (m # ms) ==&gt; success ?m ?x</p>\n<p>So the x's which where originally different are now required to be the <br>\nsame. Do I miss something here?</p>\n<p>PS: I only succeeded in the proof after transforming the lemma into:</p>\n<p>assumes \"!!m s. m : set ms ==&gt; success m s\"<br>\nshows \"ALL s. success (sequence ms) s\"</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294132457,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843317
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nChristian,</p>\n<p>Those '?x's are not required to be the same. You are not seeing two<br>\noccurrences of ?x in the same goal state here; those are two<br>\ncompletely separate local theorems. At this point in your proof, you<br>\ncan say the following to instantiate them differently:</p>\n<p>thm Cons.hyps [where x=a]<br>\nthm Cons.prems [where x=b]</p>\n<p>Here's another unrelated hint about using induct/arbitrary in<br>\nstructured proofs: You can fix the name of the generalized variables<br>\nby using the \"case\" command with an extra name:</p>\n<p>using assms proof (induct ms arbitrary: s)<br>\ncase (Nil s)<br>\n...<br>\ncase (Cons m ms s)<br>\n...</p>\n<p>Otherwise in your case this variable defaults to the name \"x\", which I<br>\nsuppose is a bit less meaningful. Look at \"Isabelle &gt; Show Me &gt; Cases\"<br>\nin Proof General for details.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294132505,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843323
    }
]