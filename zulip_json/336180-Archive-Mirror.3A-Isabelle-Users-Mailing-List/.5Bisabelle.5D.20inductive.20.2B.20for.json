[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear list,</p>\n<p>it appears that in a \"for\" clause for inductive definitions, I can only<br>\nlist the parameters in their respective order. That is, I can't state<br>\nthat the second parameter of a definition remains unchanged. Is this<br>\nintentional? It means that now I have to either reshuffle all uses of my<br>\ndefinition or prove a custom induction rule.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294672527,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173824
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Lars,</p>\n<p>This is indeed a limitation of inductive. The canonical way around it is to define the <br>\nconstant with the order of arguments as required by inductive and simultaneously an <br>\nabbreviation which does the reshuffling. This looks as follows:</p>\n<p>inductive test' :: \"'a ⇒ nat ⇒ bool\"<br>\n   and test :: \"nat ⇒ 'a ⇒ bool\"<br>\nfor b<br>\nwhere<br>\n   \"test a b ≡ test' b a\"<br>\n| \"test 0 b\"<br>\n| \"test n b ⟹ test (Suc n) b\"</p>\n<p>thm test'.induct</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 294672546,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173831
    }
]