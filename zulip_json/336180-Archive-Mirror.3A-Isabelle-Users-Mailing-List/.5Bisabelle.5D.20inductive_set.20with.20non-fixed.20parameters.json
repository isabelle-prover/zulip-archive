[
    {
        "content": "<p>From: Julian Brunner &lt;<a href=\"mailto:julianbrunner@gmail.com\">julianbrunner@gmail.com</a>&gt;<br>\nDear all,</p>\n<p>I would like to inductively define a set as follows:</p>\n<p>locale transition_system =<br>\n  fixes en :: \"'state =&gt; 'transition set\"<br>\n  fixes ex :: \"'transition =&gt; 'state =&gt; 'state\"<br>\nbegin</p>\n<p>inductive_set paths :: \"'state =&gt; 'transition list set\" where<br>\n    \"[] : paths p\" | \"a : en p ==&gt; w : paths (ex a p) ==&gt; a # w : paths p\"</p>\n<p>end</p>\n<p>I get the error \"Argument types ['state] of paths do not agree with types<br>\n[] of declared parameters\" (added brackets for clarity). However, I cannot<br>\ndeclare this parameter using a for clause, since it is not fixed (\"ex a p\"<br>\nvs. \"p\").</p>\n<p>I was under the impression that the inductive_set command simply uses<br>\ninductive to define a predicate and then composes this predicate with<br>\nCollect to obtain the set representation. However, it seems that<br>\ninductive_set is strictly weaker than inductive.</p>\n<p>As of now, I am working around this by doing what I thought inductive_set<br>\nwas doing by hand. However, this results in quite a lot of boilerplate<br>\nsince all the introduction, elimination and induction rules have to be<br>\ntransferred by hand. Is there a reason why the inductive_set command cannot<br>\ndo this for me?</p>\n<p>Julian</p>",
        "id": 294649779,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165638
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Julian,</p>\n<p>This restriction is well-known and just a matter of not having ever been implemented. <br>\nHistorically, inductive_set existed before inductive and at that time, the implementation <br>\ncould not handle non-fixed parameters. Later, the more general inductive has been <br>\nimplemented and inductive_set was replaced with a wrapper around inductive. The wrapper <br>\nwas designed just to support whatever the old inductive_set could do. However, there is no <br>\nreason for inductive_set not being able to handle changing parameters. It is just a matter <br>\nof generalising the implementation. If you have time to attack this, I guess many people <br>\nwill be happy (including me).</p>\n<p>I've mentioned the restriction in <br>\n<a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2015-February/msg00038.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2015-February/msg00038.html</a> and <br>\ngave a few examples in <br>\n<a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2015-May/msg00084.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2015-May/msg00084.html</a>. The latter <br>\npost also contains an example how to emulate the behaviour of inductive_set without too <br>\nmuch trouble. A preliminary version of this can be found in one of my posts on stackoverflow<br>\n<a href=\"http://stackoverflow.com/a/16604803\">http://stackoverflow.com/a/16604803</a></p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294649784,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165641
    }
]