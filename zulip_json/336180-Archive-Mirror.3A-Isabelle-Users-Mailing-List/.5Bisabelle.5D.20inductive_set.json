[
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:christian.sternagel@uibk.ac.at\">christian.sternagel@uibk.ac.at</a>&gt;<br>\nHi all,</p>\n<p>I have a question concerning `inductive_set'. After defining an <br>\ninductive set (the following set is just to demonstrate my point, hence <br>\nits definition is not too important):</p>\n<p>inductive_set S :: \"('a * 'a)set\" where [intro]: \"(x,x) : S\"</p>\n<p>I get the set</p>\n<p>S :: \"('a * 'a)set\"</p>\n<p>and a predicate version</p>\n<p>Sp :: \"'a =&gt; 'a =&gt; bool\"</p>\n<p>and after proving lemmas using e.g., Sp, I can transform them to lemmas <br>\nfor S using the attribute [to_set] as in,</p>\n<p>lemma refl: \"Sp x x\" by simp</p>\n<p>lemma \"(x,x) : S\" using refl[to_set] .</p>\n<p>So far so good. However, I was not able to find a method to directly <br>\ntransform facts like <code>(a,b) : S</code> into <code>Sp a b</code> and vice versa. I'm sure <br>\nthere is some automatic way (currently I always have to use the <br>\ninduction scheme of the predicate to proof membership in the set and the <br>\nother way round; but such proofs do not run through automatically, I <br>\nhave to explicitly provide the intro-rules) to do so?</p>\n<p>cheers</p>\n<p>christian</p>",
        "id": 294072521,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660827671
    },
    {
        "content": "<p>From: Stefan Berghofer &lt;<a href=\"mailto:berghofe@in.tum.de\">berghofe@in.tum.de</a>&gt;<br>\nChristian Sternagel wrote:</p>\n<blockquote>\n<p>and after proving lemmas using e.g., Sp, I can transform them to lemmas<br>\nfor S using the attribute [to_set] as in,</p>\n<p>lemma refl: \"Sp x x\" by simp</p>\n<p>lemma \"(x,x) : S\" using refl[to_set] .</p>\n</blockquote>\n<p>Hi,</p>\n<p>note that inductive_set already proves both the set and the predicate version<br>\nof the intro, cases, and induct rules for you, so there is no need to prove<br>\nthem manually. For example, if you define</p>\n<p>inductive_set S :: \"('a * 'a)set\" where refl: \"(x,x) : S\"</p>\n<p>you get the following theorems:</p>\n<p>S.refl:    (x, x) : S<br>\nSp.refl:   S x x<br>\nS.induct:  [| (x1, x2) : S; !!x. P x x |] ==&gt; P x1 x2<br>\nSp.induct: [| Sp x1 x2; !!x. P x x |] ==&gt; P x1 x2</p>\n<p>The [to_set] attribute and the inverse [to_pred] attribute are only needed<br>\nfor transforming more complex theorems that have been derived from the above<br>\nprimitive rules (as it is done e.g. in HOL/Transitive_Closure.thy).</p>\n<blockquote>\n<p>So far so good. However, I was not able to find a method to directly<br>\ntransform facts like <code>(a,b) : S</code> into <code>Sp a b</code> and vice versa.</p>\n</blockquote>\n<p>What exactly do you mean by \"directly\"? I could not think of a more<br>\n\"direct\" way than the application of an attribute. It is a bit unclear<br>\nto me why do you need both the set and the predicate version of your<br>\ndefinition in the same theory. It might be easier to stick to a particular<br>\nnotation, e.g. the predicate notation, which is usually more lightweight.</p>\n<p>Greetings,<br>\nStefan</p>",
        "id": 294072538,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660827677
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:christian.sternagel@uibk.ac.at\">christian.sternagel@uibk.ac.at</a>&gt;<br>\nStefan Berghofer wrote:</p>\n<blockquote>\n<p>Christian Sternagel wrote:</p>\n<blockquote>\n<p>and after proving lemmas using e.g., Sp, I can transform them to lemmas<br>\nfor S using the attribute [to_set] as in,</p>\n<p>lemma refl: \"Sp x x\" by simp</p>\n<p>lemma \"(x,x) : S\" using refl[to_set] .</p>\n</blockquote>\n<p>Hi,</p>\n<p>note that inductive_set already proves both the set and the predicate version<br>\nof the intro, cases, and induct rules for you, so there is no need to prove<br>\nthem manually. For example, if you define<br>\nThe example lemmas are admittedly badly chosen.</p>\n<p>inductive_set S :: \"('a * 'a)set\" where refl: \"(x,x) : S\"</p>\n<p>you get the following theorems:</p>\n<p>S.refl:    (x, x) : S<br>\nSp.refl:   S x x<br>\nS.induct:  [| (x1, x2) : S; !!x. P x x |] ==&gt; P x1 x2<br>\nSp.induct: [| Sp x1 x2; !!x. P x x |] ==&gt; P x1 x2</p>\n<p>The [to_set] attribute and the inverse [to_pred] attribute are only needed<br>\nfor transforming more complex theorems that have been derived from the above<br>\nprimitive rules (as it is done e.g. in HOL/Transitive_Closure.thy).</p>\n<blockquote>\n<p>So far so good. However, I was not able to find a method to directly<br>\ntransform facts like <code>(a,b) : S</code> into <code>Sp a b</code> and vice versa.</p>\n</blockquote>\n<p>What exactly do you mean by \"directly\"? I could not think of a more<br>\n\"direct\" way than the application of an attribute.<br>\nSorry, I overlooked something obvious ( :) ), namely that I can apply <br>\nattributes within proofs. If I have <code>(a,b) : S</code>, I can of course use <br>\n<code>(a,b) : S</code>[to_pred] to get \"Sp a b\". My fault.</p>\n</blockquote>\n<p>thnx a lot,</p>\n<p>christian</p>\n<blockquote>\n<p>It is a bit unclear<br>\nto me why do you need both the set and the predicate version of your<br>\ndefinition in the same theory. It might be easier to stick to a particular<br>\nnotation, e.g. the predicate notation, which is usually more lightweight.</p>\n<p>Greetings,<br>\nStefan<br>\n</p>\n</blockquote>",
        "id": 294072579,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660827689
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:christian.sternagel@uibk.ac.at\">christian.sternagel@uibk.ac.at</a>&gt;<br>\nHi there,</p>\n<p>apparently inductive_set does modify ALL occurrences of inductive <br>\npredicates stemming from other inductive_set commands inside intro rules <br>\nas if the attribute [to_set] was used. Is this wanted / necessary / on <br>\npurpose? Can I prevent it? :)</p>\n<p>A minimal (and therefore nonsensical) example:</p>\n<p>inductive_set foo :: \"('a * 'a) set\"<br>\n   where \"(a, b) : foo\"</p>\n<p>inductive_set bar :: \"('a * 'a) set\"<br>\n   where \"foop a b ==&gt; (a, b) : bar\"</p>\n<p>Here I obtain bar.intros</p>\n<p>\"(?a, ?b) : foo ==&gt; (?a, ?b) : bar</p>\n<p>but I would rather like to have</p>\n<p>\"foop ?a ?b ==&gt; (?a, ?b) : bar\"</p>\n<p>(that is, what I have written in the definition).</p>\n<p>best regards</p>\n<p>chris</p>",
        "id": 294117323,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838674
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Christian,</p>\n<p>according to the sources inductive_set seems indeed to behave like that.<br>\n You may call this a bug or a feature.</p>\n<p>The rules used for to_set / to_pred conversions are added using<br>\nattribute pred_set_conv.  Unfortunately, this only allows addition, not<br>\nremoval, preventing an ad-hoc solution for your problem.  Maybe we have<br>\nto think about that.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/7cRbJ3daRN6ygb5aC2b_b-l6/signature.asc\">signature.asc</a></p>",
        "id": 294117377,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838693
    },
    {
        "content": "<p>From: <a href=\"mailto:berghofe@in.tum.de\">berghofe@in.tum.de</a><br>\nQuoting Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;:</p>\n<p>Hi Christian and Florian,</p>\n<p>note that the purpose of inductive_set is mainly to make existing  <br>\ntheories using<br>\nthe old set notation work with the new inductive definition package. The only<br>\npromise we are making is that everything that used to work with the old<br>\ninductive command will also work with inductive_set. If you are using the<br>\nnew \"...p\" predicates introduced by inductive_set to achieve some special<br>\neffects, you are on your own, i.e. it may or may not work as you expect.</p>\n<p>Greetings,<br>\nStefan</p>",
        "id": 294117753,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838787
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:christian.sternagel@uibk.ac.at\">christian.sternagel@uibk.ac.at</a>&gt;<br>\nThnx for your replies,</p>\n<p>Does that mean that the general recommendation is to use \"inductive\" <br>\ninstead of \"inductive_set\"? From the documentation (isar-ref) it was not <br>\nobvious to me that \"inductive_set\" is something bad :)</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294117761,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838791
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nInductive_set is not bad and will not disappear.</p>\n<p>Tobias</p>\n<p>Christian Sternagel schrieb:</p>",
        "id": 294117793,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838803
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:christian.sternagel@uibk.ac.at\">christian.sternagel@uibk.ac.at</a>&gt;<br>\nHi all,</p>\n<p>good to know. Nevertheless, I tried to get rid of the \"...p\" predicates <br>\nprovided of my inductive sets. After most of the changes went through <br>\nwithout problems, I now know again, why I originally used \"...p\" <br>\npredicates. It was just in order for \"...\" in calculational reasoning to <br>\nwork.</p>\n<p>In my concrete example I use the proper subterm relation on first-order <br>\nterms. It is now defined as inductive set \"supt\" such that \"(s, t) : <br>\nsupt\" means that s is a superterm of t. Additionally there is an <br>\nabbreviation \"s |&gt; t\" standing for \"(s, t) : supt\".</p>\n<p>In calculational reasoning I want to do steps like</p>\n<p>have \"s |&gt; t\" sorry<br>\n   also have \"... |&gt; u\" sorry</p>\n<p>but this doesn't work since the dots do not refer to \"t\" of the first <br>\nstatement. Can I somehow influence what \"...\" refers to for special <br>\nconstants? Or is there any other easy way to make this work (previously <br>\n\"s |&gt; t\" was an abbreviation for \"suptp s t\" and hence \"...\" referred to <br>\n\"t\").</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294117810,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838809
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nQuite independent of inductive_set, I have on occasion wished I could<br>\nuse \"...\" to denote particular subterms other than in the default setup.<br>\nBut this would require a change to Isar and one would need a new concept<br>\nfor describing \"...\" positions in terms.</p>\n<p>For the time being I recommend to use (is \"_ |&gt; ?t\") to create your own<br>\n\"...\" in each step. The overhead is bearable, and you can even reuse ?t<br>\nin each step and do not have to use ?t1, ?t2 etc.</p>\n<p>Tobias</p>\n<p>Christian Sternagel schrieb:</p>",
        "id": 294117823,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838816
    }
]