[
    {
        "content": "<p>From: Sean McLaughlin &lt;<a href=\"mailto:seanmcl@cmu.edu\">seanmcl@cmu.edu</a>&gt;<br>\nHello,</p>\n<p>How do you get at the theorems which prove the \"instance\" calls?<br>\nEg. the proof term for</p>\n<p>instance * :: (finite, finite) finite<br>\nproof<br>\n   show \"finite (UNIV :: ('a ◊ 'b) set)\"<br>\n   proof (rule finite_Prod_UNIV)<br>\n     show \"finite (UNIV :: 'a set)\" by (rule finite)<br>\n     show \"finite (UNIV :: 'b set)\" by (rule finite)<br>\n   qed<br>\nqed</p>\n<p>Thanks,</p>\n<p>Sean</p>",
        "id": 293899788,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660743997
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@rsise.anu.edu.au\">Jeremy.Dawson@rsise.anu.edu.au</a>&gt;<br>\nfrom Sean McLaughlin:</p>\n<p>Hello,</p>\n<p>How do you get at the theorems which prove the \"instance\" calls?<br>\nEg. the proof term for</p>\n<p>instance * :: (finite, finite) finite<br>\nproof<br>\n   show \"finite (UNIV :: ('a � 'b) set)\"<br>\n   proof (rule finite_Prod_UNIV)<br>\n     show \"finite (UNIV :: 'a set)\" by (rule finite)<br>\n     show \"finite (UNIV :: 'b set)\" by (rule finite)<br>\n   qed<br>\nqed</p>\n<p>Thanks,</p>\n<p>Sean</p>\n<p>Firstly - which I try to reply to Sean's email,<br>\nI get a window full of gibberish (this is on Mozilla thunderbird),<br>\ndoes anyone else have this problem?  or know what is different about <br>\nSean's email?</p>\n<p>Secondly:</p>\n<p>I'm not aware of how you can get the actual theorems,<br>\nbut I think the information you want is printed by<br>\nprint_theory  (I'm not sure, because that command produces more output <br>\nthan my terminal window's scroll buffer).</p>\n<p>So what I do is:</p>\n<p>(* print theory or parts of it *)<br>\nfun pfthy thy =<br>\n   let<br>\n     val ptl as [ names, theory_data, proof_data, name_prefix,<br>\n         classes, default, witness, syntactic, logical, arities,<br>\n         consts, finals, axioms, oracles ] =<br>\n       Display.pretty_full_theory thy ;<br>\n     in { all = ptl, names = names, theory_data = theory_data,<br>\n       proof_data = proof_data, name_prefix = name_prefix,<br>\n       classes = classes, default = default, witness = witness,<br>\n       syntactic = syntactic, logical = logical, arities = arities,<br>\n       consts = consts, finals = finals, axioms = axioms, oracles = <br>\noracles }<br>\n       end ;</p>\n<p>show_path () ;<br>\nval _ = print \"end of gen.ML\" ;</p>\n<p>(*<br>\nval pthy = pfthy thy ;<br>\nPretty.writelns (#all pthy) ;<br>\nPretty.writeln (#proof_data pthy) ;<br>\nPretty.writeln (#arities pthy) ;</p>\n<p>Pretty.writeln (#classes pthy) ;<br>\n*)</p>\n<p>The line<br>\nPretty.writeln (#classes pthy) ;<br>\ngives the information I assume you want:<br>\n(since the subclass relation is transitive there are a lot more<br>\nsubclass relations than those proved as instance theorems).</p>\n<p>Pretty.writeln (#arities pthy) ;<br>\ngives the information about types being members of classes, again,<br>\nthose actually proved as instance theorems and their consequences</p>\n<p>Jeremy</p>",
        "id": 293899798,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660743999
    }
]