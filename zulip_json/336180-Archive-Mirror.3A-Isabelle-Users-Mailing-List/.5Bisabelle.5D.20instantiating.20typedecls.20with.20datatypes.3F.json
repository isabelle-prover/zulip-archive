[
    {
        "content": "<p>From: Thomas Bleher &lt;<a href=\"mailto:bleher@informatik.uni-muenchen.de\">bleher@informatik.uni-muenchen.de</a>&gt;<br>\nHi all,</p>\n<p>I'm currently playing with David von Oheimb's Noninterference package<br>\n(see <a href=\"http://david.von-oheimb.de/cs/HOL/NI/\">http://david.von-oheimb.de/cs/HOL/NI/</a>, all the files are attached)</p>\n<p>This package defines some types and functions, and states which<br>\nproperties these must fulfill in order for the system to be secure.</p>\n<p>It looks like this (see System.thy):<br>\n  typedecl \"state\"<br>\n  typedecl \"action\"<br>\n  typedecl \"domain\"<br>\n  consts   step :: \"action =&gt;  state =&gt; state\"<br>\n  (* many more functions... *)</p>\n<p>Now I want to develop a small theory and prove it secure. (see Test.thy)</p>\n<p>To do this, I have to instantiate the functions and types.<br>\nFor functions, this is no problem (I just use primrec), but for types<br>\n(where I need something like 'datatype \"domain\" = H | L' ) I found no<br>\nsane solution.</p>\n<p>I'd like to do something like:<br>\n  datatype \"domain2\" = H | L<br>\n  axioms<br>\n  domaintype: \"domain == domain2\"<br>\nand make domain and domain2 identical, but I found no way to do this.<br>\n(And I'm not sure if it's possible without introducing inconsistencies).</p>\n<p>I know that I could use axioms to describe the type I want, but this is<br>\nawfully hard compared to datatypes.<br>\nFor now I resorted to modifying 'System.thy' directly, but I don't think<br>\nthat's a good solution in the long term.</p>\n<p>Is what I want possible with Isabelle?<br>\nHow should I change the theory to make it easy to instantiate it without<br>\nmodifying the parent theory?</p>\n<p>Thanks in advance,<br>\nThomas</p>\n<p>PS: PVS has this neat feature where you can say \"theory 'a List begin<br>\n... end\" and later instantiate the theory with a concrete type (\"import<br>\nnat List\", not sure about the exact syntax). I'm hoping that Isabelle<br>\nhas something similar.</p>",
        "id": 294043721,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816406
    },
    {
        "content": "<p>From: Thomas Bleher &lt;<a href=\"mailto:bleher@informatik.uni-muenchen.de\">bleher@informatik.uni-muenchen.de</a>&gt;</p>\n<ul>\n<li>Thomas Bleher &lt;<a href=\"mailto:bleher@informatik.uni-muenchen.de\">bleher@informatik.uni-muenchen.de</a>&gt; [2006-11-06 13:01]:<br>\nSorry, forgot to attach the files, fixed now.</li>\n</ul>\n<p>Thomas<br>\n<a href=\"/user_uploads/14278/U-3kZJUCyR5nIf-IqszTS28Y/Test.thy\">Test.thy</a><br>\n<a href=\"/user_uploads/14278/q9sqmgn1OuY2GFY1gvSkUNkn/System.thy\">System.thy</a><br>\n<a href=\"/user_uploads/14278/xaqG5P0QF-kfdcKpEXYiidQ3/Generics.thy\">Generics.thy</a><br>\n<a href=\"/user_uploads/14278/aYytKoaLyyMDc0T7TzqN9qjw/Noninterference.thy\">Noninterference.thy</a><br>\n<a href=\"/user_uploads/14278/uw6GS6VAhQ61ICTAadcC1Ie9/Nonleakage.thy\">Nonleakage.thy</a><br>\n<a href=\"/user_uploads/14278/K6DzvXzzLqOnWuDBjA2hg6xK/Noninfluence.thy\">Noninfluence.thy</a></p>",
        "id": 294043735,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816412
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nYou cannot instantiate later on types that were only declared. You will <br>\nhave to modify the generic theory. A relatively simple change is to make <br>\nthe theory polymorphic in all those types: Remove the typedecls and <br>\nreplace occurrences of those types by type variables, eg</p>\n<p>consts   step :: \"'action =&gt; 'state =&gt; 'state\"</p>\n<p>Datatypes may need to become parameterized, eg</p>\n<p>datatype 'action foo = Bar 'action | ...</p>\n<p>In a nutshell: generic theories need to be written with genericity in <br>\nmind and should be updated if they were not written in that way.</p>\n<p>Tobias</p>\n<p>Thomas Bleher schrieb:</p>",
        "id": 294043773,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816429
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 6 Nov 2006, Thomas Bleher wrote:</p>\n<blockquote>\n<p>I'm currently playing with David von Oheimb's Noninterference package<br>\n(see <a href=\"http://david.von-oheimb.de/cs/HOL/NI/\">http://david.von-oheimb.de/cs/HOL/NI/</a>, all the files are attached)</p>\n</blockquote>\n<blockquote>\n<p>typedecl \"state\"<br>\n  typedecl \"action\"<br>\n  typedecl \"domain\"</p>\n</blockquote>\n<blockquote>\n<p>To do this, I have to instantiate the functions and types.</p>\n</blockquote>\n<p>This technique seems to come from David's Bali theories, e.g. see <br>\n<a href=\"http://isabelle.in.tum.de/dist/library/HOL/Bali/Example.html\">http://isabelle.in.tum.de/dist/library/HOL/Bali/Example.html</a> how the <br>\npreviously declared types tnam, vname etc. are instantiated <br>\n(axiomatically!).</p>\n<blockquote>\n<p>Is what I want possible with Isabelle? How should I change the theory to <br>\nmake it easy to instantiate it without modifying the parent theory?</p>\n</blockquote>\n<p>The Isabelle framework is able to support specifications depending on <br>\nsimple type parameters (not general constructors), arbitrary term <br>\nparameters, and arbitrary proof parameters (assumptions).  The locale <br>\npackage provides some user-level infrastructure on top of this.  There is <br>\nongoing work to turn this into full-blown structured specification <br>\nparadigm, where definitions and theorems can depend on type/term/proof <br>\nparameters and can be instantiated later on.</p>\n<p>Since the HOL/NI material is for Isabelle2004 only, this won't help you <br>\nright now, of course.  Nevertheless, it would be an interesting case-study <br>\nto adapt these theories to our forthcoming structuring concepts, but the <br>\nnon-free license seems to prevent this, i.e. David has to get involved <br>\ndirectly.</p>\n<p>Makarius</p>",
        "id": 294043792,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816435
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nSince David specifically says that \"any non-commercial use is granted\", <br>\nThomas is free to use and modify the theories in his research.</p>\n<p>Tobias</p>",
        "id": 294043864,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816453
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe key question is what happens with the modifications.</p>\n<p>Makarius</p>",
        "id": 294043884,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816459
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 7 Nov 2006, Thomas Bleher wrote:</p>\n<blockquote>\n<p>Are the \"structuring concepts\" you're referring to already available in <br>\nCVS?</p>\n</blockquote>\n<p>We are still working on it.</p>\n<blockquote>\n<p>I'm already adapting all the theories to work with the latest Isabelle, <br>\nso I could look into this as well.</p>\n</blockquote>\n<p>I would recommend using Isabelle2005 at the moment, unless you want to try <br>\ncatching up with huge amounts of transient changes every few days which <br>\nare mostly reflected in the ChangeLog only.</p>\n<p>Makarius</p>",
        "id": 294043930,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816477
    },
    {
        "content": "<p>From: John Matthews &lt;<a href=\"mailto:matthews@galois.com\">matthews@galois.com</a>&gt;<br>\nHi Thomas,</p>\n<p>You might also want to consider the AWE extensions pack for Isabelle  <br>\n2005:</p>\n<p><a href=\"http://www.tzi.de/~cxl/awe\">http://www.tzi.de/~cxl/awe</a></p>\n<p>Among other things, it safely provides theory morphisms, so that you  <br>\ncan instantiate constant and type parameters in theories, like the  <br>\nones you want. It also allows you to instantiate the *type  <br>\nconstructor* parameters of a theory, which are not supported by  <br>\nIsabelle's locale mechanism. Type constructor parameters are needed,  <br>\nfor example, to support reusable theories of monads.</p>\n<p>You can download the software itself at:</p>\n<p><a href=\"http://www.tzi.de/~cxl/awe/software.html\">http://www.tzi.de/~cxl/awe/software.html</a></p>\n<p>(Note that I'm not involved with the AWE project, I just like the way  <br>\nit supports theory morphisms in Isabelle.)</p>\n<p>Cheers,<br>\n-john</p>",
        "id": 294043939,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816484
    },
    {
        "content": "<p>From: Thomas Bleher &lt;<a href=\"mailto:bleher@informatik.uni-muenchen.de\">bleher@informatik.uni-muenchen.de</a>&gt;</p>\n<ul>\n<li>Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; [2006-11-07 14:34]:<br>\nI forgot to mention this in my first mail, but I'm working on this as<br>\npart of my diploma thesis. David is my tutor and has already expressed<br>\ninterest in eventually including his theories (noninterference and all<br>\nthe ism stuff) into Isabelle, so I think we will find a solution to<br>\nthis.</li>\n</ul>\n<p>Are the \"structuring concepts\" you're referring to already available<br>\nin CVS? I'm already adapting all the theories to work with the latest<br>\nIsabelle, so I could look into this as well.</p>\n<p>Thanks for all your pointers, they really helped me!</p>\n<p>Thomas</p>",
        "id": 294043950,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816490
    }
]