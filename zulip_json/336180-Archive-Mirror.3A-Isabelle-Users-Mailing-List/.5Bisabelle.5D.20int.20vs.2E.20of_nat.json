[
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nHello all,</p>\n<p>Isabelle's standard library has two different coercions from the naturals to <br>\nthe integers: IntDef.thy defines \"int::nat=&gt;int\" which is monomorphic, and <br>\nNat.thy defines \"of_nat::nat=&gt;'a\" which coerces from naturals into an <br>\narbitrary semiring. At type \"nat=&gt;int\" they both mean exactly the same thing <br>\n(see lemma IntDef.int_eq_of_nat). The only difference is that they are each <br>\nset up with different sets of simp rules.</p>\n<p>My question is, why do we have both? If any of you have chosen to use one over <br>\nthe other, which one did you choose, and why?</p>\n<p>Unless there is a compelling reason to keep both, I would propose to either <br>\nmake \"int\" an abbreviation for \"of_nat::nat=&gt;int\", or just eliminate it <br>\naltogether. Also, if users prefer the way the simplifier works with \"int\", <br>\nthen the simp rules for \"of_nat\" should be changed accordingly.</p>\n<p>I could also ask the same thing about the overloaded function \"real::'a=&gt;real\" <br>\nfrom the HOL-Complex library, which is redundant with \"of_nat::nat=&gt;real\" and <br>\n\"of_int::int=&gt;real\" at those types. Do we need separate constants for these?</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294049624,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660818855
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThe duplication is not intentional and it would be nice to eliminate it. <br>\n    One could choose either \"ty :: 'a =&gt; ty\" or \"of_ty :: ty =&gt; 'a\" as <br>\nprimitive (int::nat=&gt;int should have been int::'a=&gt;int) and relate them <br>\nvia (ty :: ty' =&gt; ty) = (of_ty' :: ty' =&gt; ty) for specif ty and ty'.</p>\n<p>Function ty :: 'a =&gt; ty has the advantage of being the familiar one <br>\nwhereas of_ty is somewhat unusual. However, I gather that of_ty often <br>\nallows to formulate polymorphic theorems whereas ty does not.</p>\n<p>Maybe one could combine both advantages: of_ty is the primitive, but <br>\nmonomorphic instances are printed as ty (and ty is also allowed upon input).</p>\n<p>Tobias</p>\n<p>Brian Huffman wrote:</p>",
        "id": 294049636,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660818857
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThe reasons are historical. Function \"int\" belongs to the original  <br>\nconstruction of the integers. When (a few years ago) I reworked the  <br>\nnumeric types to take advantage of type classes, I realised that a  <br>\npolymorphic \"of_nat\" function could easily be defined. Naturally most  <br>\ndevelopments should use of_nat rather than int, but function \"int\"  <br>\nappears to be necessary to develop the integers in the first place  <br>\nand to establish the type class axioms.</p>\n<p>Note that \"of_nat\" has a single polymorphic definition. There is a  <br>\nsimilar function of_int, and we could easily define of_rat too, all  <br>\nusing type classes. On the other hand, \"real\" is merely an overloaded  <br>\nconstant, which is far less attractive.</p>\n<p>Larry</p>",
        "id": 294049645,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660818863
    }
]