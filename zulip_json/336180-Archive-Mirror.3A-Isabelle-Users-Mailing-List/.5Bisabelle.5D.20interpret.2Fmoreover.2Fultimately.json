[
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c-sterna@jaist.ac.jp\">c-sterna@jaist.ac.jp</a>&gt;<br>\nHi there,</p>\n<p>recently I experienced some strange behavior (Isabelle2011-1 in jedit) <br>\nwhich is reproduced in the small example below:</p>\n<p>notepad begin<br>\n   fix l le B<br>\n   interpret preorder l le sorry<br>\n   moreover have \"B\" sorry<br>\n   ultimately have \"class.preorder l le &amp; B\" by blast<br>\nend</p>\n<p>in the \"ultimately\" line but before \"by blast\", the current state looks <br>\nas follows:</p>\n<p>proof (prove): step 8</p>\n<p>using this:<br>\n   class.preorder l le<br>\n   B</p>\n<p>goal (1 subgoal):</p>\n<p>1. class.preorder l le &amp; B</p>\n<p>but blast (and auto, .., simp, force, best, ...) does not solve the <br>\ngoal. If I write instead</p>\n<p>notepad begin<br>\n   fix l le B<br>\n   interpret preorder l le sorry<br>\n   have \"B\" sorry<br>\n   from <code>class.preorder l le</code> and <code>B</code><br>\n     have \"class.preorder l le &amp; B\" by blast<br>\nend</p>\n<p>everything works fine. The corresponding state is</p>\n<p>proof (prove): step 7</p>\n<p>using this:<br>\n   class.preorder l le<br>\n   B</p>\n<p>goal (1 subgoal):</p>\n<p>1. class.preorder l le âˆ§ B</p>\n<p>So the only immediately conceivable difference is \"step 7\" instead of <br>\n\"step 8\".</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294153427,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850199
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman@in.tum.de\">huffman@in.tum.de</a>&gt;<br>\nAt this point in your proof script, try</p>\n<p>ML_val {* Thm.concl_of @{thm this} *}</p>\n<p>and you will see that there is a constant \"prop :: prop =&gt; prop\"<br>\nwrapped around the conclusion of this fact, outside the \"Trueprop\".</p>\n<p>Then try</p>\n<p>ML_val {* Thm.concl_of @{thm <code>class.preorder l le</code>} *}</p>\n<p>And you will see that no \"prop\" constant is there.</p>\n<p>Perhaps Makarius can say more about what this \"prop\" constant is for,<br>\nand why it appears in the theorem exported by the interpret command.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294153440,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850205
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nLocale interpretation essentially needs to discharge \"hyps\" from local <br>\ntheorems, by establishing a suitable \"witness\".  To preserve the literal <br>\nstructure of the same, without the usual normalization of regular results, <br>\nthe internal goal statement is protected via the funny prop constant. <br>\n(This device is explained in the Isar implementation manual section 2.3.2; <br>\nit is useful for extraordinary situations in ML, but should normally never <br>\nbe encountered in end-user proof documents.)</p>\n<p>The confusion above stems from the accident that 'interpret' exposes this <br>\ninternal result to the Isar proof context via \"this\".  (I have gone <br>\nthrough all reachable Isabelle example and found a few more such <br>\nmisunderstandings, where forward chaining was done after 'interpret' <br>\nwithout any effect, and eliminated them.)</p>\n<p>Note that after \"interpret foobar\" the context knows about the fact <br>\n\"foobar_axioms\" in the proven instance; the same works for any other <br>\nimported substructures, not just part that was visible in the auxiliary <br>\ngoal state.</p>\n<p>Makarius</p>",
        "id": 294153774,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850328
    }
]