[
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nGiven a thm, a name, and an lthy, I’d like to “note” this thm such that it is declared as safe introduction rule. Roughly like</p>\n<p>declare name[intro!]</p>\n<p>What I currently have is</p>\n<p>ML {*<br>\nfun f .. lthy =<br>\nlet ..<br>\n    val intro = Attrib.internal (K (Context_Rules.intro_bang NONE));<br>\n    val lthy' = Local_Theory.notes [((<a href=\"http://Binding.name\">Binding.name</a> nm, [intro]), [([thm], [intro])])] lthy<br>\nin lthy’ end<br>\n*}</p>\n<p>local_setup {*<br>\n  f ..<br>\n*}</p>\n<p>thm name</p>\n<p>now shows the theorem, but it’s not declared as safe intro.</p>\n<p>What am I doing wrong?</p>\n<p>I’m not sure what the “int option” parameter is on intro_bang, and I’m also not sure why notes wants 2 lists of attributes, but that doesn’t seem to be the problem.</p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294331184,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660930311
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 26 Mar 2015, Gerwin Klein wrote:</p>\n<blockquote>\n<p>Given a thm, a name, and an lthy, I’d like to “note” this thm such that <br>\nit is declared as safe introduction rule. Roughly like</p>\n<p>declare name[intro!]</p>\n</blockquote>\n<p>Here is an example for Isabelle2015:</p>\n<p>experiment<br>\n   fixes A B C<br>\n   assumes a: A<br>\n     and b: B<br>\n     and c: C<br>\nbegin</p>\n<p>local_setup ‹<br>\n   let<br>\n     val b = @{binding test};<br>\n     val ths = @{thms a b c};<br>\n   in snd o Local_Theory.note ((b, @{attributes [intro!]}), ths) end<br>\n›</p>\n<p>thm test<br>\nlemma A B C by blast+</p>\n<p>end</p>\n<blockquote>\n<p>What I currently have is</p>\n<p>ML {*<br>\nfun f .. lthy =<br>\nlet ..<br>\n   val intro = Attrib.internal (K (Context_Rules.intro_bang NONE));<br>\n   val lthy' = Local_Theory.notes [((<a href=\"http://Binding.name\">Binding.name</a> nm, [intro]), [([thm], [intro])])] lthy<br>\nin lthy’ end<br>\n*}</p>\n<p>local_setup {*<br>\n f ..<br>\n*}</p>\n<p>thm name</p>\n<p>now shows the theorem, but it’s not declared as safe intro.</p>\n<p>What am I doing wrong?</p>\n</blockquote>\n<p>Hovering in PIDE over the formal text \"[intro!]\" shows that the standard <br>\nattribute is from the Classical module in HOL, not Context_Rules in Pure.</p>\n<p>More notes:</p>\n<p>* Local_Theory.note is a convenient shortcut for many situations.<br>\n     Tools should refrain from introducing further shortcuts without any<br>\n     good reason.  It obscures applications uncessarily when everybody has<br>\n     his proviate set of system operations.</p>\n<p>* Attrib.internal is a rather old form.  The @{attributes} antiquotation<br>\n     seen above supersedes that for all situations of constant attribute<br>\n     expressions, without ML arguments.  Most declaration attributes are of<br>\n     that form.</p>\n<p>* \"nm\" is a slightly of ML name for a \"name\"; normally letters \"a\" or<br>\n     \"b\" are used for that, or something more specific according to the<br>\n     meaning of the thing.</p>\n<p>I need to point this out explicitly, because I've spent significant<br>\n     time to sanitize the Eisbach sources in that respect.</p>\n<blockquote>\n<p>I’m not sure what the “int option” parameter is on intro_bang</p>\n</blockquote>\n<p>It is a priority for the Pure version of these attributes.  This is only <br>\nrelevant to the intuitionistic prover, and normally not relevant for <br>\nIsabelle/HOL applications.</p>\n<p>Makarius</p>",
        "id": 294643280,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163004
    }
]