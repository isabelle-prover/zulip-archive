[
    {
        "content": "<p>From: Palle Raabjerg &lt;<a href=\"mailto:palle.raabjerg@it.uu.se\">palle.raabjerg@it.uu.se</a>&gt;<br>\nHi all,</p>\n<p>With jEdit, I've been experiencing some weird, massive slowdowns <br>\noccasionally when I'm editing, and finally figured out why it happens. I <br>\nhave a habit of sometimes viewing the same buffer in two split frames. <br>\nIf I edit in the frame viewing a later part of the buffer, all is well. <br>\nBut if I start editing in the frame viewing an earlier part of the <br>\nbuffer than the other frame, it seems that every time I change something <br>\nin that frame, the parser will immediately try to re-process the file up <br>\nto the frame with the latest view of the buffer, causing a massive <br>\nslow-down.<br>\nNaturally, the larger the space between the two viewing frames, the <br>\nworse it gets.</p>\n<p>Knowing this, it's pretty easy to work around, but it would be nice not <br>\nto have to worry about it. Maybe it's just a question of having it <br>\nprocess only up to the frame that has focus, instead of the <br>\nlatest-viewing frame?</p>\n<p>Regards,</p>\n<ul>\n<li>Palle</li>\n</ul>",
        "id": 294247051,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909312
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Fri, 23 Aug 2013, Palle Raabjerg wrote:</p>\n<blockquote>\n<p>With jEdit, I've been experiencing some weird, massive slowdowns <br>\noccasionally when I'm editing, and finally figured out why it happens. I <br>\nhave a habit of sometimes viewing the same buffer in two split frames. <br>\nIf I edit in the frame viewing a later part of the buffer, all is well. <br>\nBut if I start editing in the frame viewing an earlier part of the <br>\nbuffer than the other frame, it seems that every time I change something <br>\nin that frame, the parser will immediately try to re-process the file up <br>\nto the frame with the latest view of the buffer, causing a massive <br>\nslow-down. Naturally, the larger the space between the two viewing <br>\nframes, the worse it gets.</p>\n</blockquote>\n<p>Note that is not \"the parser\", but the actual prover doing work in the <br>\nbackground.  It does many things apart from parsing, and it is surprising <br>\nto see how well that mode of \"continous proof checking\" already works in <br>\nIsabelle2013 with and most applications that I have seen.  Sometimes there <br>\nare very \"slow\" theories that spoil the game, though.</p>\n<p>Generally, the system tries to process the visible parts of the overall <br>\ncollection of theories, and what is required as imports for that.  There <br>\nare also some implicit policies about printing results depending on <br>\nvisibility -- often printing takes more time than proving.</p>\n<blockquote>\n<p>Knowing this, it's pretty easy to work around, but it would be nice not <br>\nto have to worry about it. Maybe it's just a question of having it <br>\nprocess only up to the frame that has focus, instead of the <br>\nlatest-viewing frame?</p>\n</blockquote>\n<p>The idea is indeed that the system takes care of the scheduling such that <br>\nthe user has as little to worry.  This will be again refined in the next <br>\nrelease (coming within the next few months, before the winter).  There <br>\nwill be also a few flags to switch off parts of the checking <br>\ndeclaratively, but it needs further experimentation how many \"controls\" <br>\nthe user can manage.  The system is no longer driven like a handcart as in <br>\nthe TTY / Proof General ago, but runs on its own at very high speed.</p>\n<p>I would rather not include window focus in any of the implicit policies, <br>\nsince this is not well-defined in the Java/Swing GUI framework.  Maybe <br>\nSun/Oracle had something specified in mind, but empirically focus is very <br>\nunreliable, sometimes lack of focus even locks-up the application.</p>\n<p>Makarius</p>",
        "id": 294247273,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909391
    }
]