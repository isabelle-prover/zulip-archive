[
    {
        "content": "<p>From: Dominic Mulligan via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi,</p>\n<p>The SML and Haskell backends of the Isabelle2016-1 code generator are<br>\nintroducing partial pattern matches which cause runtime failures.  I<br>\nthink I have narrowed down the cause to the generated functions<br>\nless_eq_set in both backends:</p>\n<p>less_eq_set :: forall a. (Eq a) =&gt; Set a -&gt; Set a -&gt; Bool;<br>\n    less_eq_set (Coset []) (Set []) = False;<br>\n    less_eq_set a (Coset ys) = all (\\ y -&gt; not (member y a)) ys;<br>\n    less_eq_set (Set xs) b = all (\\ x -&gt; member x b) xs;</p>\n<p>for Haskell, and</p>\n<p>fun less_eq_set A_ (Coset []) (Set []) = false<br>\n      | less_eq_set A_ a (Coset ys) = List.list_all (fn y =&gt; not<br>\n(member A_ y a)) ys<br>\n      | less_eq_set A_ (Set xs) b = List.list_all (fn x =&gt; member A_ x b) xs;</p>\n<p>in SML.  In particular, calling</p>\n<p>less_eq_set (Coset [1,2,3]) (Set [])</p>\n<p>will produce a runtime exception.</p>\n<p>The following small theory is sufficient to show the problem in both<br>\ngenerator backends:</p>\n<p>theory Test imports Main begin</p>\n<p>definition foo :: \"bool\" where<br>\n      \"foo ≡ (UNIV - {1::nat}) ⊆ {}\"</p>\n<p>export_code foo in Haskell<br>\n      module_name Test<br>\n    export_code foo in SML</p>\n<p>ML‹<br>\n      val it = @{code foo}<br>\n    ›</p>\n<p>end</p>\n<p>Thanks,<br>\nDominic</p>",
        "id": 294714563,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183331
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Dominic,</p>\n<p>This is a well-known problem. You cannot decide whether the complement of a set is a <br>\nsubset of an explicitly given set unless you know something more about the type, e.g., how <br>\nmany elements there are. The theory Cardinality in HOL/Library provides an implementation <br>\nin that direction, but it requires that every element type in use must instantiate the <br>\ntype class card_UNIV.</p>\n<p>In general, the code generator does not check for missing patterns and it provides only <br>\npartial correctness: If the generated code successfully evaluates to a result, then this <br>\nresult is correct.</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 294714566,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183333
    },
    {
        "content": "<p>From: Dominic Mulligan via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi Andreas,</p>\n<p>Oops, yes, thanks for pointing that out.  The card_UNIV approach you<br>\nmentioned fixed my issue.</p>\n<p>Thanks,<br>\nDominic</p>",
        "id": 294714617,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183349
    }
]