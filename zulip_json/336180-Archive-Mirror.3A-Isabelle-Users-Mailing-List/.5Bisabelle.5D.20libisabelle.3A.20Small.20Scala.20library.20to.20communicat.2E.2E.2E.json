[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear list,</p>\n<p>inspired by the obsoleted \"tty\" mode and a two-months old thread [1], I<br>\ndecided to implement a proof-of-concept library demonstrating the<br>\nminimum amount of code needed to manage and communicate with an Isabelle<br>\nprocess. You can find the code at</p>\n<p>&lt;<a href=\"https://github.com/larsrh/libisabelle\">https://github.com/larsrh/libisabelle</a>&gt;</p>\n<p>Right now this is just a weekend project, but I'm interested to hear<br>\nyour opinions and feature requests, or if you have any use case for this.</p>\n<p>Except for a working Isabelle installation (and ISABELLE_HOME set), the<br>\ncode is self-contained. You can reproduce a round-trip between Java and<br>\nML with the following instructions:</p>\n<p>1) Build an image of \"Hello_PIDE\"<br>\n   $ $ISABELLE_HOME/bin/isabelle build -d . -bv Hello_PIDE<br>\n2) Build the JAR file<br>\n   $ ./sbt full/assembly<br>\n3) Execute the example<br>\n   $ java -cp full/target/scala-2.11/libisabelle-full.jar Hello_PIDE</p>\n<p>What the above does is starting up an Isabelle instance, sending a<br>\ncommand, waiting for the reply, and tearing the instance down again. The<br>\ncode to achieve that is just 3 lines of Java and some more lines of ML<br>\nand can be found in the 'examples' folder.</p>\n<p>Right now, it supports the following:</p>\n<ul>\n<li>communicating with multiple Isabelle instances at the same time</li>\n<li>sending simple XML-based commands</li>\n<li>synchronous (for Java) and asynchronous (for Scala) API</li>\n</ul>\n<p>Possible extensions include:</p>\n<ul>\n<li>process lifecycle (error handling, cancellation of tasks)</li>\n<li>\n<p>session management (invocation of 'isabelle build' ahead-of-time and<br>\njust-in-time)</p>\n</li>\n<li>\n<p>support of multiple Isabelle versions (e.g. parallel operation of<br>\nIsabelle2014 and 2015)</p>\n</li>\n</ul>\n<p>Cheers<br>\nLars</p>\n<p>[1]<br>\n&lt;<a href=\"http://article.gmane.org/gmane.science.mathematics.logic.isabelle.user/10011\">http://article.gmane.org/gmane.science.mathematics.logic.isabelle.user/10011</a>&gt;</p>",
        "id": 294327409,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929048
    },
    {
        "content": "<p>From: Walther Neuper &lt;<a href=\"mailto:wneuper@ist.tugraz.at\">wneuper@ist.tugraz.at</a>&gt;</p>\n<blockquote>\n<p>I decided to implement a proof-of-concept library demonstrating the<br>\nminimum amount of code needed to manage and communicate with an Isabelle<br>\nprocess. You can find the code at</p>\n<p>&lt;<a href=\"https://github.com/larsrh/libisabelle\">https://github.com/larsrh/libisabelle</a>&gt;</p>\n</blockquote>\n<p>Thank you very much for this extensive work, it promises the survival of <br>\nour project!</p>\n<p>Your code presents lots of new stuff; I also studied system.pdf.<br>\nBut I got stuck with this:</p>\n<blockquote>\n<p>1) Build an image of \"Hello_PIDE\"<br>\n    $ $ISABELLE_HOME/bin/isabelle build -d . -bv Hello_PIDE<br>\nwhich results in:</p>\n</blockquote>\n<p>Started at Wed Feb 11 13:18:40 CET 2015 (polyml-5.5.2_x86-linux on ProBook)<br>\nISABELLE_BUILD_OPTIONS=\"\"</p>\n<p>ML_PLATFORM=\"x86-linux\"<br>\nML_HOME=\"/usr/local/Isabelle2014/contrib/polyml-5.5.2-1/x86-linux\"<br>\nML_SYSTEM=\"polyml-5.5.2\"<br>\nML_OPTIONS=\"-H 500\"</p>\n<p>*** Duplicate session \"RAW\" (line 3 of \"src/Pure/ROOT\") (line 3 of \"/usr/local/Isabelle2014/src/Pure/ROOT\")<br>\nFinished at Wed Feb 11 13:18:45 CET 2015<br>\n0:00:05 elapsed time, 0:00:04 cpu time</p>\n<p>Renaming \"RAW\" in \"pide-core/src/main/scala/Tools/build.scala\" renaming <br>\nis no way out; so what can I do ?</p>\n<p>Walther</p>",
        "id": 294327544,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929090
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>Started at Wed Feb 11 13:18:40 CET 2015 (polyml-5.5.2_x86-linux on ProBook)<br>\nISABELLE_BUILD_OPTIONS=\"\"</p>\n<p>ML_PLATFORM=\"x86-linux\"<br>\nML_HOME=\"/usr/local/Isabelle2014/contrib/polyml-5.5.2-1/x86-linux\"<br>\nML_SYSTEM=\"polyml-5.5.2\"<br>\nML_OPTIONS=\"-H 500\"</p>\n<p>*** Duplicate session \"RAW\" (line 3 of \"src/Pure/ROOT\") (line 3 of<br>\n\"/usr/local/Isabelle2014/src/Pure/ROOT\")<br>\nFinished at Wed Feb 11 13:18:45 CET 2015<br>\n0:00:05 elapsed time, 0:00:04 cpu time</p>\n</blockquote>\n<p>This looks like a problem with your Isabelle installation. Can you build<br>\nanything at all? That is, if you go to some different folder (let's say,<br>\n$HOME) and invoke:</p>\n<p>$ISABELLE_HOME/bin/isabelle build -bv HOL</p>\n<blockquote>\n<p>Renaming \"RAW\" in \"pide-core/src/main/scala/Tools/build.scala\" renaming<br>\nis no way out; so what can I do ?</p>\n</blockquote>\n<p>When building 'Hello_PIDE', none of the code in that repository is<br>\nactually being executed. What's more, everything in 'pide-core' is<br>\nbasically copied verbatim from the official Isabelle distribution, so<br>\nchanges in there shouldn't ever be necessary.</p>\n<p>Cheers<br>\nLars<br>\n<a href=\"/user_uploads/14278/v7jcrxtua3YQ-q_bVtuL-Cuw/smime.p7s\">smime.p7s</a></p>",
        "id": 294327556,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929097
    },
    {
        "content": "<p>From: Walther Neuper &lt;<a href=\"mailto:wneuper@ist.tugraz.at\">wneuper@ist.tugraz.at</a>&gt;<br>\nwneuper@ProBook:~$ /usr/local/Isabelle2014/bin/isabelle build -bv HOL<br>\nStarted at Wed Feb 11 15:59:56 CET 2015 (polyml-5.5.2_x86-linux on ProBook)<br>\nISABELLE_BUILD_OPTIONS=\"\"</p>\n<p>ML_PLATFORM=\"x86-linux\"<br>\nML_HOME=\"/usr/local/Isabelle2014/contrib/polyml-5.5.2-1/x86-linux\"<br>\nML_SYSTEM=\"polyml-5.5.2\"<br>\nML_OPTIONS=\"-H 500\"</p>\n<p>Session Pure/Pure<br>\nSession HOL/HOL (main)<br>\nFinished at Wed Feb 11 16:00:03 CET 2015<br>\n0:00:07 elapsed time, 0:00:17 cpu time, factor 2.42</p>\n<p>... but doesn't that indicate, that the session Pure and HOL have <br>\nalready been created successfully (actually, since months I'm working in <br>\nIsabelle2014 without problems)?</p>\n<p>Many thanks for your help,<br>\nWalther</p>",
        "id": 294327570,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929102
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<blockquote>\n<p>1) Build an image of \"Hello_PIDE\"<br>\n    $ $ISABELLE_HOME/bin/isabelle build -d . -bv Hello_PIDE</p>\n</blockquote>\n</blockquote>\n<p>Another shot in the dark: Did you issue that command while being in<br>\n$ISABELLE_HOME? That's the only reason I know of which could produce<br>\nthat error message.</p>\n<p>I should've been clearer, but the given steps are supposed to happen<br>\nwhile being in the checked-out copy of the repository.</p>\n<p>Cheers<br>\nLars<br>\n<a href=\"/user_uploads/14278/CwB5ik8UjkB5kRcNqvu-5fHf/smime.p7s\">smime.p7s</a></p>",
        "id": 294327592,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929109
    },
    {
        "content": "<p>From: Walther Neuper &lt;<a href=\"mailto:wneuper@ist.tugraz.at\">wneuper@ist.tugraz.at</a>&gt;</p>\n<blockquote>\n<p>the given steps are supposed to happen<br>\nwhile being in the checked-out copy of the repository.<br>\nThanks a lot: from within the copy of the repository these steps ...</p>\n</blockquote>\n<blockquote>\n<p>wneuper@ProBook:~/proto4/libisabelle$ <br>\n/usr/local/Isabelle2014/bin/isabelle build -d . -bv Hello_PIDE <br>\nwneuper@ProBook:~/proto4/libisabelle$ ./sbt full/assembly </p>\n</blockquote>\n<p>seem to have worked; I still have to study what extensive work these two <br>\nlines have accomplished.</p>\n<p>But now I am stuck again with</p>\n<blockquote>\n<p>wneuper@ProBook:~/proto4/libisabelle$ java -cp <br>\nfull/target/scala-2.11/libisabelle-full.jar Hello_PIDE Exception in <br>\nthread \"main\" java.lang.RuntimeException: Unknown Isabelle home <br>\ndirectory at isabelle.Library$ERROR$.apply(library.scala:20) at <br>\nisabelle.Library$.error(library.scala:24) at <br>\nisabelle.Basic_Library$$anonfun$2.apply(library.scala:172) at <br>\nisabelle.Basic_Library$$anonfun$2.apply(library.scala:172) at <br>\nisabelle.Isabelle_System$.init(isabelle_system.scala:101) at <br>\nisabelle.Isabelle_System$.settings(isabelle_system.scala:56) at <br>\nisabelle.Isabelle_System$.getenv(isabelle_system.scala:137) at <br>\nisabelle.Isabelle_System$.getenv_strict(isabelle_system.scala:141) at <br>\nisabelle.Isabelle_System$.components(isabelle_system.scala:540) at <br>\nisabelle.Options$.init_defaults(options.scala:126) at <br>\nisabelle.Options$.init(options.scala:132) at <br>\nedu.tum.cs.isabelle.System$.startSession(System.scala:99) at <br>\nedu.tum.cs.isabelle.System$.instance(System.scala:16) at <br>\nedu.tum.cs.isabelle.japi.JSystem$.instance(System.scala:15) at <br>\nedu.tum.cs.isabelle.japi.JSystem$.instance(System.scala:18) at <br>\nedu.tum.cs.isabelle.japi.JSystem.instance(System.scala) at <br>\nHello_PIDE.main(Hello_PIDE.java:8) wneuper@ProBook:~/proto4/libisabelle$ </p>\n</blockquote>\n<p>because I see that \"libisabelle-full.jar\" has been created at the right <br>\nplace, because ISABELLE_HOME seems to be known</p>\n<blockquote>\n<p>wneuper@ProBook:~/proto4/libisabelle$ /usr/local/Isabelle2014/bin/isabelle env<br>\n:<br>\nISABELLE_HOME=/usr/local/Isabelle2014</p>\n</blockquote>\n<p>and because I don't find the java argument \"-cp\" at</p>\n<blockquote>\n<p><a href=\"http://docs.oracle.com/javase/tutorial/essential/environment/cmdLineArgs.html\">http://docs.oracle.com/javase/tutorial/essential/environment/cmdLineArgs.html</a> </p>\n</blockquote>\n<p>So once again: thank you very much for help!</p>\n<p>Walther</p>",
        "id": 294327612,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929115
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>seem to have worked; I still have to study what extensive work these two<br>\nlines have accomplished.</p>\n</blockquote>\n<p>Not much, really: just building a tiny Isabelle session (whose only<br>\npurpose is to echo the input it receives) and then compiling some Scala<br>\nsources, producing a JAR file.</p>\n<blockquote>\n<p>But now I am stuck again with</p>\n<blockquote>\n<p>wneuper@ProBook:~/proto4/libisabelle$ java -cp<br>\nfull/target/scala-2.11/libisabelle-full.jar Hello_PIDE Exception in<br>\nthread \"main\" java.lang.RuntimeException: Unknown Isabelle home<br>\ndirectory at isabelle.Library$ERROR$.apply(library.scala:20) at</p>\n</blockquote>\n</blockquote>\n<p>This requires</p>\n<p>$ export ISABELLE_HOME=/usr/local/Isabelle2014</p>\n<blockquote>\n<p>because ISABELLE_HOME seems to be known</p>\n<blockquote>\n<p>wneuper@ProBook:~/proto4/libisabelle$<br>\n/usr/local/Isabelle2014/bin/isabelle env<br>\n:<br>\nISABELLE_HOME=/usr/local/Isabelle2014</p>\n</blockquote>\n</blockquote>\n<p>The way 'ISABELLE_HOME' is determined is slightly tricky. As far as I<br>\ncan tell, there are at least three ways:</p>\n<p>1) when running Isabelle via the 'bin/isabelle' wrapper, in which case<br>\nthe path is determined by the location of the wrapper<br>\n2) when starting Isabelle via PIDE, in which case the path is read from<br>\nthe 'ISABELLE_HOME' environment variable<br>\n3) when starting Isabelle via PIDE, in which case the path can be<br>\noverriden via some internal mechanism</p>\n<p>Right now, I'm using 2 but I really should be using 3.</p>\n<blockquote>\n<p>and because I don't find the java argument \"-cp\" at</p>\n<blockquote>\n<p><a href=\"http://docs.oracle.com/javase/tutorial/essential/environment/cmdLineArgs.html\">http://docs.oracle.com/javase/tutorial/essential/environment/cmdLineArgs.html</a></p>\n</blockquote>\n</blockquote>\n<p>'-cp' tells Java where to find its class files. In this case, it just<br>\nconsists of one JAR file.</p>\n<p>Cheers<br>\nLars<br>\n<a href=\"/user_uploads/14278/puCwKDjr0vu46aImnDViTpFi/smime.p7s\">smime.p7s</a></p>",
        "id": 294327684,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929125
    },
    {
        "content": "<p>From: Walther Neuper &lt;<a href=\"mailto:wneuper@ist.tugraz.at\">wneuper@ist.tugraz.at</a>&gt;<br>\nHi Lars,</p>\n<p>after merging your last commit Apr.12 2015 from</p>\n<p><a href=\"https://github.com/larsrh/libisabelle\">https://github.com/larsrh/libisabelle</a></p>\n<p>into our repository [1] we checked your and Makarius' suggestions about <br>\ndevelopment environments for Java / Scala / SML and now find it most <br>\nconvenient to compile with your</p>\n<p>$ $ISABELLE_HOME/bin/isabelle build -D . -bv<br>\n     $ ./sbt</p>\n<p>into *.jar (the former for the ML side and the latter for Java / Scala), <br>\nedit our files in Eclipse (Protocol.thy and Operation(s).scala for both <br>\nsides respectively), and execute Hello_PIDE.java from the command line <br>\n(with paths to respective *.jar). This setup seems sufficient for our <br>\ntrials within libisabelle before integration into Isac.</p>\n<p>For the above setup we can successfully transfer strings back and forth; <br>\nhowever we cannot figure out, how to return an XML.tree ---</p>\n<p>--- could you, please, have a look at the last commit e3dd289 <br>\n&lt;<a href=\"https://github.com/wneuper/libisabelle/commit/e3dd289cde20e269a4dd1504f00309f407c5a1dc\">https://github.com/wneuper/libisabelle/commit/e3dd289cde20e269a4dd1504f00309f407c5a1dc</a>&gt; <br>\nto [1]: there all compiles without errrors, because the questionable <br>\noperation is out-commented in all files.</p>\n<p>Walther</p>\n<p>[1] <a href=\"https://github.com/wneuper/libisabelle\">https://github.com/wneuper/libisabelle</a></p>",
        "id": 294635538,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159993
    },
    {
        "content": "<p>From: Walther Neuper &lt;<a href=\"mailto:wneuper@ist.tugraz.at\">wneuper@ist.tugraz.at</a>&gt;<br>\nOn 2015-04-21 16:38, Walther Neuper wrote:</p>\n<blockquote>\n<p>Hi Lars,</p>\n<p>after merging your last commit Apr.12 2015 from</p>\n<p><a href=\"https://github.com/larsrh/libisabelle\">https://github.com/larsrh/libisabelle</a></p>\n<p>into our repository [1] we checked your and Makarius' suggestions <br>\nabout development environments for Java / Scala / SML and now find it <br>\nmost convenient to compile with your</p>\n<p>$ $ISABELLE_HOME/bin/isabelle build -D . -bv<br>\n    $ ./sbt</p>\n<p>into *.jar (the former for the ML side and the latter for Java / <br>\nScala), edit our files in Eclipse (Protocol.thy and Operation(s).scala <br>\nfor both sides respectively), and execute Hello_PIDE.java from the <br>\ncommand line (with paths to respective *.jar). This setup seems <br>\nsufficient for our trials within libisabelle before integration into <br>\nIsac.</p>\n<p>For the above setup we can successfully transfer strings back and <br>\nforth; however we cannot figure out, how to return an XML.tree ---</p>\n</blockquote>\n<p>[error] /home/wneuper/proto4/libisabelle/libisabelle/src/main/scala/Operation.scala:14: type tree is not a member of object isabelle.XML<br>\n[error]   val Iterator = implicitly<a href=\"http://\" title=\"iterator\">Int, XML.tree</a><br>\n[error]                                      ^</p>\n<p>i.e.: what type declaration is required here ?</p>\n<blockquote>\n<p>--- could you, please, have a look at the last commit e3dd289 <br>\n&lt;<a href=\"https://github.com/wneuper/libisabelle/commit/e3dd289cde20e269a4dd1504f00309f407c5a1dc\">https://github.com/wneuper/libisabelle/commit/e3dd289cde20e269a4dd1504f00309f407c5a1dc</a>&gt; <br>\nto [1]:there all compiles without errrors, because the questionable <br>\noperation is out-commented in all files.</p>\n<p>Walther</p>\n<p>[1] <a href=\"https://github.com/wneuper/libisabelle\">https://github.com/wneuper/libisabelle</a></p>\n<p>On 2015-02-24 11:56, Lars Hupel wrote:</p>\n<blockquote>\n<blockquote>\n<p>but throw exceptions as soon as I try to return XML (test_2 and<br>\nIterator, the latter not reached):<br>\nThe reason why that fails is that by default, the 'sendCommand' function<br>\ntries to parse Isabelle's response as string. If you want the raw XML<br>\nblock back, use 'sendCommandXML', which converts neither input nor <br>\noutput.</p>\n</blockquote>\n<p>I'm not sure how convenient it would be to produce XML trees in Java. In<br>\nScala, it would look like this:</p>\n<p>XML.Encode.int(222)</p>\n<p>(This is completely symmetric to '<a href=\"http://XML.Decode.int\">XML.Decode.int</a>' in Isabelle/ML, which<br>\nyou're already using.)</p>\n<p>Shot in the dark for Java:</p>\n<p>isabelle.XML$.Encode$.int.apply(222);</p>\n<p>I may need to add some convenience functions to make that more visually<br>\npleasing.</p>\n<p>By the way, there should be no need to use 'XML.parse' in Isabelle/ML.<br>\nInstead, you can construct your response like this:</p>\n<p>XML.Elem ((\"CALCTREE\", []),<br>\n     [XML.Elem ((\"CALCID\", []), [XML.Text \"foo\"])])</p>\n<p>Cheers<br>\nLars</p>\n</blockquote>\n</blockquote>",
        "id": 294635603,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160004
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nThe Isabelle code looks correct (and indeed, it builds fine).</p>\n<p>As for the Scala code, there are two problems, but they can be easily fixed:</p>\n<ul>\n<li>val Iterator = implicitly<a href=\"http://\" title=\"iterator\">Int, XML.tree</a></li>\n<li>val Iterator = implicitly<a href=\"http://\" title=\"iterator\">math.BigInt, XML.Tree</a></li>\n</ul>\n<p>Conceptually, an ML 'int' can have an arbitrary size, but a JVM 'Int' is<br>\nonly 32 bits. Hence, it is modelled as a BigInt. Additionally, the<br>\n'XML.Tree' is uppercase.</p>\n<p>I also guess that you're not going to need the 'ITERATOR' declaration in<br>\nthe Java API, unless you want to use the Java API.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294636025,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160163
    },
    {
        "content": "<p>From: Walther Neuper &lt;<a href=\"mailto:wneuper@ist.tugraz.at\">wneuper@ist.tugraz.at</a>&gt;</p>\n<blockquote>\n<p>Conceptually, an ML 'int' can have an arbitrary size, but a JVM 'Int' is<br>\nonly 32 bits. Hence, it is modelled as a BigInt.</p>\n</blockquote>\n<p>In Scala there is a conversion</p>\n<p>apply(x:BigInteger): BigInt</p>\n<p>but the error is thrown by arguments' type declaration -- how can we get <br>\nthese right ?</p>\n<p>Thanks again for help,</p>\n<p>Walther</p>\n<p>PS:</p>\n<blockquote>\n<p>I also guess that you're not going to need the 'ITERATOR' declaration in<br>\nthe Java API, unless you want to use the Java API.</p>\n</blockquote>\n<p>right, so we can use the identifier \"Iterator\" for our own purposes.</p>",
        "id": 294636248,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160250
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nThe problem is a type mismatch ... the operation is declared for<br>\n'scala.math.BigInt', but you're trying to use it as a<br>\n'java.lang.BigInteger'. There should be no problem with consistently<br>\nusing the former even in Java code, since the conversion is trivial:</p>\n<p>scalaBigInt.bigInteger() // returns Java BigInteger<br>\n  new scala.math.BigInt(javaBigInt) // constructs Scala BigInt</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294636340,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160297
    },
    {
        "content": "<p>From: Walther Neuper &lt;<a href=\"mailto:wneuper@ist.tugraz.at\">wneuper@ist.tugraz.at</a>&gt;<br>\nLars,</p>\n<p>Thanks a lot for your help to get started with libisabelle ...</p>\n<p>... which compiles a test perfectly [1] now.</p>\n<p>In order to run the test in Hello_PIDE.java I'm looking for some <br>\nlibisabelle*.jar.<br>\nNow I see, that the build has changed and libisabelle/full is empty; and <br>\nI couldn't find the target where ./sbt compiles to [2].</p>\n<p>So I kindly ask once more for help to get started.</p>\n<p>Walther</p>\n<p>[1] <br>\n<a href=\"https://github.com/wneuper/libisabelle/commit/a957bc38bca645d602fd61137e732f93b3e410f1\">https://github.com/wneuper/libisabelle/commit/a957bc38bca645d602fd61137e732f93b3e410f1</a></p>\n<p>[2] So far my best guess might be:<br>\n~/proto4/libisabelle$ java -cp <br>\n./libisabelle/target/resolution-cache/cs.tum.edu.isabelle/libisabelle_2.11 <br>\n./examples/target/scala-2.11/classes/Hello_PIDE<br>\nError: Could not find or load main class <br>\n..examples.target.scala-2.11.classes.Hello_PIDE</p>\n<p>while we have:<br>\n~/proto4/libisabelle$ ls -l <br>\n./examples/target/scala-2.11/classes/Hello_PIDE.class<br>\n-rwxrw-r-- 1 wneuper wneuper 952 Apr 30 13:38 <br>\n./examples/target/scala-2.11/classes/Hello_PIDE.class</p>",
        "id": 294637745,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160845
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>Now I see, that the build has changed and libisabelle/full is empty; and<br>\nI couldn't find the target where ./sbt compiles to [2].</p>\n</blockquote>\n<p>I didn't (consciously) change anything, but sometimes SBT is rather<br>\nmysterious ...</p>\n<p>Try running './sbt full/assembly', it should produce a JAR file located<br>\nat 'full/target/scala-2.11/libisabelle-full.jar'. It also includes the<br>\nexample:</p>\n<p>$ java -cp full/target/scala-2.11/libisabelle-full.jar Hello_PIDE<br>\nHello world</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294639558,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161526
    }
]