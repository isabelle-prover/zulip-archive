[
    {
        "content": "<p>From: Walther Neuper &lt;<a href=\"mailto:wneuper@ist.tugraz.at\">wneuper@ist.tugraz.at</a>&gt;<br>\nLars,</p>\n<p>thanks for continuous support with libisabelle, the wrapper around <br>\nIsabelle/PIDE for non-IDE applications [1].</p>\n<p>Since a test example is successfully implemented [2], the next questions <br>\nare about embedding libisabelle into our application. Embedding concerns <br>\n2 sides, (1) our Java front-end and (2) our back-end in Isabelle.<br>\nThe latter seems to be covered by libisabelle's operation USE_THYS, <br>\nwhich allows to determine the theories loaded in Isabelle.</p>\n<p>With (1), however, we see a principal obstacle: Translation from Scala's <br>\nXML.Tree into Java objects requires import of the objects' definitions <br>\n(somewhere in libisabelle/examples).<br>\nThese imports need to be handled by libisabelle/sbt such that the <br>\nobjects are identified; but I am still unable to appropriately change <br>\nthe respective code in sbt ---<br>\n--- can we get help here, or do we have to learn this from scratch?</p>\n<p>Or do you see other possibilities (1a)?</p>\n<p>Walther</p>\n<p>(1a) Another possibility is to configure compilation in the Scala IDE, <br>\nbut here we are only partially successful, too.<br>\nWe still hope to finally use libisabelle-full.jar as a library for our <br>\nfront-end, where the library knows as little as possible about the <br>\nfront-end.</p>\n<p>[1] <a href=\"https://github.com/larsrh/libisabelle\">https://github.com/larsrh/libisabelle</a><br>\n[2] <a href=\"https://github.com/wneuper/libisabelle\">https://github.com/wneuper/libisabelle</a></p>",
        "id": 294640245,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161802
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>However, with (1) we see a principal obstacle: Translation from Scala's<br>\nXML.Tree into Java objects requires import of the objects' definitions<br>\nsomewhere in libisabelle/examples.</p>\n</blockquote>\n<p>The \"examples\" module already depends on all that, so importing that<br>\nshould work, at least from Scala. From Java, the situation is more<br>\ndifficult because of the intricacies of how Scala nested classes/objects<br>\nare being compiled to JVM class files.</p>\n<blockquote>\n<p>(1a) Another possibility is to configure compilation in the Scala IDE,<br>\nbut here we are only partially successful, too.<br>\nWe still hope to finally use libisabelle-full.jar as a library for our<br>\nfront-end, where the library knows as little as possible about the<br>\nfront-end.</p>\n</blockquote>\n<p>That is indeed the goal. Ideally, the 'libisabelle' sources should<br>\nremain unchanged and applications can just include that JAR file and add<br>\noperations, handlers, ...</p>\n<p>If that doesn't work, something is wrong on my side. Does the full JAR<br>\nnot include everything, or does Eclipse doesn't like it?</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294640543,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161912
    },
    {
        "content": "<p>From: Walther Neuper &lt;<a href=\"mailto:wneuper@ist.tugraz.at\">wneuper@ist.tugraz.at</a>&gt;<br>\nOn 2015-05-18 10:25, Lars Hupel wrote:</p>\n<blockquote>\n<blockquote>\n<p>However, with (1) we see a principal obstacle: Translation from Scala's<br>\nXML.Tree into Java objects requires import of the objects' definitions<br>\nsomewhere in libisabelle/examples.<br>\nThe \"examples\" module already depends on all that, so importing that<br>\nshould work, at least from Scala. From Java, the situation is more<br>\ndifficult because of the intricacies of how Scala nested classes/objects<br>\nare being compiled to JVM class files.</p>\n</blockquote>\n</blockquote>\n<p>Right, that works all perfectly and is more or less transparent for us.</p>\n<p>My question was more general:<br>\nTranslation Scala's XML.Tree &lt;---&gt; Isac's Java objects directly in a <br>\nScala file (near libisabelle/examples), which would require imports of <br>\nthe objects in the Scala file ---<br>\n--- and these imports can only be resolved if sbt sets some additional <br>\npaths.<br>\nSo we presently decompose Isac's Java objects, transfer the primitve <br>\ndatatypes, compose to XML.Tree (and the same back again); direct <br>\ntranslation within one method for one direction would be more concise.</p>\n<p>Would it be possible to extend sbt such that is can take such additional <br>\npaths???</p>\n<blockquote>\n<blockquote>\n<p>We still hope to finally use libisabelle-full.jar as a library for our<br>\nfront-end, where the library knows as little as possible about the<br>\nfront-end.<br>\nThat is indeed the goal. Ideally, the 'libisabelle' sources should<br>\nremain unchanged and applications can just include that JAR file and add<br>\noperations, handlers, ...</p>\n</blockquote>\n<p>If that doesn't work, something is wrong on my side. Does the full JAR<br>\nnot include everything, or does Eclipse doesn't like it?<br>\nlibisabelle-full.jar does all what we want: if given to Eclipse, <br>\nrespective imports work and we have IDE feedback in coding.</p>\n</blockquote>\n<p>Thanks,<br>\nWalther</p>",
        "id": 294640688,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161961
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>when the prover is loaded with a particular session (in your case, it's<br>\nprobably the session defined in 'libisabelle'), you can't change it<br>\nlater. You can only load further theories.</p>\n<p>However, you can easily start up the prover with a combined session of<br>\nall the things you need. You need to make sure that your modified<br>\n'Protocol.thy' is included in your 'ROOT' file (either via a theory<br>\nimport or by listing it explicitly) and then use:</p>\n<p>JSystem sys = JSystem.instance(new File(\"/path/to/isac\"), \"Isac\");</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294643483,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163103
    }
]