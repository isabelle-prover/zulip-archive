[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear experts for linear arithmetic in Isabelle,</p>\n<p>I wondered why the simplifier can prove statements such as the following for nat, int, <br>\nrat, and real, but fails for enat.</p>\n<p>lemma \"3 &lt; x ==&gt; 2 &lt; x\"</p>\n<p>I found that the linarith solver does it for nat, int, rat, and real. Unfortunately, there <br>\nseems to be no setup for enat (or ereal). I therefore briefly tried to configure linarith <br>\nfor enat by mimicking what has been done for nat. Since I do not know the workings of the <br>\nlinarith prover and could not find any documentation on it, my attempt failed. I only got <br>\nwarnings such as \"Linear arithmetic should have refuted the assumptions. Please inform <br>\nTobias Nipkow.\" or errors like \"Linear arithmetic: failed to add thms\".</p>\n<p>Is it in principle possible to configure linarith for enat? Is there any documentation <br>\nwhat rewrite rules, cancellation simprocs and the like it needs?</p>\n<p>Cheers,<br>\nAndreas</p>",
        "id": 294632923,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159005
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nDear Andreas,</p>\n<p>Unfortunately the linear arithmetic decision procedure does not work for <br>\nextended numbers, we had investigated that as well. The decision procedure works <br>\nfor all types in a class that requires certain cancellation laws, probably x+y <br>\n&lt;= x+z ==&gt; y &lt;= z. This fails in the presence of infinities.</p>\n<p>This is a sore problem and the only way around it seems to be to eliminate the <br>\ninfinities first, i.e. reduce it to the basic type. But that has to be done by <br>\nplain old deduction as it would be very tricky to integrate such a step into the <br>\nexisting decision procedure.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/gdm2-ci5Fs6rfsG4VvZ6x5Uy/smime.p7s\">smime.p7s</a></p>",
        "id": 294633139,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159085
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nPerhaps the nonstandard integers are the solution here. Nonstandard theories satisfy all the first-order properties of the corresponding standard theories. I’m not sure what state they are in, however. Was linear arithmetic ever set up for them?</p>\n<p>Larry</p>",
        "id": 294633152,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159091
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI strongly suspect linear arithmetic was never set up for any nonstandard type.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/ZmB0zzqRW0QxT5JO0Us7-Gww/smime.p7s\">smime.p7s</a></p>",
        "id": 294633190,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159104
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Larry and Tobias,</p>\n<p>The idea with non-standard integers sound interesting, so I investigated a bit further. <br>\nLinear arithmetic works for all types in linordered_dom thanks to the generic setup in <br>\nInt.thy. Since the hyperreals are an instance thereof, linarith works for them. <br>\nUnfortunately, the hypernaturals are not, so linarith does not work for them. However, I <br>\nthink that one could make it work. I tried to adapt the setup for ordinary naturals to <br>\nhypernaturals. It did not work out of the box because hypnat is not a type constructor, <br>\nbut a synonym for \"nat star\" and the Lin_Arith.add_discrete_type only accepts type <br>\nconstructors. Therefore, I copied the hypnat type to a type constructor hypernat with <br>\ntypedef and did the adaptation there. I now have a setup that works for my tiny examples <br>\non hypernat such as \"3 &lt; x ==&gt; 2 &lt; (x :: hypernat)\". But as I am no expert for linarith, I <br>\ndon't know whether it is complete.</p>\n<p>The next question is how this could be used to implement a solver or simproc on enat. I <br>\ndefined a function hnat_of_neat :: enat =&gt; hypernat that respects orders and commutes with <br>\nnumerals. Thus, one can transform the goal \"3 &lt; x ==&gt; 2 &lt; (x :: enat)\" to \"3 &lt; <br>\nhnat_of_enat x ⟹ 2 &lt; hnat_of_enat x\". Unfortunately, linarith fails to prove this goal, <br>\nalthough it succeeds on the more general \"3 &lt; y ==&gt; 2 &lt; y\", and I do not know why.</p>\n<ul>\n<li>\n<p>Do you think that this is a viable way to go?</p>\n</li>\n<li>\n<p>Do I really need a copy hypernat of nat star just for the sake of having a type <br>\nconstructor?</p>\n</li>\n<li>\n<p>Does linarith provide some support for going from enat to hypernat? I noticed that there <br>\nis the function Lin_Arith.add_inj_const, but I do not know what this is good for.</p>\n</li>\n</ul>\n<p>Best,<br>\nAndreas</p>",
        "id": 294633361,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159164
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nPersonally I would prefer an approach that used the hyper-naturals instead of type enat. They have better algebraic properties, though you don’t get a unique infinite number.</p>\n<p>Larry Paulson</p>",
        "id": 294633374,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159171
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nSwitching to the hyper-naturals is not really an option for me because my work builds on <br>\nother parts that use enat, too. Unfortunately, the idea I have sketched does not scale to <br>\nlarger examples, because the conversions between enat and hypernat do not distribute over <br>\nsubtraction. One would have to implement case splits in the translation, which looks like <br>\na bigger project and requires more thought first.</p>\n<p>Thanks for your input,<br>\nAndreas</p>",
        "id": 294633446,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159207
    }
]