[
    {
        "content": "<p>From: \"F. Miguel Dionisio\" &lt;<a href=\"mailto:fmd@math.ist.utl.pt\">fmd@math.ist.utl.pt</a>&gt;<br>\nHi,</p>\n<p>Does anyone know how to acess to the list of currently bound variables <br>\n(namely to know the names of Bound 0, Bound 1, ...)</p>\n<p>Many thanks<br>\nfmd</p>",
        "id": 293911029,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660747423
    },
    {
        "content": "<p>From: Clément Hurlin &lt;<a href=\"mailto:Clement.Hurlin@esial.uhp-nancy.fr\">Clement.Hurlin@esial.uhp-nancy.fr</a>&gt;<br>\nHi,</p>\n<p>If you're \"deconstructing\" a term you can do that by writing a  <br>\npush/pop stack where you store name of bounds variable :</p>\n<p>When matching a Abs(x, T, P) term, x refers to the name of the  <br>\nbound variable. You can then push_somewhere x, and when you later  <br>\nencounter \"bound 0\", the name of your variable will be at the  <br>\ncorresponding position in your stack.</p>\n<p>Is there a cleverer solution ?</p>\n<p>Clément</p>",
        "id": 293911032,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660747424
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThis question only makes sense in the context of some term. In order  <br>\nto have reached some context, you will have recursively passed  <br>\nthrough various term constructors. If every time you pass through the  <br>\nAbs constructor you \"cons\" the name to a list of strings, then  <br>\nreversing that list gives you the names. They are of course comments  <br>\nonly, with no logical significance.</p>\n<p>Larry Paulson</p>",
        "id": 293911033,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660747424
    }
]