[
    {
        "content": "<p>From: Randy Pollack &lt;<a href=\"mailto:rpollack@inf.ed.ac.uk\">rpollack@inf.ed.ac.uk</a>&gt;<br>\nConsider a representation of a kind of graph</p>\n<p>theory graph<br>\n imports Main<br>\n begin</p>\n<p>typedecl vcs  (<strong> type of vertices </strong>)<br>\n typedecl ll   (<strong> type of labels </strong>)</p>\n<p>record lgraph =<br>\n   vv :: \"vcs set\"             (<strong> set of vertices </strong>)<br>\n   lbl :: \"vcs \\&lt;Rightarrow&gt; ll\"          (<strong> labelling of vertices </strong>)<br>\n   ee :: \"vcs \\&lt;Rightarrow&gt; vcs \\&lt;Rightarrow&gt; bool\"  (<strong> edge relation </strong>)</p>\n<p>locale lgraph =<br>\n   fixes GG::lgraph<br>\n   assumes vvFin: \"finite (vv GG)\"<br>\n         (<strong> ee^++ is a partial order </strong>)<br>\n   and eePo: \"order  ((ee GG)^**) ((ee GG)^++)\"</p>\n<p>This is not completely satisfactory; e.g. I really intend lgraph<br>\nequality to depend only on lbl and ee restricted to (vv::vcs set).<br>\nAny suggestions on basic representation are appreciated, but leave<br>\nthat aside for the moment.</p>\n<p>The question is when I declare the locale of two lgraphs</p>\n<p>locale subgraph =<br>\n   H : lgraph + G : lgraph for H1 and G1 +<br>\n   assumes \"vv H \\&lt;subseteq&gt; vv G\"<br>\n   assumes \"vv H \\&lt;subseteq&gt; vv G1\"<br>\n   assumes \"vv H \\&lt;subseteq&gt; vv GG\"</p>\n<p>What does \"G\" refer to, what does G1 refer to, and what does GG refer<br>\nto in the context of locale subgraph?  I guess all three \"assumes\"<br>\nlines mean the same thing.  But none of \"G.vvFin\", \"G1.vvFin\" nor<br>\n\"GG.vvFin\" are recognised in this context; how do I refer to the<br>\n\"vvFin\" property of the two constituent lgraphs of locale subgraph?</p>\n<p>Also while </p>\n<p>locale subgraph = H : lgraph + G : lgraph for H and G<br>\n locale subgraph = H : lgraph + GG : lgraph for H and G</p>\n<p>are accepted,</p>\n<p>locale subgraph = H : lgraph + G : lgraph for H and GG</p>\n<p>is not accepted.  HELP!  The tutorial on locales (2009) doesn't<br>\nclarify these questions for me.</p>\n<p>You will have observed that in this example I'm not using the<br>\n\"(structure)\" and \\&lt;index&gt; notation that I see in many libraries.<br>\nWhere can I read about how this works?</p>\n<p>Thanks,<br>\nRandy</p>",
        "id": 294078640,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660829903
    },
    {
        "content": "<p>From: Clemens Ballarin &lt;<a href=\"mailto:ballarin@in.tum.de\">ballarin@in.tum.de</a>&gt;<br>\nDear Randy,</p>\n<p>This locale has the parameters GG, H1 and G1.  H is a bound variable,  <br>\nuniversally quantified for each assumption. You can obtain this  <br>\ninformation by inspecting the locale</p>\n<p>print_locale subgraph</p>\n<p>and the definitions of the two locale predicates</p>\n<p>thm subgraph_def<br>\n   thm subgraph_axioms_def</p>\n<p>Additionally, H and G are qualifiers prefixing all non-logical names  <br>\n(theorem names, for example) of the respective locales (two times  <br>\nlgraph, in this case).</p>\n<p>Clearly, this is not what you had intended.  The locale you most  <br>\nlikely had in mind is</p>\n<p>locale subgraph =<br>\n     H : lgraph H + G : lgraph G for H and G +<br>\n     assumes \"vv H \\&lt;subseteq&gt; vv G\"</p>\n<p>In a locale expression, you may specify a parameter instantiation.   <br>\nThis is completely independent of the qualifiers.  In this example, it  <br>\nis the most convenient choice to qualify all (theorem) names of the  <br>\n\"H\" instance of \"lgraph\" by H etc, but you also might choose to  <br>\nqualify the \"H\" instance by \"sub\" leave the \"G\" instance unqualified.</p>\n<p>In your declaration you omitted the parameter instantiation.  In this  <br>\ncase, a parameter named after the particular parameter of that locale  <br>\nis added automatically.  This is mainly a convenience for situations  <br>\nwith simple inheritance situations like</p>\n<p>locale monoid = fixes G assumes ...<br>\n   locale group = monoid + assumes ...</p>\n<p>and to provide backward compatibility with the previous locale  <br>\nexpressions, which were based on renaming.</p>\n<p>I hope this helps you get started with your example.</p>\n<p>Cheers,</p>\n<p>Clemens</p>",
        "id": 294078674,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660829916
    }
]