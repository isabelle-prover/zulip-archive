[
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;<br>\nDear Christoph,</p>\n<p>Yes. Your lemma is correct. This is a bug in Nitpick. Nitpick was developed before the \"codatatype\" command was added to Isabelle, and it looks like I forgot to handle set functions properly. I'll look into this.</p>\n<p>Cheers,</p>\n<p>Jasmin</p>",
        "id": 294650090,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165757
    },
    {
        "content": "<p>From: Christoph Dittmann &lt;<a href=\"mailto:f-isabellelist@yozora.eu\">f-isabellelist@yozora.eu</a>&gt;<br>\nDear Jasmin,</p>\n<p>Thanks, this is a relief.</p>\n<p>Best,<br>\nChristoph</p>",
        "id": 294650855,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166027
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nJust out of curiosity: how does one prove this lemma? I played around<br>\nwith it yesterday but could not figure it out.</p>\n<p>Cheers,</p>\n<p>Manuel</p>",
        "id": 294651014,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166095
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@in.tum.de\">traytel@in.tum.de</a>&gt;<br>\nHi Manuel,</p>\n<p>the key ingredient is the following lemma proved by induction on the set <br>\nfunction (provided by the codatatype package).</p>\n<p>lemma \"y ∈ lset w' ⟹ w' = w ⟹ x = y\"<br>\n   by (induct y w' rule: llist.set_induct; subst (asm) w.ctr; simp)</p>\n<p>This is the rather general approach. For the special case of lazy lists, <br>\nAndreas has a nice alternative characterization of lset in terms of lnth <br>\nin Coinductive_LList which might make things simpler (but more index-based).</p>\n<p>Dmitriy</p>",
        "id": 294651201,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166162
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Manuel,</p>\n<p>You have to use the induction rule for lset. Here's the proof:</p>\n<p>lemma \"lset w = {x}\"<br>\nproof(intro set_eqI iffI)<br>\n   fix y :: \"'a\"<br>\n   assume \"y ∈ lset w\"<br>\n   thus \"y ∈ {x}\"<br>\n     by(induction xs==\"w :: 'a llist\" rule: lset_induct)(subst (asm) w.code; simp)+<br>\nqed(subst w.code; simp)</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294651238,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166178
    },
    {
        "content": "<p>From: Christoph Dittmann &lt;<a href=\"mailto:f-isabellelist@yozora.eu\">f-isabellelist@yozora.eu</a>&gt;<br>\nHello,</p>\n<p>I have trouble understanding codatatypes.  The AFP entry \"coinductive\"<br>\ndefines lazy lists:</p>\n<p>codatatype (lset: 'a) llist = LNil | LCons 'a \"'a llist\"</p>\n<p>Then I define the infinite list containing only x (to my understanding,<br>\nthis list should be unique):</p>\n<p>consts x :: 'a<br>\nprimcorec w where \"w = LCons x w\"</p>\n<p>Then I expected \"lset w = {x}\" to hold.  Turns out it doesn't:</p>\n<p>lemma \"lset w = {x}\" try<br>\n(* Nitpick found a counterexample for card 'a = 2: Empty assignment *)</p>\n<p>So I guess either my understanding of lset as \"the set of all elements<br>\noccuring in the list\" is wrong or my definition of w is not what I think<br>\nit is.</p>\n<p>Could someone shed some light on this?</p>\n<p>Thanks,<br>\nChristoph</p>",
        "id": 294652443,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166658
    }
]