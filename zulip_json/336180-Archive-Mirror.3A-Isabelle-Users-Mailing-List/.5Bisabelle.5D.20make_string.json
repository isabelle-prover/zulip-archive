[
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nWell, obviously I don't want to create a print function for any new <br>\ndatatype when there is one there already (now that I've been told how to <br>\nremove all the extra crap in the output from @{make_string}).</p>\n<p>In what way is @{make_string} not suitable for production-quality output?</p>\n<p>Thanks</p>\n<p>Jeremy</p>",
        "id": 294733597,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188974
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nBefore we continue this thread, can you just explain what you are trying<br>\nto do.</p>\n<p>There is usually no need to abuse Isabelle/ML to get things done properly.</p>\n<p>Makarius</p>",
        "id": 294733613,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188980
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nHi Makarius,</p>\n<p>Well, as you suggest, this gives only machine writable/readable data; I <br>\nwant to get an ML value of type term (or, as in my case, a related <br>\ndatatype, or more generally any ML value), as a string, that is, an ML <br>\nvalue of type string, which is readable, and could be used to construct <br>\na theory file, by reading it in by<br>\n  ML {* val t = ... *}<br>\nJust like PolyML.makestring, which I assume has been deliberately made <br>\nunavailable (why is this?)<br>\n  And just like @{make_string} combined with |&gt; YXML.parse_body |&gt; <br>\nXML.content_of seems to do, but you seem to be saying that I shouldn't <br>\nuse this for production-quality output (why is this the case?)</p>\n<p>Regards,</p>\n<p>Jeremy</p>",
        "id": 294733985,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189129
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nHi Makarius,</p>\n<p>How so?  When I try<br>\ntheory Scratch imports ZF Main begin<br>\nI get an error message</p>\n<p>Jeremy</p>",
        "id": 294734002,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189135
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\n\"In the same process\" means that you can have an editor window open with <br>\ntwo theories, one of which imports \"ZF\", the other imports \"Main\". Both <br>\ntheories can be edited simultaneously.</p>\n<p>It doesn't mean that you can import both into the same theory, which <br>\nwould be very hard indeed.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294734022,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189144
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nI would be suprised if that worked for terms.</p>\n<p>If you use this routine on the term \"λx. x\", you'll get:</p>\n<p>Abs (\"x\", \"'a\", Bound 0)</p>\n<p>Note that the type there is pretty-printed as \"'a\". If you try to read <br>\nthat in in an ML block:</p>\n<p>ML‹Abs (\"x\", \"'a\", Bound 0)›</p>\n<p>You'll get an error message that the type is supposed to be a \"typ\", not <br>\na \"string\". The correct ML input representation would instead be:</p>\n<p>Abs (\"x\", TFree (\"'a\", [\"HOL.type\"]), Bound 0)</p>\n<p>I would instead recommend dealing with non-human-readable terms in files <br>\ninstead (arguably, the above is not really human-readable anyway).</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294734032,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189150
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nHi Lars,</p>\n<p>Abs (\"x\", TFree (\"'a\", [\"HOL.type\"]), Bound 0)</p>\n<p>is exactly what I want, having learnt the lesson a very long time ago <br>\nthat human-readable is always better, for debugging and generally <br>\nunderstanding what is going on.  That's why internet protocols such as <br>\nHTTP, SMTP etc, are human-readable.</p>\n<p>And I can get Abs (\"x\", TFree (\"'a\", [\"HOL.type\"]), Bound 0) printed on<br>\nthe screen, and by using @{make_string}, coupled with |&gt; YXML.parse_body <br>\n|&gt; XML.content_of I can get it into a string value.</p>\n<p>What I am asking is (1) why is @{make_string} unsuitable for <br>\nproduction-quality code, and (2) if this is a reason for not using it, <br>\nwhat should I use to achieve the same effect.</p>\n<p>Thanks</p>\n<p>Jeremy</p>",
        "id": 294734088,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189164
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nHi Lars,</p>\n<p>Thanks but how do I do this?  Does the \"editor window\" mean the bit on <br>\nthe top left, where I enter things like theory Scratch imports ZF begin?</p>\n<p>And how do I do what you are referring to?</p>\n<p>If I try</p>\n<p>theory Scratch imports ZF begin</p>\n<p>ML {* val t = 1 *}</p>\n<p>end</p>\n<p>theory Scratch imports Main begin</p>\n<p>it gives one error message, if I delete the \"end\" it gives another error <br>\nmessage, changing Scratch to Scratch1 makes no difference.</p>\n<p>What do I actually do to achieve \"have an editor window open with</p>\n<blockquote>\n<p>two theories, one of which imports \"ZF\", the other imports \"Main\"\"</p>\n</blockquote>\n<p>Thanks.</p>\n<p>Jeremy</p>",
        "id": 294734115,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189175
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>What do I actually do to achieve \"have an editor window open with</p>\n<blockquote>\n<p>two theories, one of which imports \"ZF\", the other imports \"Main\"\"</p>\n</blockquote>\n</blockquote>\n<p>One theory = one buffer. You have to open a new buffer by pressing <br>\nCtrl-N (or Cmd-N on macOS). You can also have them open side-by-side, by <br>\ngoing to \"View\", \"Splitting\".</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294734144,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189187
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHow, if I may ask? If you can get this printed on the screen, surely you<br>\nmust have it as a string somehow? So why shoving this to @{make_string}<br>\nagain?</p>",
        "id": 294734158,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189193
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nHi Lars,</p>\n<p>structure MyTerm = struct<br>\ndatatype typ =<br>\n     TFree of string * sort<br>\n   | TVar of indexname * sort<br>\n   | Type of string * typ list</p>\n<p>datatype term =<br>\n     $ of term * term<br>\n   | Abs of string * typ * term<br>\n   | Bound of int<br>\n   | Const of string * typ<br>\n   | Free of string * typ<br>\n   | Var of indexname * typ<br>\nend ; (* structure MyTerm *)</p>\n<p>fun ty_toMy (Term.Type (s, tys)) = MyTerm.Type (s, <a href=\"http://List.map\">List.map</a> ty_toMy tys)<br>\n   | ty_toMy (Term.TVar (ixn, st)) = MyTerm.TVar (ixn, st)<br>\n   | ty_toMy (Term.TFree (s, st)) = MyTerm.TFree (s, st) ;</p>\n<p>fun tm_toMy (Term.$ (f, x)) = MyTerm.$ (tm_toMy f, tm_toMy x)<br>\n   | tm_toMy (Term.Abs (s, ty, tm)) = MyTerm.Abs (s, ty_toMy ty, tm_toMy tm)<br>\n   | tm_toMy (Term.Bound n) = MyTerm.Bound n<br>\n   | tm_toMy (Term.Const (s, ty)) = MyTerm.Const (s, ty_toMy ty)<br>\n   | tm_toMy (Term.Free (s, ty)) = MyTerm.Free (s, ty_toMy ty)<br>\n   | tm_toMy (Term.Var (ixn, ty)) = MyTerm.Var (ixn, ty_toMy ty) ;</p>\n<p>so tm_toMy t results in<br>\nval it = .... (ie, it gets printed out naturally, with no <br>\npretty-printing of types).  I don't know if that's the easiest way of <br>\nstopping types from being pretty-printed, but it is the way I found.</p>\n<p>I maybe don't quite understand your remark, but since ML always prints a <br>\nnewly defined value on the screen - which means it must work out how to <br>\nexpress it as a string (sometimes not very usefully, when it's a <br>\nfunction), but it doesn't actually give you an ML value of type string.</p>\n<p>But to get this as a string ML value one would normally use <br>\nPolyML.makestring, or the \"production-quality equivalent\" of<br>\n@{make_string}, followed by |&gt; YXML.parse_body |&gt; XML.content_of.</p>\n<p>My question is, what is that production-quality equivalent.</p>\n<p>Cheers,</p>\n<p>Jeremy</p>",
        "id": 294734174,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189199
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nOK, thanks - I've done that (ie both those things), but the second <br>\nbuffer is completely non-responsive (well, almost, since clicking in the <br>\nsecond buffer removes the output from the first buffer from the output <br>\narea, but there's no output from the second buffer.  Is there a second <br>\noutput area that's hidden away somewhere, that I need to do something to <br>\nmake visible?</p>\n<p>Thanks,</p>\n<p>Jeremy</p>",
        "id": 294734194,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189206
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSee the included ROOT file which defines a session that contains all<br>\ntheories from HOL + ZF. You can copy that to your project DIRECTORY and<br>\nuse the session in Isabelle/jEdit as follows:</p>\n<p>isabelle jedit -d DIRECTORY -l \"HOL+ZF\"</p>\n<p>Then you can work with theory ML values from unrelated contexts as<br>\nillustrated in the included Scratch.thy, but note that<br>\nThy_Info.get_theory only works for theories loaded into the underlying<br>\nsession image.</p>\n<p>So there is no need to write out string representations of ML values at<br>\nall, and try to read them back again (that additional problem has not<br>\neven been touch on this thread so far).</p>\n<p>Makarius<br>\n<a href=\"/user_uploads/14278/VF4ZRDnfQvhrtu5_YSZeKsjb/ROOT\">ROOT</a><br>\n<a href=\"/user_uploads/14278/RzVFfnEsHCg15kxzvqZ4PfTP/Scratch.thy\">Scratch.thy</a></p>",
        "id": 294734205,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189212
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nHi Makarius,</p>\n<p>Thanks - I tried the above and an extra window appeared containing the <br>\nfollowing</p>\n<p>Build started for Isabelle/HOL+ZF ...<br>\nBuilding HOL+ZF ...</p>\n<p>(lots of output here)</p>\n<p>*** Failed to load theory \"ZF.InfDatatype\" (unresolved \"ZF.Cardinal_AC\")<br>\n*** Failed to load theory \"ZFC\" (unresolved \"ZF.InfDatatype\")<br>\n*** Cannot merge theories with different application syntax<br>\n*** At command \"theory\" (line 10 of \"~~/src/ZF/Cardinal_AC.thy\")<br>\nUnfinished session(s): HOL+ZF<br>\nReturn code: 2</p>\n<p>Session build failed -- prover process remains inactive!</p>\n<p>Cheers,</p>\n<p>Jeremy</p>",
        "id": 294734241,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189228
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nYou actually need Isabelle2018-RC0 for that: it approximates the<br>\nIsabelle2018 release that is scheduled for August 2018, see<br>\n<a href=\"http://isabelle.in.tum.de/website-Isabelle2018-RC0\">http://isabelle.in.tum.de/website-Isabelle2018-RC0</a></p>\n<p>Makarius</p>",
        "id": 294734244,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189231
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nYou obviously have to enter something in the second buffer to see <br>\nsomething in the output. The output shows only the current state of <br>\nwhere your cursor is.</p>",
        "id": 294734394,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189281
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nHi Lars,</p>\n<p>I did that - ie, entering stuff in the second buffer, but no response</p>\n<p>Jeremy</p>",
        "id": 294734446,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189287
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nHi,</p>\n<blockquote>\n<p>Abs (\"x\", TFree (\"'a\", [\"HOL.type\"]), Bound 0)</p>\n</blockquote>\n<p>You will not get this from @{make_string}, only something similar looking<br>\nbut unparseable.<br>\n@{make_string} gives you somewhat human readable output, for debugging<br>\n(which, in case of term is relatively raw, I assume that is because it has<br>\nto work on non-wellformed terms, too).<br>\nSo - independent of whether it is production-suitable or it - it does not<br>\nseem to be what you are looking for.</p>\n<p>If I understand right, what you want is something that converts a term into<br>\nvalid ML-code?<br>\nYou find this here: ML_Syntax.print_term</p>\n<p>I think the reason why @{make_string} is not production-suitable (besides<br>\nthe fact that for terms, it is not very readable) is that it is a bit of a<br>\nhack: It does not have an argument \"context\", so it has to guess which<br>\ncontext is appropriate for the term at hand.</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 294734456,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189291
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis already summarizes the situation nicely: @{make_string} / @{print}<br>\nis for tracing and debugging while doing Isabelle/ML development. The<br>\noutput is sometimes close to ML notation (e.g. term structure),<br>\nsometimes close to regular output (e.g. typ). In some situations there<br>\nmight be no usable output at all: the exact side-conditions change over<br>\ntime as the Poly/ML compiler evolves.</p>\n<p>Thus it is suitable (and very useful) for adhoc tests, but not suitable<br>\nfor another program reading the results. Even with perfect output, the<br>\nbuild-in print_depth prevents this. (The print_depth is very important<br>\nto avoid bombing the system when printing really big values.)</p>\n<p>The default pretty printing with markup conforms to this overall idea of<br>\n@{make_string} / @{print} as adhoc diagnostic output. That was the start<br>\nof the thread: the &lt;markup&gt; that appears routinely when printing<br>\nstructured values.</p>\n<p>Makarius</p>",
        "id": 294734475,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189298
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nHi Dominique,</p>\n<p>No, I want exactly Abs (\"x\", TFree (\"'a\", [\"HOL.type\"]), Bound 0),<br>\nand it's what I get in the case of a value of type MyTerm.term (which I <br>\nuse because the system doesn't know how to pretty print the type part of <br>\nit, because it is of type MyTerm.typ)</p>\n<p>And I don't want a context involved (at least, not unless I can get two <br>\ncontexts to co-exist together - which the latest messages in this thread <br>\nsuggest may be possible).  PolyML.makestring is of general <br>\napplicability, far beyond situations where there is an Isabelle context.</p>\n<p>Cheers,</p>\n<p>Jeremy</p>",
        "id": 294734523,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189317
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nHi Makarius,</p>\n<p>From the length of this email thread, and the absence in it of any <br>\ninformation giving an answer as to how I should be doing the equivalent <br>\nof PolyML.makestring, I infer that this function has been made <br>\nunavailable with nothing to take its place.</p>\n<p>Is this so?  And if so, I'm curious as to why it was removed?</p>\n<p>Thanks</p>\n<p>Jeremy</p>",
        "id": 294734544,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189322
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nHi Makarius,</p>\n<p>OK, I've downloaded Isabelle 2018 RC0, and got your attached Scratch.thy <br>\nto work (which was as follows)</p>\n<p>theory Scratch<br>\n   imports Pure<br>\nbegin</p>\n<p>ML \\&lt;open&gt;<br>\n   val Main_thy = Thy_Info.get_theory \"Main\";</p>\n<p>val ZF_thy = Thy_Info.get_theory \"ZF\";<br>\n\\&lt;close&gt;</p>\n<p>end</p>\n<p>and it still works when I substitute imports ZF for imports Pure.</p>\n<p>So no doubt I could grab a goal from the middle of a ZF proof and create <br>\na HOL term/cterm out of it.</p>\n<p>But how do I then start doing a proof in HOL involving that term?  The <br>\ntheory window won't let me put in another theory following the end of <br>\nthe first one, and it won't let me do<br>\ntheory Scratch<br>\n   imports ZF Main<br>\nand if I back up to the beginning and replace imports ZF by imports Main <br>\nthen it has forgotten the ML values which were declared.<br>\nSo how does one transfer ML values from a ZF proof to a proof in Main?</p>\n<p>Plus, there is the additional problem that<br>\nML_prf {* @{Isar.goal} *} doesn't work (why?) and that<br>\nalthough ML_val {* @{Isar.goal} *} works,<br>\nML_val {* ... *} seems to forget any ML value definitions anyway.<br>\nSo that seems like an additional impediment to the idea of transferring <br>\ncomputed ML terms from a ZF proof to a HOL proof.</p>\n<p>So, given that the problem is to take a goal from a ZF proof, compute a <br>\ngoal to be proved in HOL, and start a HOL proof with that new goal, how <br>\ncan I do that?</p>\n<p>Cheers,</p>\n<p>Jeremy</p>",
        "id": 294734676,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189369
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nHi,</p>\n<p>I find that when I use @{make_string} to get a string from a value, it <br>\nproduces something which is reported simply as</p>\n<p>val str = \"&lt;markup&gt;\": string,</p>\n<p>its length (String.size) is something enormous, and when exploded into <br>\nan enormous list of characters, seems to incorporate some sort of <br>\npretty-printing information.</p>\n<p>How do I get it simply as a string?  There is a function writeln which <br>\nwill print it on the screen as a sensible string, but how do I get this <br>\nstring as an ML value?</p>\n<p>thanks</p>\n<p>Jeremy</p>",
        "id": 294736297,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189917
    },
    {
        "content": "<p>From: \"Nagashima, Yutaka\" &lt;<a href=\"mailto:Yutaka.Nagashima@uibk.ac.at\">Yutaka.Nagashima@uibk.ac.at</a>&gt;<br>\nHi Jeremy,</p>\n<p>Dose this function trm_to_string [1] do the job?</p>\n<p>fun trm_to_string (ctxt:Proof.context) (trm:term) =  Syntax.string_of_term ctxt trm<br>\n |&gt; YXML.parse_body<br>\n |&gt; XML.content_of : string;</p>\n<p>davidg's comment here [2] might be useful as well.</p>\n<p>[1] <a href=\"https://github.com/data61/PSL/blob/master/PGT/PGT.ML#L23\">https://github.com/data61/PSL/blob/master/PGT/PGT.ML#L23</a><br>\n[2] <a href=\"https://stackoverflow.com/questions/26007442/how-do-i-convert-thm-conji-to-an-ascii-string-i-can-save-to-a-file\">https://stackoverflow.com/questions/26007442/how-do-i-convert-thm-conji-to-an-ascii-string-i-can-save-to-a-file</a></p>\n<p>Regards,<br>\nYutaka</p>",
        "id": 294736378,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189946
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSee also section 0.2.4 Printing ML values in the \"implementation\"<br>\nmanual, which is the first place to look for anything regarding<br>\nIsabelle/ML tool development.</p>\n<p>In particular it says:</p>\n<p>This is occasionally useful for diagnostic or demonstration purposes.<br>\n  Note that production-quality tools require proper user-level error<br>\n  messages, avoiding raw ML values in the output.</p>\n<p>In other words, you use @{make_string} or more conveniently @{print} for<br>\ntemporary output experiments, but use regular user-space print<br>\noperations for real output. The latter depends on what types of values<br>\nyou want to print, and what is the purpose of it.</p>\n<p>Makarius</p>",
        "id": 294736410,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189955
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nOne more explanation to clarify why you see \"&lt;markup&gt;\" here.</p>\n<p>@{make_string} produces a string containing special markup instructions<br>\n(e.g., for supporting ctrl-click in jEdit, type-annotations when hovering,<br>\nand many more things).<br>\nAnd now the ML toplevel gives you the value of the ML-value \"str\".<br>\nHowever, since ML-value are not necessarily strings, but complex values,<br>\nthose values are pretty printed.<br>\nSo, the ML-toplevel applies the equivalent to @{make_string} to the content<br>\nof \"str\".<br>\nAnd what you end up with is the result of the attempt to pretty print a<br>\nstring with markup (namely, @{make_string} (@{make_string} something)).</p>\n<p>If you use, e.g., \"tracing\" or \"warning\" to output the result of<br>\n@{make_string} instead, then you will get proper readable output.<br>\n(And \"tracing (@{make_string} (@{make_string} something))\" will output<br>\n\"&lt;markup&gt;\" no matter what 'something' is.)</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 294736445,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189967
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nHi Yutaka,</p>\n<p>Thanks, that helps wonderfully.</p>\n<p>Your function trm_to_string of course only works for terms, but<br>\nthe following fixes the output of @{make_string}, exactly what I want</p>\n<p>fun fix_markup str = str |&gt; YXML.parse_body |&gt; XML.content_of : string ;</p>\n<p>Thanks again!</p>\n<p>Jeremy</p>",
        "id": 294736578,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190007
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nHi Makarius,</p>\n<p>Thanks for the information that I shouldn't be using @{make_string}.<br>\nThis raises the obvious question of what I should be using.  Would it be <br>\npossible for you to tell me that?  Ie, what is the equivalent in the<br>\nmanaged ML environment called \"Isabelle/ML\" of the PolyML function<br>\nPolyML.makestring?</p>\n<p>Thanks</p>\n<p>Jeremy</p>",
        "id": 294736595,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190014
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThere is none. For quick adhoc debugging and diagnistics, there is<br>\n@{print} and @{make_string}. For production-quality output, you do it<br>\nyourself specifically for your data types, potentially using existing<br>\noperations like Syntax.pretty_term -- generally it is better to print<br>\nPretty.T than string.</p>\n<p>Makarius</p>",
        "id": 294736636,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190023
    }
]