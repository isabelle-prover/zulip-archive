[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear BNF experts,</p>\n<p>I was wondering whether there is an elegant way to prove such properties<br>\nabout BNFs:</p>\n<p>lemma fmmap_total:<br>\n  assumes \"⋀k v. fmlookup m k = Some v ⟹ (∃v'. f v' = v)\"<br>\n  obtains m' where \"m = fmmap f m'\"</p>\n<p>(this is for finite maps, but it could equally well work for lists)</p>\n<p>I can prove this easily by induction, but it feels like there should be<br>\na simpler way. Unfortunately, I can't figure it out.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294741315,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661191642
    },
    {
        "content": "<p>From: Traytel  Dmitriy &lt;<a href=\"mailto:traytel@inf.ethz.ch\">traytel@inf.ethz.ch</a>&gt;<br>\nHi Lars,</p>\n<p>The following lemma uses only the BNF properties of the map and set functions and bounded choice. This proof could be in principle automated for arbitrary BNFs.</p>\n<p>lemma fmmap_total_aux:<br>\n  assumes \"∀v ∈ fmran' m. ∃v'. f v' = v\"<br>\n  obtains m' where \"m = fmmap f m'\"<br>\n  apply atomize_elim<br>\n  apply (insert bchoice[OF assms])<br>\n  apply (erule exE)<br>\n  subgoal for g<br>\n    apply (intro exI[of _ \"fmmap g m\"])<br>\n    apply (auto simp only: fmap.map_comp o_apply fmap.map_ident cong: fmap.map_cong)<br>\n    done<br>\n  done</p>\n<p>Your actual lemma is a direct consequence but uses the fmap-specific fmlookup instead of the general BNF set function:</p>\n<p>lemma fmmap_total:<br>\n assumes \"⋀k v. fmlookup m k = Some v ⟹ (∃v'. f v' = v)\"<br>\n obtains m' where \"m = fmmap f m'\"<br>\n  apply (rule fmmap_total; auto intro: assms)<br>\n  done</p>\n<p>Hope that helps,<br>\nDmitriy</p>",
        "id": 294741359,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661191664
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi Dmitriy,</p>\n<blockquote>\n<p>The following lemma uses only the BNF properties of the map and set functions and bounded choice. This proof could be in principle automated for arbitrary BNFs.</p>\n</blockquote>\n<p>thanks for that. It didn't occur to me to use \"bchoice\". I agree that it<br>\ncould be automated, but it's probably a lemma that is too specific to be<br>\nof common use.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294741494,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661191703
    }
]