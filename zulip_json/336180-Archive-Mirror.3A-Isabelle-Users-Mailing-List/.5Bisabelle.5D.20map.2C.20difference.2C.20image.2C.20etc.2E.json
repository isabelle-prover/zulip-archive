[
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:johnwickerson@cantab.net\">johnwickerson@cantab.net</a>&gt;<br>\nHi,</p>\n<p>I recently improved my life quite a lot by assigning an infix operator symbol to the ‘map’ function. Expressions like “map (f x) (g y)” could become expressions like “f x <code> g y” -- much more readable without all those parentheses. As you can see, I chose (</code>) as my infix operator. </p>\n<p>But it got me thinking: why can’t I just use (`) instead? That is, the same symbol as is used for the image of a set. “Map” and “image” are pretty similar functions, after all:</p>\n<p>map : (‘a =&gt; ‘b) =&gt; ‘a list =&gt; ‘b list<br>\nimage: (‘a =&gt; ‘b) =&gt; ‘a set =&gt; ‘b set</p>\n<p>There’s no problem with (+) being polymorphic over any sort of number, so why can’t (`) be polymorphic over any sort of “collection”? And while we’re at it, we could make the set-minus operator (-) polymorphic too, so that when X and Y are of type “list”, then “X-Y” is the list obtained by removing from X all elements in Y.</p>\n<p>Would that work?</p>\n<p>Thanks,<br>\nJohn</p>",
        "id": 294276713,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660919031
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nHi John,</p>\n<p>the type classes of Isabelle are restricted to a single type parameter <br>\nand do not support constructor classes (i.e., type classes of higher kind).</p>\n<p>The latter restriction is the reason why your proposal cannot be <br>\nimplemented using Isabelle's type classes.</p>\n<p>If it is just about syntax, adhoc overloading would work. However, this <br>\ncan lead to many situations where explicit type constraints have to be <br>\nadded in order to avoid ambiguity. So I wouldn't go for that.</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294276724,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660919035
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nJust a side-remark: Scala has this insanely complex type-system that can <br>\ndo everything, if you know how it works. There are probably only a handful <br>\nof people who do.  E.g. see the discussion about \"map\" in the Scala <br>\nlibrary <br>\n<a href=\"http://stackoverflow.com/questions/1722726/is-the-scala-2-8-collections-library-a-case-of-the-longest-suicide-note-in-hist\">http://stackoverflow.com/questions/1722726/is-the-scala-2-8-collections-library-a-case-of-the-longest-suicide-note-in-hist</a></p>\n<p>The type-system of HOL is much less exciting, just a reduced version of <br>\nthe ML type-system, with the addition of plain-old type classes from <br>\noriginal Haskell, before that became very complex in other ways.</p>\n<p>Recently, I am often glad about that refreshing simplicity of both HOL and <br>\nML.  As can be seen on the isabelle-dev thread \"Unresponsive <br>\nIsabelle/jEdit\" <br>\n<a href=\"http://www.mail-archive.com/isabelle-dev@mailbroy.informatik.tu-muenchen.de/msg05115.html\">http://www.mail-archive.com/isabelle-dev@mailbroy.informatik.tu-muenchen.de/msg05115.html</a> <br>\nthe extremely compact Scala notation can lead to bad surprises, when <br>\nunintended combinators are added by the compiler, and the critical <br>\ndifference is hardly seen in the source text.</p>\n<p>Makarius</p>",
        "id": 294277620,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660919287
    }
]