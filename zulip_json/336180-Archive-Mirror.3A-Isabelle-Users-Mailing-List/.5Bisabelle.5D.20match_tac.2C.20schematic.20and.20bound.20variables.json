[
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>I stumbled upon some odd behaviour of match_tac. When match_tac</p>\n<p>- must match a schematic variable in the rule against a schematic<br>\n    variable in the goal and the schematic variable,</p>\n<p>- the schematic in the goal has bound variables as parameters,</p>\n<p>- one of these bound variables x occurs at least twice in the<br>\n    parameters, and</p>\n<p>- there is another bound variable between the occurences of x,</p>\n<p>then match_tac fails (i.e. empty proof sequence / failed to apply proof <br>\nmethod).</p>\n<p>Has anyone got an explanation for this behaviour? I would have expected <br>\nthat the implementation of matching for this quasi-first-order case is <br>\ncomplete.</p>\n<p>This behaviour occurs both in Isabelle 2012 and in a current development <br>\nsnapshot (0cd62cb233e0).</p>\n<p>definition \"TT ≡ λx. True\"<br>\nlemma TT_I: \"TT x\" unfolding TT_def by simp</p>\n<p>schematic_lemma \"⋀x y. TT (?P x y x )\"<br>\n   apply (tactic {* match_tac @{thms TT_I} 1 *})<br>\n   (* fails *)<br>\n   oops</p>\n<p>schematic_lemma \"⋀x y. TT (?P x y )\"<br>\n   apply (tactic {* match_tac @{thms TT_I} 1 *})<br>\n   done</p>\n<p>schematic_lemma \"⋀x y. TT (?P x x y )\"<br>\n   apply (tactic {* match_tac @{thms TT_I} 1 *})<br>\n   done</p>\n<p>schematic_lemma \"⋀x y. TT (P x y x )\"<br>\n   apply (tactic {* match_tac @{thms TT_I} 1 *})<br>\n   done</p>\n<p>schematic_lemma \"⋀x. TT (?P x y x )\"<br>\n   apply (tactic {* match_tac @{thms TT_I} 1 *})<br>\n   done</p>\n<p>-- Lars</p>",
        "id": 294246364,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909072
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nLarry is the one to explain what really happens.</p>\n<p>When I came across match_tac for the first time as a very young student in <br>\n1993, I was already wondering about it -- but it was always document in <br>\nthe manner of what is now in \"implementation\" manual (section 4.2.1):</p>\n<p>\\item @{ML match_tac}, @{ML ematch_tac}, @{ML dmatch_tac}, and @{ML<br>\n   bimatch_tac} are similar to @{ML resolve_tac}, @{ML eresolve_tac},<br>\n   @{ML dresolve_tac}, and @{ML biresolve_tac}, respectively, but do<br>\n   not instantiate schematic variables in the goal state.</p>\n<p>Flexible subgoals are not updated at will, but are left alone.<br>\n   Strictly speaking, matching means to treat the unknowns in the goal<br>\n   state as constants; these tactics merely discard unifiers that would<br>\n   update the goal state.</p>\n<p>This sounds like it is better not to lean out of the window too far.</p>\n<p>Makarius</p>",
        "id": 294246486,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909102
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nSorry but I have totally forgotten about these. They are relics from a remote past. <br>\nLarry</p>",
        "id": 294246498,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909109
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nIt is the documentation that is leaning too far out of the window. The<br>\ndifference between</p>\n<p>schematic_lemma \"⋀x y. TT (?P x y x )\"<br>\n  apply (tactic {* match_tac @{thms TT_I} 1 *})<br>\n  (* fails *)<br>\n  oops</p>\n<p>and</p>\n<p>schematic_lemma \"⋀x y. TT (P x y x )\"<br>\n  apply (tactic {* match_tac @{thms TT_I} 1 *})<br>\n  done</p>\n<p>shows that in some situations it is not doing what it claims: \"matching means to<br>\ntreat the unknowns in the goal state as constants\".</p>\n<p>Tobias</p>",
        "id": 294246511,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909115
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe documentation is also going back to Larry.</p>\n<p>I don't complain about anything he did there many years ago.  One needs to <br>\nbe realistic about what certain parts of a system can do and what not.</p>\n<p>Makarius</p>",
        "id": 294246518,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909121
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI see that match_tac is basically part of the classical reasoner. It is for applying rules safely without affecting the proof state. Any significant change in its behaviour would breaks lots of things, but it's conceivable that there's a bug in this example. Or else the documentation isn't quite accurate.<br>\nLarry</p>",
        "id": 294246532,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909127
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAm 12/08/2013 22:39, schrieb Lawrence Paulson:</p>\n<blockquote>\n<p>I see that match_tac is basically part of the classical reasoner. It is for applying rules safely without affecting the proof state. Any significant change in its behaviour would breaks lots of things, but it's conceivable that there's a bug in this example. Or else the documentation isn't quite accurate.</p>\n</blockquote>\n<p>The term \"match\" has precisely the definition you quote in the documentation,<br>\nand that should be the specifiation of anything called \"match\". If the<br>\nimplementation does not conform, it should be fixed. I agree this may be hard in<br>\nthis case and it is not a top priority. Alternatively the documentation should<br>\ncarry a warning.</p>\n<p>Tobias</p>\n<blockquote>\n<p>Larry</p>\n<p>On 12 Aug 2013, at 19:09, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<blockquote>\n<p>The documentation is also going back to Larry.</p>\n<p>I don't complain about anything he did there many years ago.  One needs to be realistic about what certain parts of a system can do and what not.</p>\n</blockquote>\n</blockquote>",
        "id": 294246544,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909133
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nPeter and I did some investigation and this seems to be the source of <br>\nthis behaviour: If two schematic variables (with only bound variables as <br>\narguments) are to be unified, Unifiers.unify will always provide a <br>\nsingle unifier with the schematic variables reordered.</p>\n<p>It might be interesting to note that also Unify.matchers is not able to <br>\nmatch such term.</p>\n<p>theory Scratch imports Main begin (* Isabelle 2013 *)</p>\n<p>ML {*<br>\n   val pat = @{cpat \"⋀x y. ?P x y\"}<br>\n   val term = @{cpat \"⋀x y. ?Q x y x\"}<br>\n   val pair = [(term_of pat, term_of term)]</p>\n<p>fun maxidx_of_cterm ct = case rep_cterm ct of<br>\n     {maxidx, ...} =&gt; maxidx<br>\n   val maxidx = Int.max (maxidx_of_cterm pat, maxidx_of_cterm term)<br>\n*}</p>\n<p>ML {*<br>\n   fun pretty_subst ctxt ((name,_), (typ, term)) =<br>\n     [Pretty.str name, Syntax.pretty_typ ctxt typ, Syntax.pretty_term <br>\nctxt term]<br>\n     |&gt; Pretty.list \"\" \"\"<br>\n   val pretty_env =<br>\n     Envir.term_env #&gt; Vartab.dest #&gt; map (pretty_subst @{context}) #&gt; <br>\nPretty.big_list \"Unifier\"<br>\n   val pretty_env_list = map pretty_env #&gt; Pretty.big_list \"Unifiers\"<br>\n*}</p>\n<p>ML {*<br>\n   Unify.unifiers (@{theory}, Envir.empty maxidx, pair)<br>\n   |&gt; Seq.list_of<br>\n   |&gt; map fst<br>\n   |&gt; pretty_env_list<br>\n   |&gt; Pretty.string_of<br>\n   |&gt; tracing<br>\n*}</p>\n<p>ML {*<br>\n   Unify.matchers @{theory} pair |&gt; Seq.list_of |&gt; pretty_env_list |&gt; <br>\nPretty.string_of |&gt; tracing<br>\n*}</p>",
        "id": 294246566,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909146
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nLarry is of course welcome to reformulate this snippet of the <br>\ndocumentation to fit better to the implementation, whatever it really is.</p>\n<p>A warning like \"the documentation might be inaccurate\" does not make any <br>\nsense, because this always applies by default to <em>any</em> documentation.</p>\n<p>Whenever someone sees a function somewhere, and some documentation <br>\nelsewhere, maybe together with some real-world uses of it in some working <br>\napplication, one always needs to apply common-sense to estimate if it will <br>\ndo a different job in a different context.</p>\n<p>This principle applies to any complex software system, library, framework, <br>\netc.  For Isabelle the level of precision is actually above average -- I <br>\nam working routinely with more industrial things like the Java Standard <br>\nlibraries that are much worse.  And what Apple, Oracle, IBM usually do in <br>\ncases of uncertainty is to adapt the manual only.</p>\n<p>Makarius</p>",
        "id": 294246645,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909182
    }
]