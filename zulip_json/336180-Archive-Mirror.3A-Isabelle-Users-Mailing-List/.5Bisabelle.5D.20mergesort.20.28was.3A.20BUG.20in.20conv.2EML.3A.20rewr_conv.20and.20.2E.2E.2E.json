[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Wed, 24 Oct 2012, Christian Sternagel wrote:</p>\n<blockquote>\n<p>On 10/23/2012 08:17 PM, Makarius wrote:</p>\n<blockquote>\n<p>(Next time I will tell a story how an efficient and fully verified<br>\nmerge-sort function included in the core sources caused several days of<br>\nworries.)</p>\n</blockquote>\n<p>Please tell the story.</p>\n</blockquote>\n<p>I will try, but it has to be shorter than usual: I've just returned from <br>\ntravel and I am preparing for the next departure starting in 1.5 days.</p>\n<blockquote>\n<p>I'm particularly interested since in the near future I was going to <br>\nsuggest to run some tests whether it would make sense (performance-wise) <br>\nto replace the existing sorting algorithm in the Isabelle sources by the <br>\none from (sorry for the self-advertisement):</p>\n<p><a href=\"http://link.springer.com/article/10.1007/s10817-012-9260-7\">http://link.springer.com/article/10.1007/s10817-012-9260-7</a></p>\n</blockquote>\n<p>The website seems to be down at the moment, and it does not look like a <br>\npublicly available thing anyway (without paying extra).</p>\n<blockquote>\n<p>As I'm writing this email I saw that the current sorting algorithm in <br>\nsrc/Pure/library.ML actually already is a very similar mergesort (last <br>\ntime I checked, it wasn't ;)).</p>\n</blockquote>\n<p>You probably mean this version <br>\n<a href=\"http://isabelle.in.tum.de/repos/isabelle/rev/b28defd0b5a5\">http://isabelle.in.tum.de/repos/isabelle/rev/b28defd0b5a5</a> and not \"the <br>\ncurrent\" which is hardly defined for an ever growing set of approx. 50000 <br>\nelements.  Its changelog reads \"replaced quicksort by mergesort, which <br>\nmight be a bit more efficient for key operations like Ord_List.make, <br>\nSorts.minimize_sort;\".  This was the most positive formulation I could <br>\nfind after spending too much time with the issue to gain almost nothing.</p>\n<p>The code has become a bit longer, a tiny little bit better-defined in what <br>\nit does, but we also had to unearth a much older sort function to <br>\naccomodate the HO unification code with its special demands, see <br>\n<a href=\"http://isabelle.in.tum.de/repos/isabelle/rev/a0d8abca8d7a\">http://isabelle.in.tum.de/repos/isabelle/rev/a0d8abca8d7a</a></p>\n<p>When you proposed to use your verified version of mergesort (derived from <br>\nthe Haskell library) some month ago, I was not very excited for formal <br>\nsoftware-quality reasons. Things deep down there that have been used for a <br>\nlong time in certain ways follow their own requirements.  Formal <br>\nspecification and formal proofs are fine, but not yet good software <br>\nengineering.  Too much \"eating your own dogfood\" is bad for health.</p>\n<p>Since I am usually a bit too open to experimentation, when Stefan <br>\nBerghofer came with some measurements about a hot-spot in the management <br>\nof sorts in the inference kernel, we gave it a try nonetheless.  One <br>\nresult was no measureable performance improvement, see the log entry <br>\nquoted above.  Another result was the discovery that the Unify module by <br>\nLarry from 25 years ago does not really \"sort\" where it invokes a function <br>\ncalled \"sort\", but something else.  The \"quasi order\" it gives here is not <br>\ntransitive, resulting in funny results with the proven mergesort.</p>\n<blockquote>\n<p>Just curious: Is there a specific reason for not using the function <br>\ncomposition \"trick\" to avoid 'rev' in 'ascending'?</p>\n</blockquote>\n<p>IIRC, the original version copied from Haskell was composing many <br>\nfunctional closures according to the length of the list.  This might be <br>\nefficient in Haskell (I have no substantial experience with it), but in <br>\nthe conventional evaluation model of ML it is not.  Plain rev is not very <br>\nexpensive, and there is no reason to avoid it as \"premature optimization\". <br>\nDavid Matthews is quite smart to manage the heap for us, so you don't have <br>\nto be afraid of some temporary allocations.</p>\n<p>Makarius</p>",
        "id": 294224298,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899161
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c-sterna@jaist.ac.jp\">c-sterna@jaist.ac.jp</a>&gt;<br>\nPlease tell the story. I'm particularly interested since in the near <br>\nfuture I was going to suggest to run some tests whether it would make <br>\nsense (performance-wise) to replace the existing sorting algorithm in <br>\nthe Isabelle sources by the one from (sorry for the self-advertisement):</p>\n<p><a href=\"http://link.springer.com/article/10.1007/s10817-012-9260-7\">http://link.springer.com/article/10.1007/s10817-012-9260-7</a></p>\n<p>As I'm writing this email I saw that the current sorting algorithm in <br>\nsrc/Pure/library.ML actually already is a very similar mergesort (last <br>\ntime I checked, it wasn't ;)). Just curious: Is there a specific reason <br>\nfor not using the function composition \"trick\" to avoid 'rev' in <br>\n'ascending'?</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294225681,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899855
    }
]