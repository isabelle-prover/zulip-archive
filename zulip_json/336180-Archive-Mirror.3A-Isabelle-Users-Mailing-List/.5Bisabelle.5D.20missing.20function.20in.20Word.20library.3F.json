[
    {
        "content": "<p>From: Sascha Boehme &lt;<a href=\"mailto:boehmes@in.tum.de\">boehmes@in.tum.de</a>&gt;<br>\nHello,</p>\n<p>while studying the current (most recent) Word library, I didn't find a function which extracts a part from a word. I started to implement a function on my own, but I'm sure there must be a better version (especially wrt. to doing proofs on it).</p>\n<p>Here is my solution:</p>\n<p>definition word_extract :: \"'a::len0 word =&gt; int =&gt; int =&gt; 'b::len word\"<br>\nwhere \"word_extract w from to = (of_bl o rev o drop (nat from) o take (nat to) o rev o to_bl) w\"</p>\n<p>I'm grateful for any hints how to improve this.</p>\n<p>Regards,<br>\nSascha</p>",
        "id": 294057045,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660822004
    },
    {
        "content": "<p>From: John Matthews &lt;<a href=\"mailto:matthews@galois.com\">matthews@galois.com</a>&gt;<br>\nHi Sascha,</p>\n<p>Here is the bit-segment extraction operator I've been using:</p>\n<p>text {* Bit segment extraction operator: Given lb, mb :: int, where<br>\nlb = the least significant bit to extract, and mb = the most significant<br>\nbit to extract, then<br>\n@{term \"(sliceLH lb mb w)\"} extracts<br>\nbit segment [mb:lb] from bitvector w (assuming the result bitwidth<br>\ntype @{typ 'b} is large enough to hold it). *}</p>\n<p>definition<br>\n   sliceLH :: \"nat \\&lt;Rightarrow&gt; nat \\&lt;Rightarrow&gt; 'a::len word  <br>\n\\&lt;Rightarrow&gt; 'b::len word\" where<br>\n  \"sliceLH lb mb w \\&lt;equiv&gt; ucast ((w AND mask (mb + 1)) &gt;&gt; lb)\"</p>\n<p>Hope this helps,<br>\n-john</p>",
        "id": 294057137,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660822053
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:gerwin.klein@nicta.com.au\">gerwin.klein@nicta.com.au</a>&gt;<br>\nSascha Boehme wrote:<br>\nIf that is your current definition, John's version is probably what you want <br>\n(reasoning about mask and shift is easier than type conversions).</p>\n<p>There is also the built-in \"slice :: nat =&gt; 'a word =&gt; 'b word\". The nat <br>\nsays from where to slice, the target type length says how much to slice.</p>\n<p>Cheers,<br>\nGerwin</p>",
        "id": 294057147,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660822059
    }
]