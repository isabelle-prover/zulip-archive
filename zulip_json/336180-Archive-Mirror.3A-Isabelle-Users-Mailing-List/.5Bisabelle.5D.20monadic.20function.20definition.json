[
    {
        "content": "<p>From: Gergely Buday &lt;<a href=\"mailto:gbuday@gmail.com\">gbuday@gmail.com</a>&gt;<br>\nHi,</p>\n<p>I have found</p>\n<p>partial_function (option)<br>\n  collatz :: \"nat ⇒ nat list option\"<br>\nwhere<br>\n  \"collatz n =<br>\n  (if n ≤ 1 then Some [n]<br>\n   else if even n<br>\n     then do { ns ← collatz (n div 2); Some (n # ns) }<br>\n     else do { ns ← collatz (3 * n + 1);  Some (n # ns)})\"</p>\n<p>in src/HOL/Ex/Fundefs.thy</p>\n<p>Where can I find a description of such monadic definitions?</p>\n<p>I did not find it in the Isar reference and what I have found was the<br>\nearly history of it:</p>\n<p><a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2010-May/msg00055.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2010-May/msg00055.html</a></p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294287981,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922490
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Gergely,</p>\n<p>Definitions of recursive functions in a monad with execptions (via partial_function) is <br>\ndescribed in Alex Krauss' paper at PAR 2010 available from</p>\n<p><a href=\"http://www4.in.tum.de/~krauss/\">http://www4.in.tum.de/~krauss/</a></p>\n<p>Do-notation has been presented at the Isabelle Developer Workshop in 2010 by Christian <br>\nSternagel. His slides are available at:</p>\n<p><a href=\"http://isabelle.in.tum.de/nominal/activities/idw10/idw.html\">http://isabelle.in.tum.de/nominal/activities/idw10/idw.html</a></p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294287997,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922496
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nHi Gergely,</p>\n<p>note that do-notation itself is just syntactic sugar (as, e.g., also in <br>\nHaskell). So actually there is nothing important about it ;), it just <br>\nmakes some terms \"easier\" or maybe more concise to write down.</p>\n<p>And maybe obvious, but I'll say it anyway: \"partial_function\" and <br>\ndo-notation are completely orthogonal.</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294288013,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922502
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nSorry, I wanted to point at</p>\n<p><a href=\"http://isabelle.in.tum.de/website-Isabelle2014-RC3/dist/library/HOL/HOL-Library/Monad_Syntax.html\">http://isabelle.in.tum.de/website-Isabelle2014-RC3/dist/library/HOL/HOL-Library/Monad_Syntax.html</a></p>\n<p>in my last email, but forgot it. There you can see the actual <br>\ntranslation (keyword \"translations\"), which tells you everything there <br>\nis to know about do-notation (using itself the more basic adhoc <br>\noverloading mechanism).</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294288036,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922508
    },
    {
        "content": "<p>From: Gergely Buday &lt;<a href=\"mailto:gbuday@gmail.com\">gbuday@gmail.com</a>&gt;<br>\nChristian Sternagel wrote:</p>\n<blockquote>\n<p>And maybe obvious, but I'll say it anyway: \"partial_function\" and<br>\ndo-notation are completely orthogonal.</p>\n</blockquote>\n<p>Now it is obvious :-)</p>\n<p>Where can I find some description of the partial_function definition<br>\nmechanism? There is a page in the Isar reference manual but that is<br>\nnot very much detailed.</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294288076,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922520
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Gergely,</p>\n<p>As I wrote in my last post, Alex Krauss' paper about partial_function describes it. <br>\nAnother application can be found in Johannes' and my ITP paper this year:</p>\n<p><a href=\"http://www.infsec.ethz.ch/people/andreloc/publications/lochbihler14itp.pdf\">http://www.infsec.ethz.ch/people/andreloc/publications/lochbihler14itp.pdf</a></p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294288154,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922533
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nDear Gergely,</p>\n<p>there also is the AFP-entry Partial-Function-MR which allows you to define<br>\nsets of mutual recursive partial functions (which is not possible using the <br>\noriginal partial-function command). In the entry you also find further <br>\nexamples of partial functions, including Collatz and a potentially <br>\nnon-terminating evaluator for (a kind of) mu-recursive expressions.</p>\n<p>Best,<br>\nRené</p>",
        "id": 294289860,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923091
    }
]