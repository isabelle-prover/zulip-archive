[
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c-sterna@jaist.ac.jp\">c-sterna@jaist.ac.jp</a>&gt;<br>\nDear all,</p>\n<p>The below inductive definition did (not surprisingly) only work after <br>\nintroducing a monotonicity rule for emb. However, I came up with the <br>\nmono rule by \"pattern-matching\" against existing monotonicity rules. <br>\nSince the resulting induction schema is slightly odd, I was wondering <br>\nwhether I did something strange and what others do in such cases (when <br>\nmonotonicity is an issue).</p>\n<p>datatype 'a tree = Empty | Node 'a \"'a tree list\"</p>\n<p>inductive<br>\n   emb :: \"('a ⇒ 'a ⇒ bool) ⇒ 'a list ⇒ 'a list ⇒ bool\"<br>\n   for P :: \"('a ⇒ 'a ⇒ bool)\"<br>\nwhere<br>\n   emb_Nil [intro, simp]: \"emb P [] ys\"<br>\n| emb_Cons [intro] : \"emb P xs ys ⟹ emb P xs (y#ys)\"<br>\n| emb_Cons2 [intro]: \"P x y ⟹ emb P xs ys ⟹ emb P (x#xs) (y#ys)\"</p>\n<p>lemma emb_mono:<br>\n   assumes \"⋀x y. P x y ⟶ Q x y\"<br>\n   shows \"emb P s t ⟶ emb Q s t\"<br>\nproof<br>\n   assume \"emb P s t\"<br>\n   thus \"emb Q s t\"<br>\n     by (induct) (auto simp: assms)<br>\nqed</p>\n<p>inductive<br>\n   hemb :: \"('a ⇒ 'a ⇒ bool) ⇒ 'a tree ⇒ 'a tree ⇒ bool\"<br>\n   for P :: \"'a ⇒ 'a ⇒ bool\"<br>\nwhere<br>\n   hemb_Empty [intro, simp]: \"hemb P Empty t\" |<br>\n   hemb_Node [intro]: \"hemb P s t ⟹ t ∈ set ts ⟹ hemb P s (Node f ts)\" |<br>\n   hemb_Node2 [intro]: \"P f g ⟹ emb (hemb P) ss ts ⟹ hemb P (Node f ss) <br>\n(Node g ts)\"<br>\nmonos emb_mono</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294163507,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660854112
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nDear Christian,</p>\n<p>your monotonicity rule looks totally normal to me. When I need to supply custom <br>\nmonotonicity rules, I usually start by looking at the unsolved goals in the <br>\nmonotonicity proof. In your example, it looks like this:</p>\n<p>!!x y xa xb f g ss ts.<br>\n   x (?x33 x y xa xb f g ss ts) (?x34 x y xa xb f g ss ts) --&gt;<br>\n   y (?x33 x y xa xb f g ss ts) (?x34 x y xa xb f g ss ts) ==&gt;<br>\n   emb x ss ts --&gt; emb y ss ts</p>\n<p>The monotonicity solver essentially applies the declared monotonicity rules as <br>\nintroduction rules until all goals are finished. Hence, the above goal says that <br>\nyou need to provide a rule with conclusion \"emb x ss ts --&gt; emb y ss ts\" which <br>\nmay assume that \"x a b\" implies \"y a b\".</p>\n<p>Note that you could also have used the following monotonicity rule:</p>\n<p>\"P &lt;= Q ==&gt; emp P s t --&gt; emp Q s t\"</p>\n<p>Andreas</p>",
        "id": 294163527,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660854119
    }
]