[
    {
        "content": "<p>From: Peter Sewell &lt;<a href=\"mailto:Peter.Sewell@cl.cam.ac.uk\">Peter.Sewell@cl.cam.ac.uk</a>&gt;<br>\nA while back, Tobias suggested that better support for mutually<br>\nrecursive function definitions was in the pipeline.  It would be<br>\nuseful to know when we might hope for them, if there are any concrete<br>\nplans for them in a near-term release?  (so that we could avoid<br>\nembarking on tupling or higher-order encodings, eg for primrecs of n*m<br>\nmutually recursive functions, n each over m mutually recursive datatypes).</p>\n<p>many thanks,<br>\nPeter</p>",
        "id": 294041287,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815392
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi Peter,</p>\n<p>My new function package can do mutual recursion (by automatically <br>\nconstructing a function over the sum type internally). It is already <br>\navailable in the CVS version and will be included in the next release <br>\n(but don't ask me when that is :-)).</p>\n<p>The package has some more features concerning partiality, exotic pattern <br>\nmatching and so on, but you can safely ignore this if you stick to the <br>\nfollowing pattern:</p>\n<hr>\n<p>consts<br>\n   evn :: \"nat =&gt; bool\"<br>\n   od :: \"nat =&gt; bool\"</p>\n<p>function<br>\n   \"evn 0 = True\"<br>\n   \"evn (Suc n) = od n\"<br>\nand<br>\n   \"od 0 = False\"<br>\n   \"od (Suc n) = evn n\"<br>\nby pat_completeness auto</p>\n<p>termination<br>\n   by (auto_term \"measure (sum_case (%n. n) (%n. n))\")</p>\n<p>thm evn.simps<br>\nthm od.simps<br>\nthm evn_od.induct</p>\n<hr>\n<p>Note that since general recursion is supported, you need to do a <br>\ntermination proof. Just specifying an appropriate relation to the <br>\nauto-term method (as with recdef) should do. But the relation must be <br>\nspecified over the sum type in the case of mutual recursion.</p>\n<p>The \"by pat_completeness auto\" thing solves proof obligations about the <br>\npattern matching. You can read more about it in my IJCAR 2006 paper, but <br>\nif your functions are just primrec-style, you can just ignore it.</p>\n<p>HOL/ex/Fundefs.thy contains a few more \"function\"-Examples. Note that <br>\nespecially mutual recursion is only poorly tested, and that the syntax <br>\nwill change again in the near future. If this doesn't frighten you, you <br>\nare invited to try it, and I'll be happy about every feedback. :-)</p>\n<p>Alex</p>",
        "id": 294041326,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815410
    }
]