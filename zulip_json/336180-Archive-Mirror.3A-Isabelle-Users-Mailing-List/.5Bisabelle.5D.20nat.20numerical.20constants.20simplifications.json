[
    {
        "content": "<p>From: Viorel Preoteasa &lt;<a href=\"mailto:viorel.preoteasa@aalto.fi\">viorel.preoteasa@aalto.fi</a>&gt;<br>\nI have the following two lemmas:</p>\n<p>lemma \"(2 + (Suc  n)) = (3 + n)\"<br>\n  by simp</p>\n<p>lemma \"f (2 + (Suc n)) = f (3 + n)\"<br>\n  by simp</p>\n<p>The first one is proved by simp, but the proof on the <br>\nsecond lemma fails. How can I simplify numerical<br>\nconstants in context?</p>\n<p>Best regards,</p>\n<p>Viorel Preoteasa</p>",
        "id": 294263649,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915303
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nYou can use numeral_eq_Suc to rewrite numerals into \"Suc\"s,<br>\ne.g. 3 into Suc (Suc (Suc 0)).</p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294263676,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915311
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nI would have suggested</p>\n<p>lemma \"f (2 + (Suc n)) = f (3 + n)\"<br>\n   by (rule arg_cong) simp</p>\n<p>which works (thanks to backtracking?). Unfortunately, if you write the <br>\nsame as</p>\n<p>lemma \"f (2 + (Suc n)) = f (3 + n)\"<br>\n   apply (rule arg_cong)<br>\n   apply (simp)<br>\n   done</p>\n<p>in order to see the intermediate results, the prove fails, since \"apply <br>\n(rule arg_cong)\" does not change the goal. Is this intended? Is \"rule\" <br>\nallowed to leave a goal unchanged? (Btw: a little instantiation helps, <br>\ne.g., \"apply (rule arg_cong [of _ _ f])\").</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294263763,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915332
    },
    {
        "content": "<p>From: Viorel Preoteasa &lt;<a href=\"mailto:viorel.preoteasa@aalto.fi\">viorel.preoteasa@aalto.fi</a>&gt;<br>\nHi Chris,</p>\n<p>My context is more complicated than f … = f …<br>\nI need to instantiate an assumption (forall n . …) with n, 1+n, 2+n, …, 10+n<br>\nand among other things I get <br>\nf (y (1 + n)) = 1 + f (y n) + 1<br>\nf (y (2 + n)) = 1 + f (y (1 + n)) + 1<br>\n…<br>\nI need to get all these simplified to<br>\nf (y (10 + n)) = f (y n) + 10 and ultimately prove f (y (10 + n)) &gt;= 10 knowing<br>\nthat  f (y n) &gt;= 0.</p>\n<p>The problem occurred when using 3 + n which was not simplified anymore<br>\nto Suc … . At first it seemed impossible to go forward, but then I remembered<br>\nsledgehammer, and I used it. It suggested the lemma Suc3_eq_add_3.<br>\nUsing this lemma at the step (3+n), I could go forward. There were still<br>\nsome problems because I mixed (… + n) and (n + …), but then they<br>\nwere solved when changing everything to (… + n).</p>\n<p>Best regards,</p>\n<p>Viorel</p>",
        "id": 294263769,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915335
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nOn 01/28/2014 10:45 AM, Viorel Preoteasa wrote:</p>\n<blockquote>\n<p>Hi Chris,</p>\n<p>My context is more complicated than f … = f …<br>\nI need to instantiate an assumption (forall n . …) with n, 1+n, 2+n, …, 10+n<br>\nand among other things I get<br>\nf (y (1 + n)) = 1 + f (y n) + 1<br>\nf (y (2 + n)) = 1 + f (y (1 + n)) + 1<br>\n…<br>\nI need to get all these simplified to<br>\nf (y (10 + n)) = f (y n) + 10 and ultimately prove f (y (10 + n)) &gt;= 10 knowing<br>\nthat  f (y n) &gt;= 0.<br>\nI see.</p>\n</blockquote>\n<blockquote>\n<p>The problem occurred when using 3 + n which was not simplified anymore<br>\nto Suc … . At first it seemed impossible to go forward, but then I remembered<br>\nsledgehammer, and I used it. It suggested the lemma Suc3_eq_add_3.<br>\nUsing this lemma at the step (3+n), I could go forward. There were still<br>\nsome problems because I mixed (… + n) and (n + …), but then they<br>\nwere solved when changing everything to (… + n).<br>\nFor this case (i.e., commutativity) it might help to add \"ac_simps\" to <br>\nthe \"simp\" or \"auto\".</p>\n</blockquote>\n<p>cheers</p>\n<p>chris</p>\n<blockquote>\n<p>Best regards,</p>\n<p>Viorel</p>\n<p>On 28 Jan 2014, at 11:28, Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt; wrote:</p>\n<blockquote>\n<p>I would have suggested</p>\n<p>lemma \"f (2 + (Suc n)) = f (3 + n)\"<br>\n  by (rule arg_cong) simp</p>\n<p>which works (thanks to backtracking?). Unfortunately, if you write the same as</p>\n<p>lemma \"f (2 + (Suc n)) = f (3 + n)\"<br>\n  apply (rule arg_cong)<br>\n  apply (simp)<br>\n  done</p>\n<p>in order to see the intermediate results, the prove fails, since \"apply (rule arg_cong)\" does not change the goal. Is this intended? Is \"rule\" allowed to leave a goal unchanged? (Btw: a little instantiation helps, e.g., \"apply (rule arg_cong [of _ _ f])\").</p>\n<p>cheers</p>\n<p>chris<br>\n</p>\n</blockquote>\n<p>On 01/27/2014 03:56 PM, Viorel Preoteasa wrote:</p>\n<blockquote>\n<blockquote>\n<p>I have the following two lemmas:</p>\n<p>lemma \"(2 + (Suc  n)) = (3 + n)\"<br>\n   by simp</p>\n<p>lemma \"f (2 + (Suc n)) = f (3 + n)\"<br>\n   by simp</p>\n<p>The first one is proved by simp, but the proof on the<br>\nsecond lemma fails. How can I simplify numerical<br>\nconstants in context?</p>\n<p>Best regards,</p>\n<p>Viorel Preoteasa<br>\n</p>\n</blockquote>\n</blockquote>\n</blockquote>",
        "id": 294263825,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915360
    }
]