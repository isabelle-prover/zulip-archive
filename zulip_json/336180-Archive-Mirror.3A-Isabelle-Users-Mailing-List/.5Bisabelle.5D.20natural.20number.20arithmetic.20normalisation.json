[
    {
        "content": "<p>From: Michael Norrish &lt;<a href=\"mailto:Michael.Norrish@nicta.com.au\">Michael.Norrish@nicta.com.au</a>&gt;<br>\nThe following term arose inside a side-condition that the simplifier was attempting to discharge:</p>\n<p>(2::nat) ^ (2 * (2 * (2 * (2 * (2 * 1)))))</p>\n<p>The simp tactic being used included field_simps as a rewrite.</p>\n<p>The result was an apparent \"hang\" as Isabelle attempted to calculate 2 ^ 32 in unary arithmetic. </p>\n<p>You can see the behaviour by doing</p>\n<p>lemma \"(2::nat) ^ (2 * (2 * (2 * (2 * (2 * 1))))) = X\"<br>\n  apply (simp add: field_simps)</p>\n<p>It seems to me that this is yet more evidence that using 1 = Suc 0 as a rewrite is a bad idea.</p>\n<p>That aside, it would be nice if the simp technology could allow the use of an innocuous rewrite (field_simps), one that doesn't even mention Suc, alongside perfectly reasonable terms such as the one above.</p>\n<p>Michael<br>\n<a href=\"/user_uploads/14278/K1NoHLNFtd0okFzhsUAhAJgu/signature.asc\">signature.asc</a></p>",
        "id": 294148116,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848267
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nOn Mon, Nov 14, 2011 at 12:34 AM, Michael Norrish<br>\n&lt;<a href=\"mailto:Michael.Norrish@nicta.com.au\">Michael.Norrish@nicta.com.au</a>&gt; wrote:</p>\n<blockquote>\n<p>The following term arose inside a side-condition that the simplifier was attempting to discharge:</p>\n<p>(2::nat) ^ (2 * (2 * (2 * (2 * (2 * 1)))))</p>\n<p>The simp tactic being used included field_simps as a rewrite.</p>\n<p>The result was an apparent \"hang\" as Isabelle attempted to calculate 2 ^ 32 in unary arithmetic.</p>\n<p>You can see the behaviour by doing</p>\n<p>lemma \"(2::nat) ^ (2 * (2 * (2 * (2 * (2 * 1))))) = X\"<br>\n apply (simp add: field_simps)</p>\n</blockquote>\n<p>This is a very interesting puzzle, especially since, as you say,<br>\nfield_simps doesn't even mention Suc!</p>\n<p>After looking at the simp trace to see which rules were involved I<br>\nrealized that you can get the same blowup using \"simp only\" with a<br>\nsmall set of rules, none of which are in field_simps, and all of which<br>\nare in the default simpset:</p>\n<p>lemma \"(2::nat) ^ (2 * (2 * (2 * (2 * (2 * 1))))) = X\"<br>\napply (simp only: One_nat_def mult_Suc_right mult_0_right add_2_eq_Suc)</p>\n<p>Yet simply writing \"apply simp\" on the same goal reduces everything to<br>\njust a numeral.</p>\n<p>The weirdness involves these rewrite rules:</p>\n<p>lemma add_2_eq_Suc [simp]: \"2 + n = Suc (Suc n)\"<br>\nlemma add_2_eq_Suc' [simp]: \"n + 2 = Suc (Suc n)\"</p>\n<p>These rules originate quite a while ago:<br>\n<a href=\"http://isabelle.in.tum.de/repos/isabelle/rev/9d6514fcd584\">http://isabelle.in.tum.de/repos/isabelle/rev/9d6514fcd584</a></p>\n<p>Now, what happens if we simplify a term like \"2 + 0\" or \"0 + 2\", where<br>\nmore than one possible simp rule can apply? It turns out that the<br>\nsimplifier will rewrite \"2 + 0\" to \"2\" (using the additive zero law),<br>\nbut in the other order, \"0 + 2\" rewrites to \"Suc (Suc 0)\" (using rule<br>\nadd_2_eq_Suc'). So the presence of the add_commute rule really makes a<br>\ndifference here:</p>\n<p>lemma \"(2::nat) ^ (2 * (2 * (2 * (2 * (2 * 1))))) = X\"<br>\napply (simp add: add_commute) (* blows up with Suc *)</p>\n<blockquote>\n<p>It seems to me that this is yet more evidence that using 1 = Suc 0 as a rewrite is a bad idea.</p>\n</blockquote>\n<p>I agree. I think that a good guideline for the Isabelle simpset should<br>\nbe that no simp rule should ever insert a Suc into a subgoal that<br>\ndidn't already contain one.</p>\n<p>We have discussed removing \"1 = Suc 0\" as a simp rule on the dev<br>\nmailing list before:<br>\n<a href=\"https://mailmanbroy.informatik.tu-muenchen.de/pipermail/isabelle-dev/2009-February/000484.html\">https://mailmanbroy.informatik.tu-muenchen.de/pipermail/isabelle-dev/2009-February/000484.html</a></p>\n<p>My conclusion back then was that the only reason we have \"1 = Suc 0\"<br>\n[simp] is historical, since \"1\" used to be a mere abbreviation for<br>\n\"Suc 0\". It would be nice to finally get rid of it (along with<br>\nadd_2_eq_Suc and friends).</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294148173,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848291
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nIt would certainly be nice to get rid of these rewrites, but the task is<br>\ndaunting.</p>\n<p>Tobias</p>",
        "id": 294148186,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848298
    }
]