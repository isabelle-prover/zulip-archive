[
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@csee.ogi.edu\">brianh@csee.ogi.edu</a>&gt;<br>\nThe following theorems may be of some use:<br>\n  IntDiv.zmod_zadd_left_eq<br>\n  IntDiv.zmod_zadd_right_eq<br>\n  IntDiv.zmod_zmult1_eq<br>\n  IntDiv.zmod_zmult1_eq'<br>\n  IntDiv.zpower_zmod</p>\n<p>In particular, you can use them to prove congruence rules for modular <br>\narithmetic, such as:<br>\n[| x mod p = x' mod p; y mod p = y' mod p |]<br>\n ==&gt; (x + y) mod p = (x' + y') mod p</p>\n<p>and similarly for subtraction, multiplication and exponentiation. I'm not sure <br>\nif this will give you everything you want, but at least this should allow you <br>\nto remove the inner mod operations from your subgoals.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294044396,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816684
    },
    {
        "content": "<p>From: <a href=\"mailto:kuecuek@rbg.informatik.tu-darmstadt.de\">kuecuek@rbg.informatik.tu-darmstadt.de</a><br>\nhallo,</p>\n<p>i try to solve an equation but it is realy complex can anybody help me?<br>\nif i try with numbers then i can show it with \"auto\" but if i use variables <br>\nthen i can not proof it.</p>\n<p>the equations below are given </p>\n<p>y1 ^2 = x1 ^3 + a*x1 + b<br>\ny2 ^2 = x2 ^ 3 + a*x2 + b</p>\n<p>and </p>\n<p>x3 =  ((((y1 - y2) *  ((x1 - x2) ^ nat (p -2 ))) mod p) ^ 2 - x1 - x2) mod p<br>\ny3 = ((((y1 - y2) *  ((x1 - x2) ^ nat (p -2 ))) mod p) * (x1 - x3) - y1) mod p</p>\n<p>and i must to show that y3^2 = x3^3 + a*x3 + b</p>\n<p>if you put the definitionof y3 and x3 in last equation you would see how <br>\ncomplex it is :(</p>\n<p>can anybody give a trick to proof something like that?</p>\n<p>thanks a lot</p>",
        "id": 294045045,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816968
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI am afraid there is no automation for reasoning involving \"mod p\" where <br>\np is not a numeral.</p>\n<p>Tobias</p>\n<p><a href=\"mailto:kuecuek@rbg.informatik.tu-darmstadt.de\">kuecuek@rbg.informatik.tu-darmstadt.de</a> wrote:</p>",
        "id": 294045062,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816975
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThe correct way to formalise your system is by expressing the axiom in  <br>\nthe form</p>\n<p>[| B x False; S x |] ==&gt; False</p>\n<p>in the first place. Then it looks like you would have nothing to do.  <br>\nAs I mentioned earlier, we do not attempt to create complex formulas  <br>\nin the assumptions. In a formal sequent calculus this is simply  <br>\nimpossible: the available rules only allow formulas to be broken down,  <br>\nnot built up. (When used to construct a backward proof of course.)</p>\n<p>Larry Paulson</p>",
        "id": 294063107,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824481
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nErich Kummerfeld wrote:<br>\nYou can do this (but getting an extra assumption) as follows</p>\n<p>Level 0 (1 subgoal)<br>\n[| B x False; S x |] ==&gt; False</p>\n<ol>\n<li>\n<p>[| B x False; S x |] ==&gt; False<br>\nval it = [] : Thm.thm list</p>\n<blockquote>\n<p>by (datac conjI 1 1) ;<br>\nLevel 1 (1 subgoal)<br>\n[| B x False; S x |] ==&gt; False</p>\n</blockquote>\n</li>\n<li>\n<p>[| S x; B x False &amp; S x |] ==&gt; False</p>\n</li>\n</ol>\n<p>(or, if you like, the Isar equivalent, which I assume is</p>\n<p>apply (drule_tac conjI) ;<br>\napply assumption ;</p>\n<p>Jeremy</p>",
        "id": 294063193,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824506
    },
    {
        "content": "<p>From: Erich Kummerfeld &lt;<a href=\"mailto:ekummerfeld@gmail.com\">ekummerfeld@gmail.com</a>&gt;<br>\nHi,</p>\n<p>I'm fairly new to Isabelle and sequent calculus in general and am having a<br>\ncouple difficulties.  The first regards applying the conjI rule to a<br>\nhypothesis.  When I apply (drule conjI) to [| y; x|] ==&gt; x &amp; y I expect to<br>\nget x &amp; y ==&gt; x &amp; y, but instead get 1. y ==&gt; ?Q 2. [| y; x &amp; ?Q |] ==&gt; x &amp;<br>\ny.  Being able to deduct forwards from a hypothesis of form [| x; y |] to<br>\nget a new hypothesis of form x &amp; y is my goal here.</p>\n<p>The second problem I'm having is with the defining and use of axioms.  This<br>\nis the code I'm using:</p>\n<p>consts<br>\nS :: \"'a =&gt; bool\"<br>\nB :: \"'a =&gt; bool =&gt; bool\"</p>\n<p>axioms<br>\nsb: \"((B x y) &amp; (S x) ==&gt; y\"</p>\n<p>I'm not certain how I am defining or using these wrong, but when I try to<br>\nuse it in a theorem it does not do what I expect it to.</p>\n<p>theorem \"((B x z) &amp; (S x) ==&gt; z\"<br>\napply (simp add: sb)</p>\n<p>yields the empty result sequence error rather than the \"no subgoals!\" that I<br>\nwould expect.</p>\n<p>Thanks in advance for the help, I've been hammering at these problems all<br>\nday and have been able to boil them down to these simple cases but have no<br>\nidea why they are failing.</p>\n<p>-Erich Kummerfeld</p>",
        "id": 294063511,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824591
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nQuoting Erich Kummerfeld &lt;<a href=\"mailto:ekummerfeld@gmail.com\">ekummerfeld@gmail.com</a>&gt;:</p>\n<blockquote>\n<p>Hi,</p>\n<p>I'm fairly new to Isabelle and sequent calculus in general and am having a<br>\ncouple difficulties.  The first regards applying the conjI rule to a<br>\nhypothesis.  When I apply (drule conjI) to [| y; x|] ==&gt; x &amp; y I expect to<br>\nget x &amp; y ==&gt; x &amp; y, but instead get 1. y ==&gt; ?Q 2. [| y; x &amp; ?Q |] ==&gt; x &amp;<br>\ny.  Being able to deduct forwards from a hypothesis of form [| x; y |] to<br>\nget a new hypothesis of form x &amp; y is my goal here.</p>\n</blockquote>\n<p>By default, the drule method only eliminates the first assumption of  <br>\nthe rule, while in your case you want to eliminate both assumptions at  <br>\nonce. You can do this with \"apply (drule (1) conjI)\", where the (1)  <br>\nsays how many additional assumptions to match. It is practically the  <br>\nsame as \"apply (drule conjI, assumption)\".</p>\n<blockquote>\n<p>The second problem I'm having is with the defining and use of axioms.  This<br>\nis the code I'm using:</p>\n<p>consts<br>\nS :: \"'a =&gt; bool\"<br>\nB :: \"'a =&gt; bool =&gt; bool\"</p>\n<p>axioms<br>\nsb: \"((B x y) &amp; (S x) ==&gt; y\"</p>\n<p>I'm not certain how I am defining or using these wrong, but when I try to<br>\nuse it in a theorem it does not do what I expect it to.</p>\n<p>theorem \"((B x z) &amp; (S x) ==&gt; z\"<br>\napply (simp add: sb)</p>\n<p>yields the empty result sequence error rather than the \"no subgoals!\" that I<br>\nwould expect.</p>\n</blockquote>\n<p>Instead of using the simplifier, try using (erule sb) or (drule sb,  <br>\nsimp). The lemma sb does not work well as a simp rule, because it  <br>\ncontains a free variable in the assumptions that does not occur in the  <br>\nconclusion. Basically, the sb rule tells the simplifier to rewrite any  <br>\nterm \"y\" to \"True\", as long as the side-condition \"(B x y) &amp; (S x)\"  <br>\nholds. The problem is that the simplifier doesn't know what value of x  <br>\nto use when checking the side condition.</p>\n<blockquote>\n<p>Thanks in advance for the help, I've been hammering at these problems all<br>\nday and have been able to boil them down to these simple cases but have no<br>\nidea why they are failing.</p>\n<p>-Erich Kummerfeld</p>\n</blockquote>\n<p>Hope this helps,</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294063885,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824727
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThe step that you want to perform is not how the calculus is intended  <br>\nto be used, so you should not expect to get a good outcome. The  <br>\ncorrect way to prove this result is by splitting the conjunction  <br>\nrather than trying to create an identical conjunction. More generally,  <br>\nthe usual proof technique involves breaking down the assumptions and  <br>\ngoals into atomic elements.</p>\n<p>Therefore, try instead</p>\n<p>apply (rule conjI)</p>\n<p>Larry Paulson</p>",
        "id": 294064048,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824794
    },
    {
        "content": "<p>From: Perry James &lt;<a href=\"mailto:perry@dsrg.org\">perry@dsrg.org</a>&gt;<br>\nHi Erich,<br>\n  For your first question, I think you want to use an introduction rule<br>\ninstead of an elimination.  I haven't yet worked with axioms, so I'll leave<br>\nthat to others.<br>\n  Hope this helps,<br>\n  Perry</p>\n<p>lemma \"[| x; y |] ==&gt; x &amp; y\"<br>\n  apply (rule conjI)<br>\n  apply (assumption)<br>\n  apply (assumption)<br>\ndone</p>",
        "id": 294064419,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824929
    },
    {
        "content": "<p>From: Erich Kummerfeld &lt;<a href=\"mailto:ekummerfeld@gmail.com\">ekummerfeld@gmail.com</a>&gt;<br>\nHi Perry,</p>\n<p>The trick I'm trying to accomplish with the first problem actually ties into<br>\nthe second problem I'm having.  Basically I'm trying to solve [| B x False;<br>\nS x |] ==&gt; False by transforming it into [| B x False &amp; S x |] ==&gt; False and<br>\nthen using the axiom I mentioned earlier.  Neither of these steps appears to<br>\nwork though and that's my confusion.</p>\n<p>Best,<br>\nErich</p>",
        "id": 294064610,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824999
    }
]