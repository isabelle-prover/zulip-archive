[
    {
        "content": "<p>From: \"Klein, Gerwin (Data61, Kensington NSW)\" &lt;<a href=\"mailto:Gerwin.Klein@data61.csiro.au\">Gerwin.Klein@data61.csiro.au</a>&gt;<br>\n<a href=\"https://www.isa-afp.org/entries/Isabelle_C.html\">https://www.isa-afp.org/entries/Isabelle_C.html</a></p>\n<p>Isabelle/C<br>\nby Frédéric Tuong and Burkhart Wolff</p>\n<p>We present a framework for C code in C11 syntax deeply integrated into<br>\n  the Isabelle/PIDE development environment. Our framework provides an<br>\n  abstract interface for verification back-ends to be plugged-in<br>\n  independently. Thus, various techniques such as deductive program<br>\n  verification or white-box testing can be applied to the same source,<br>\n  which is part of an integrated PIDE document model. Semantic back-ends<br>\n  are free to choose the supported C fragment and its semantics. In<br>\n  particular, they can differ on the chosen memory model or the<br>\n  specification mechanism for framing conditions. Our framework supports<br>\n  semantic annotations of C sources in the form of comments. Annotations<br>\n  serve to locally control back-end settings, and can express the term<br>\n  focus to which an annotation refers. Both the logical and the<br>\n  syntactic context are available when semantic annotations are<br>\n  evaluated. As a consequence, a formula in an annotation can refer both<br>\n  to HOL or C variables. Our approach demonstrates the degree of<br>\n  maturity and expressive power the Isabelle/PIDE sub-system has<br>\n  achieved in recent years. Our integration technique employs Lex and<br>\n  Yacc style grammars to ensure efficient deterministic parsing.  This<br>\n  is the core-module of Isabelle/C; the AFP package for Clean and<br>\n  Clean_wrapper as well as AutoCorres and AutoCorres_wrapper (available<br>\n  via git) are applications of this front-end.</p>\n<p>Enjoy!<br>\nGerwin</p>",
        "id": 294767505,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661202625
    }
]