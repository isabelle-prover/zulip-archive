[
    {
        "content": "<p>From: Tim Newsham &lt;<a href=\"mailto:newsham@lava.net\">newsham@lava.net</a>&gt;<br>\n[possible duplicate, I jumped the gun on sending the first before I was <br>\nproperly subscribed].</p>\n<p>I'm trying to prove a simple proof related to the \"reverse\" proof<br>\nin the tutorial (I have the rest of the tutorial theory here<br>\nas well including lemmas app_Nil2, app_assoc, rev_app and rev_rev):</p>\n<p>--- snip ---<br>\n          revH :: \"'a list =&gt; 'a list =&gt; 'a list\"</p>\n<p>primrec<br>\n   \"revH [] ys = ys\"<br>\n   \"revH (x # xs) ys = revH xs (x # ys)\"<br>\n...</p>\n<p>lemma rev_revH: \"revH xs ys = rev xs @ ys\"<br>\n   apply(induct_tac xs)<br>\n   apply(auto)<br>\n   done</p>\n<p>lemma rev_rev2: \"rev xs = revH xs []\"<br>\n   apply(induct_tac xs)<br>\n   apply(auto)<br>\n   done<br>\n--- snip ---</p>\n<p>when I evaluate the first lemma it is able to automatically reduce the problem <br>\nto the goal:</p>\n<p>forall a list.<br>\n        revH list ys = rev list @ ys ==&gt;<br>\n        revH list (a # ys) = rev list @ a # ys</p>\n<p>To me this seems to imply that this is solved, but I guess Isabelle doesn't see <br>\nit that way.  I tried to strengthen the proof by saying<br>\n\"!! ys .\" but that didn't seem to have any effect.  What do I need to<br>\ndo here to complete this proof?</p>\n<p>Tim Newsham<br>\n<a href=\"http://www.thenewsh.com/~newsham/\">http://www.thenewsh.com/~newsham/</a></p>",
        "id": 294050792,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819375
    },
    {
        "content": "<p>From: Amine Chaieb &lt;<a href=\"mailto:chaieb@in.tum.de\">chaieb@in.tum.de</a>&gt;<br>\nIn general it is much better to use the \"induct\" method insead of the <br>\ninduct_tac. In your case you need to generalize over ys, since in the <br>\nrecursive call ys is modified by revH.</p>\n<p>The following works for me:</p>\n<p>lemma rev_revH: \"revH xs ys = rev xs @ ys\"<br>\n   by (induct xs arbitrary: ys, auto)</p>\n<p>If you insist on induct_tac:</p>\n<p>lemma rev_revH: \"ALL ys. revH xs ys = rev xs @ ys\"<br>\n   apply (induct_tac xs)<br>\n   apply simp_all<br>\n   done</p>\n<p>Amine.</p>\n<p>Tim Newsham wrote:</p>",
        "id": 294050811,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819386
    },
    {
        "content": "<p>From: Tim Newsham &lt;<a href=\"mailto:newsham@lava.net\">newsham@lava.net</a>&gt;</p>\n<blockquote>\n<p>lemma rev_revH: \"revH xs ys = rev xs @ ys\"<br>\n by (induct xs arbitrary: ys, auto)</p>\n</blockquote>\n<p>when I try this I get<br>\n   *** Error in method \"HOL.induct\":<br>\n   *** method \"induct\": bad arguments<br>\n   ***   : ys<br>\n   *** At command \"by\".<br>\nusing the FreeBSD packages isabelle-2005 and proofgeneral-xemacs-3.6.<br>\n(I also tried without the colon and got a different error).</p>\n<blockquote>\n<p>If you insist on induct_tac:</p>\n<p>lemma rev_revH: \"ALL ys. revH xs ys = rev xs @ ys\"<br>\n apply (induct_tac xs)<br>\n apply simp_all<br>\n done</p>\n</blockquote>\n<p>It's not so much that I insist as I was unaware that there is a separate <br>\n\"induct\" :) This worked fine for me and was what I was going for with my <br>\n\"strengthened proof\" I mentioned earlier.  I thought (incorrectly) that <br>\n\"!! ys .\" would do what \"ALL ys .\" does.  Its still not clear to me<br>\nwhat the difference is, and I guess I need to read up on this some more.</p>\n<blockquote>\n<p>Amine.</p>\n<p>Tim Newsham wrote:</p>\n<blockquote>\n<p>[possible duplicate, I jumped the gun on sending the first before I was <br>\nproperly subscribed].</p>\n<p>I'm trying to prove a simple proof related to the \"reverse\" proof<br>\nin the tutorial (I have the rest of the tutorial theory here<br>\nas well including lemmas app_Nil2, app_assoc, rev_app and rev_rev):</p>\n<p>--- snip ---<br>\n         revH :: \"'a list =&gt; 'a list =&gt; 'a list\"</p>\n<p>primrec<br>\n  \"revH [] ys = ys\"<br>\n  \"revH (x # xs) ys = revH xs (x # ys)\"<br>\n...</p>\n<p>lemma rev_revH: \"revH xs ys = rev xs @ ys\"<br>\n  apply(induct_tac xs)<br>\n  apply(auto)<br>\n  done</p>\n<p>lemma rev_rev2: \"rev xs = revH xs []\"<br>\n  apply(induct_tac xs)<br>\n  apply(auto)<br>\n  done<br>\n--- snip ---</p>\n<p>when I evaluate the first lemma it is able to automatically reduce the <br>\nproblem to the goal:</p>\n<p>forall a list.<br>\n       revH list ys = rev list @ ys ==&gt;<br>\n       revH list (a # ys) = rev list @ a # ys</p>\n<p>To me this seems to imply that this is solved, but I guess Isabelle doesn't <br>\nsee it that way.  I tried to strengthen the proof by saying<br>\n\"!! ys .\" but that didn't seem to have any effect.  What do I need to<br>\ndo here to complete this proof?</p>\n<p>Tim Newsham<br>\n<a href=\"http://www.thenewsh.com/~newsham/\">http://www.thenewsh.com/~newsham/</a></p>\n</blockquote>\n</blockquote>\n<p>Tim Newsham<br>\n<a href=\"http://www.thenewsh.com/~newsham/\">http://www.thenewsh.com/~newsham/</a></p>",
        "id": 294050818,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819391
    }
]