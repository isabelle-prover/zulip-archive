[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nI found that normalisation introduces fresh type variables when the word type from <br>\nHOL-Word occurs in the goal statement. Here is a tiny example:</p>\n<p>theory Scratch imports \"~~/src/HOL/Word/Word\" begin</p>\n<p>lemma \"(2 + 3 :: 4 word) = 3 + 2\"<br>\n   using [[show_consts, show_sorts]]<br>\napply normalization</p>\n<p>Before the call to normalization, there are no type variables in the goal state. The <br>\nnormalization method turns the goal into the following:</p>\n<p>uint (Word.Word (snd (divmod_int (uint (Word.Word 3) + uint (Word.Word 2)) 4294967296))) =<br>\nuint (Word.Word (snd (divmod_int (uint (Word.Word 2) + uint (Word.Word 3)) 4294967296)))</p>\n<p>The unexpected thing is that each occurrence of Word.Word now has a different type with a <br>\nschematic type variable, i.e., Word.Word :: int =&gt; ?'a word, Word.Word :: int =&gt; ?'b word, <br>\netc. Correspondingly, every occurrence of uint also has a type variable in there.<br>\nAll the new type variables have sort {}. Consequently, I cannot use many of the other <br>\nmethods like simp that do not like such schematic type variables.</p>\n<p>Why does normalization introduce these type variables at all? Is this intended? How can I <br>\ndisable this feature or is this inherent to NBE?</p>\n<p>Cheers,<br>\nAndreas</p>",
        "id": 294243247,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907882
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Andreas,</p>\n<blockquote>\n<p>Why does normalization introduce these type variables at all? Is this<br>\nintended? How can I disable this feature or is this inherent to NBE?</p>\n</blockquote>\n<p>nbe itself does not even permit schematic type variables in results.<br>\nThe problem stems from the postprocessor.  I guess it is a problem with<br>\nhidden polymorphism which escaped attention so far, but it will need<br>\nfurther time to investigate this.</p>\n<p>An even more minimal example:</p>\n<blockquote>\n<p>theory Foo<br>\nimports \"~~/src/HOL/Word/Word\"<br>\nbegin</p>\n<p>definition<br>\n  \"example = (1 + 1 :: 4 word)\"</p>\n<p>ML {* Code_Simp.dynamic_value @{theory} @{term example} *}<br>\nML {* Nbe.dynamic_value @{theory} @{term example} *}</p>\n</blockquote>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/BHBMaiCcsDcfJnqKDW3gg2Rs/signature.asc\">signature.asc</a></p>",
        "id": 294243641,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908029
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Florian,</p>\n<p>Thanks for looking into this.</p>\n<p>The last line just raises Option (line 81 of General/basics.ML). I got these exceptions <br>\nquite often, but I thought that I had just done something wrong.</p>\n<p>Andreas</p>",
        "id": 294243658,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908041
    }
]