[
    {
        "content": "<p>From: Sascha Boehme &lt;<a href=\"mailto:boehmes@in.tum.de\">boehmes@in.tum.de</a>&gt;<br>\nWe are pleased to announce the online version of the following JAR article:</p>\n<p>HOL-Boogie --- An Interactive Prover-Backend for the Verified C Compiler</p>\n<p>DOI: 10.1007/s10817-009-9142-9<br>\nLink: <a href=\"http://www.springerlink.com/content/a62734x4l74x563x/\">http://www.springerlink.com/content/a62734x4l74x563x/</a></p>\n<p>Abstract:<br>\nBoogie is a verification condition generator for an imperative core language.<br>\nIt has front-ends for the programming languages C# and C enriched by<br>\nannotations in first-order logic, i.e. pre- and postconditions, assertions, and<br>\nloop invariants. Moreover, concepts like ghost fields, ghost variables, ghost<br>\ncode and specification functions have been introduced to support a specific<br>\nmodeling methodology. Boogie's verification conditions --- constructed via a wp<br>\ncalculus from annotated programs --- are usually transferred to automated       theorem provers such as Simplify or Z3. This also comprises the expansion of<br>\nlanguage-specific modeling constructs in terms of a theory describing memory<br>\nand elementary operations on it; this theory is called machine/memory model. In<br>\nthis paper, we present a proof environment, HOL-Boogie, that combines Boogie<br>\nwith the interactive theorem prover Isabelle/HOL, for a  specific C front-end<br>\nand machine/memory model. In particular, we present specific techniques<br>\ncombining automated and interactive proof methods for code verification. The<br>\nmain goal of our environment is to help program verification engineers in their<br>\ntask to 'debug' annotations and to find combined proofs where purely automatic<br>\nproof attempts fail.</p>\n<p>Sascha Böhme<br>\nMichal Moskał<br>\nWolfram Schulte<br>\nBurkhart Wolff</p>",
        "id": 294080680,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830566
    }
]