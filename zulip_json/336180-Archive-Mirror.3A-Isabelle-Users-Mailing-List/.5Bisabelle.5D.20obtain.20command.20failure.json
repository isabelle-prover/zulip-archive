[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSince inx is polymorphic, special care is required when writing closed <br>\nexpression without any syntactic correlation via fixed variables -- bound <br>\nvariables (like e, x) and constants (like inx) do not propagate type <br>\nconstraints.</p>\n<p>It works with explicit type constraints, e.g. like this:</p>\n<p>lemma \"~ (EX e :: 'a * nat. e : inx)\"<br>\nproof<br>\n  assume \"EX x :: 'a * nat. x : inx\"<br>\n  then obtain x :: \"'a * nat\" where \"x : inx\" ..<br>\n  oops</p>\n<p>BTW, you can use pattern comprehension when defining the \"inx\" set.<br>\nE.g. like this:</p>\n<p>definition \"inx = {(s :: 'a, n :: nat). True}\"</p>\n<p>Makarius</p>",
        "id": 294066412,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825579
    }
]