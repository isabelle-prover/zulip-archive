[
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@rsise.anu.edu.au\">Jeremy.Dawson@rsise.anu.edu.au</a>&gt;<br>\nHere I have a simple goal and tactic:</p>\n<blockquote>\n<blockquote>\n<p>Goal   \"j &lt;= (i :: nat) --&gt; k &lt; j --&gt; i - j + k &lt; i\"</p>\n</blockquote>\n</blockquote>\n<h1>;</h1>\n<h3>Obsolete goal command encountered</h3>\n<p>Level 0 (1 subgoal)<br>\nj &lt;= i --&gt; k &lt; j --&gt; i - j + k &lt; i</p>\n<p>1. j &lt;= i --&gt; k &lt; j --&gt; i - j + k &lt; i<br>\nval it = [] : Thm.thm list</p>\n<blockquote>\n<p>by (induct_tac \"i\" 1);<br>\nLevel 1 (2 subgoals)<br>\nj &lt;= i --&gt; k &lt; j --&gt; i - j + k &lt; i</p>\n</blockquote>\n<p>1. j &lt;= 0 --&gt; k &lt; j --&gt; 0 - j + k &lt; 0<br>\n  2. !!n. j &lt;= n --&gt; k &lt; j --&gt; n - j + k &lt; n<br>\n          ==&gt; j &lt;= Suc n --&gt; k &lt; j --&gt; Suc n - j + k &lt; Suc n<br>\nval it = () : unit</p>\n<p>but trying to convert the same proof into Isar I get</p>\n<p>lemma mpl_lem [rule_format] : \"j &lt;= (i :: nat) --&gt; k &lt; j --&gt; i - j + k <br>\n&lt; i\" ;<br>\nproof (prove): step 0</p>\n<p>goal (1 subgoal):</p>\n<p>1. j &lt;= i --&gt; k &lt; j --&gt; i - j + k &lt; i<br>\nvariables:<br>\n   i, j, k :: nat</p>\n<blockquote>\n<p>apply (induct_tac \"i\" 1) ;<br>\nproof (prove): step 0</p>\n</blockquote>\n<p>goal (1 subgoal):</p>\n<p>1. j &lt;= i --&gt; k &lt; j --&gt; i - j + k &lt; i<br>\nvariables:<br>\n   i, j, k :: nat<br>\n*** Type unification failed: Clash of types \"nat\" and \"fun\"</p>\n<hr>\n<p>*** Cannot meet type constraint:</p>\n<hr>\n<p>*** Term:  (i::nat) :: nat<br>\n*** Type:  nat =&gt; bool</p>\n<hr>\n<p>*** At command \"apply\" (line 428 of stdin).</p>\n<p>Does anyone have any ideas about what might be happening here?</p>\n<p>Thanks for any help</p>\n<p>Jeremy</p>",
        "id": 294048613,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660818379
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nHi Jeremy,</p>\n<p>In ML style, the following command says to perform induction on the variable <br>\n\"i\" in subgoal 1:<br>\n by (induct_tac \"i\" 1);</p>\n<p>If you want to specify a subgoal number in Isar style, you need to use the <br>\nsquare-bracket syntax:<br>\n apply (induct_tac [1] \"i\")</p>\n<p>You can also use e.g. [2-4] to specify a range of subgoals, or [!] to specify <br>\nall subgoals. The same syntax is used to specify subgoals with case_tac, <br>\nrule_tac, etc.</p>\n<p>Usually you won't need to specify a number, and it will default to the first <br>\nsubgoal:<br>\n apply (induct_tac \"i\")</p>\n<p>When you apply (induct_tac \"i\" 1) in Isar, I'm not sure exactly how it gets <br>\ninterpreted; my best guess is that it is parsed as an application of the term <br>\n\"i\" to the term \"1\", which doesn't type check because \"i\" is not a function.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294048622,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660818385
    }
]