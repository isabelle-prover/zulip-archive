[
    {
        "content": "<p>From: Viorel Preoteasa &lt;<a href=\"mailto:viorel.preoteasa@aalto.fi\">viorel.preoteasa@aalto.fi</a>&gt;<br>\nI am interested in a construction of the following structure:</p>\n<p>type_synonym 'a trace = \"nat =&gt; 'a\"<br>\ntype_synonym 'a A= \"'a trace =&gt; bool\"<br>\ntype_synonym 'a 'b B= \"'a trace =&gt; 'b trace =&gt; bool\"<br>\ntype_synonym 'a 'b 'c C= \"'a trace =&gt; 'b trace =&gt;  'c trace =&gt; bool\"</p>\n<p>class myoperator =<br>\n       fixes myop:: \"'a =&gt; 'a\"</p>\n<p>I would like to get an instantiation for myoperator class<br>\nfor the types ('a A), ('a 'b B), and ('a 'b 'c C), and to define<br>\nmyop in all these cases.</p>\n<p>More abstractly, I could also manage with using<br>\n'a::order instead of 'a trace.</p>\n<p>So I would like to be able to define myop for</p>\n<p>'a::order =&gt; bool<br>\n'a::order =&gt; 'b::order =&gt; bool<br>\n'a::order =&gt; 'b::order =&gt; 'c::order =&gt; bool</p>\n<p>Best regards,</p>\n<p>Viorel Preoteasa</p>",
        "id": 294272841,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917753
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nIf you use typedef instead of type_synonym you can instantiate the<br>\nmyoperator type class. Then lift_definition + transfer could help you<br>\ntranslate the theorems on myop to theorems on functions.</p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294272855,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917759
    },
    {
        "content": "<p>From: Viorel Preoteasa &lt;<a href=\"mailto:viorel.preoteasa@aalto.fi\">viorel.preoteasa@aalto.fi</a>&gt;<br>\nI guess that you suggest to define</p>\n<p>typedef 'a A= \"{x :: 'a trace =&gt; bool . True}\"<br>\ninstantiation \"A\":: (type) myoperator</p>\n<p>and then define myop on predicates via the bijection given by typedef.<br>\nWith this approach I end up with 3 different names for functions<br>\non 'a A, 'a 'b B, and 'a 'b 'c C.</p>\n<p>I could define these functions right from the beginning because I do<br>\nnot have theorems in myoperator. I just need a mechanism to have the<br>\nsame symbol for all these functions.</p>\n<p>Viorel</p>",
        "id": 294272873,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917768
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Viorel,</p>\n<p>If you do not care about the type system checks for type classes that Isabelle provides, <br>\nyou can just use overloaded definitions, because your types A, B, and C do not overlap. <br>\nThe most primitive form would be the following (where myop on A and C is the identity and <br>\non B the negation).</p>\n<p>consts myop :: \"'a =&gt; 'a\"</p>\n<p>defs (overloaded) myop_A_def: \"myop == %P :: 'a A. P\"<br>\ndefs (overloaded) myop_B_def: \"myop == %P :: ('a, 'b) B. %s t. ~ P s t\"<br>\ndefs (overloaded) myop_C_def: \"myop == %P :: ('a, 'b, 'c) C. P\"</p>\n<p>Note however that Isabelle does not enforce that myop is used only on defined types. For <br>\nexample, \"myop (3 :: int)\" also type-checks.</p>\n<p>If you want to use more advanced definition facilities (definition/function/...), you <br>\nshould have a look at \"context overloading ... begin\" context blocks.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294273041,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917826
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nThis is indeed preferred over low-level defs (overloaded).</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/TazaEmKiPYzm7_GnWAE3Wr5X/signature.asc\">signature.asc</a></p>",
        "id": 294273599,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917987
    },
    {
        "content": "<p>From: Viorel Preoteasa &lt;<a href=\"mailto:viorel.preoteasa@aalto.fi\">viorel.preoteasa@aalto.fi</a>&gt;<br>\nHi Andreas,</p>\n<p>Thank you for your message.<br>\nOn 03/24/2014 10:52 AM, Andreas Lochbihler wrote:</p>\n<blockquote>\n<p>Hi Viorel,</p>\n<p>If you do not care about the type system checks for type classes that<br>\nIsabelle provides, you can just use overloaded definitions, because<br>\nyour types A, B, and C do not overlap. The most primitive form would<br>\nbe the following (where myop on A and C is the identity and on B the<br>\nnegation).</p>\n<p>consts myop :: \"'a =&gt; 'a\"</p>\n<p>defs (overloaded) myop_A_def: \"myop == %P :: 'a A. P\"<br>\ndefs (overloaded) myop_B_def: \"myop == %P :: ('a, 'b) B. %s t. ~ P s t\"<br>\ndefs (overloaded) myop_C_def: \"myop == %P :: ('a, 'b, 'c) C. P\"</p>\n<p>Note however that Isabelle does not enforce that myop is used only on<br>\ndefined types. For example, \"myop (3 :: int)\" also type-checks.<br>\nThis is close to what I wanted, but I did not realize that this<br>\nwill have a price. It is no longer possible to have the type inferred<br>\nfrom myop. If the class mechanism would work, then I could<br>\naxiomatize the properties of myop in the class.</p>\n</blockquote>\n<blockquote>\n<p>If you want to use more advanced definition facilities<br>\n(definition/function/...), you should have a look at \"context<br>\noverloading ... begin\" context blocks.</p>\n</blockquote>\n<p>Where can I find more information and examples about this mechanism?</p>\n<p>Best regards,</p>\n<p>Viorel</p>\n<blockquote>\n<p>Best,<br>\nAndreas</p>\n<p>On 19/03/14 17:25, Viorel Preoteasa wrote:</p>\n<blockquote>\n<p>On 3/19/2014 3:55 PM, Johannes Hölzl wrote:</p>\n<p>Am Mittwoch, den 19.03.2014, 14:58 +0200 schrieb Viorel Preoteasa:</p>\n<blockquote>\n<blockquote>\n<p>I am interested in a construction of the following structure:</p>\n<p>type_synonym 'a trace = \"nat =&gt; 'a\"<br>\ntype_synonym 'a A= \"'a trace =&gt; bool\"<br>\ntype_synonym 'a 'b B= \"'a trace =&gt; 'b trace =&gt; bool\"<br>\ntype_synonym 'a 'b 'c C= \"'a trace =&gt; 'b trace =&gt;  'c trace =&gt; bool\"</p>\n<p>class myoperator =<br>\n        fixes myop:: \"'a =&gt; 'a\"</p>\n<p>I would like to get an instantiation for myoperator class<br>\nfor the types ('a A), ('a 'b B), and ('a 'b 'c C), and to define<br>\nmyop in all these cases.</p>\n<p>More abstractly, I could also manage with using<br>\n'a::order instead of 'a trace.</p>\n<p>So I would like to be able to define myop for</p>\n<p>'a::order =&gt; bool<br>\n'a::order =&gt; 'b::order =&gt; bool<br>\n'a::order =&gt; 'b::order =&gt; 'c::order =&gt; bool<br>\nIf you use typedef instead of type_synonym you can instantiate the<br>\nmyoperator type class. Then lift_definition + transfer could help you<br>\ntranslate the theorems on myop to theorems on functions.<br>\nI guess that you suggest to define</p>\n</blockquote>\n</blockquote>\n<p>typedef 'a A= \"{x :: 'a trace =&gt; bool . True}\"<br>\ninstantiation \"A\":: (type) myoperator</p>\n<p>and then define myop on predicates via the bijection given by typedef.<br>\nWith this approach I end up with 3 different names for functions<br>\non 'a A, 'a 'b B, and 'a 'b 'c C.</p>\n<p>I could define these functions right from the beginning because I do<br>\nnot have theorems in myoperator. I just need a mechanism to have the<br>\nsame symbol for all these functions.</p>\n<p>Viorel</p>\n</blockquote>\n</blockquote>",
        "id": 294275792,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918722
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Viorel,</p>\n<p>The overloading target is documented in the isar-ref manual in section 5.8. It also works <br>\nwithout \"context\".</p>\n<p>There are a number of examples usages in the HOL sources, e.g., in ~~/src/HOL/Nat and <br>\n~~/src/HOL/Algebra/Groups. Here's another example:</p>\n<p>overloading<br>\n   myop_A == \"myop :: 'a A\"<br>\nbegin<br>\ndefinition myop_A :: \"'a A\" where \"myop_A P = P\"<br>\nend</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294276013,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918790
    }
]