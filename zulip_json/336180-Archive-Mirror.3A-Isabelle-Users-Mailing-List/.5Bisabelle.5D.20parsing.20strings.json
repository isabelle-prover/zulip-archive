[
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nHi,</p>\n<p>if I have a file called test (simplified for the purposes of this <br>\nemail), containing</p>\n<p>length (String.explode (\"Meta_Language.\\\\\")) ;</p>\n<p>length (String.explode (\"Meta_Language.\\\\&lt;M&gt;_type.Type\")) ;</p>\n<p>and I type use \"test\" into the console process<br>\n(ie, isabelle console)<br>\nit gives the following error (relating to the second of the two <br>\nnon-empty lines above)</p>\n<p>SML lexical error: bad escape character in string (line 6 of \"test\") at <br>\n\\&lt;M&gt;_type.Typ ...</p>\n<p>On the other hand, if I paste those lines into the console process, they <br>\nwork fine,</p>\n<p>What is happening here?</p>\n<p>Cheers,</p>\n<p>Jeremy</p>",
        "id": 294738122,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190517
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSee again the \"implementation\" manual, about text and Isabelle symbols.</p>\n<p>In Isabelle/ML you should hardly ever use Char and String operations <br>\nfrom SML'97, they are semantically wrong and cause unexpected behaviour.</p>\n<p>Makarius</p>",
        "id": 294738124,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190518
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSee specifically \"implementation\", sections 0.6, 0.7.1, 0.7.2, and note <br>\nthat \"isabelle console\" and \"isabelle process\" don't give you an <br>\nIsabelle/ML toplevel, only the raw Poly/ML bootstrap environment. <br>\nNormally you use the latter only to invoke things in a proper Isabelle <br>\ncontext, say via use_thy with Isabelle/ML inside it.</p>\n<p>The most relevant operation on Isabelle symbol strings is Symbol.explode.</p>\n<p>Side-remark: if you want to work with embedded languages in Isabelle, <br>\nthe cartouche notation provides more flexibility. It corresponds to type <br>\nInput.source with main operation Input.explode_source, e.g.</p>\n<p>ML ‹val inp = Input.source_explode ‹abcαβγ›;›</p>\n<p>This gives you Isabelle symbols with precise position information. You <br>\ncan use that with Isabelle scanner combinators to build a parser that <br>\nworks with the Prover IDE, e.g. see ~~/src/Pure/Tools/rail.ML</p>\n<p>People attending FLoC 2018 at Oxford can hear more about this at my talk <br>\non Saturday, at the F-IDE workshop (Formal IDE).</p>\n<p>Makarius</p>",
        "id": 294738193,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190545
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nWell, thanks - I gather from all of this that</p>\n<p>val s = \"\\\\&lt;M&gt;\" ;<br>\nString.explode s ;<br>\nSymbol.explode s ;</p>\n<p>the string s is treated as a single symbol in Isabelle.</p>\n<p>However in the sections you quote I don't find anything to explain why I <br>\ncan enter the text above into the console, but when the above code is <br>\nput into a file which I then use, it causes an error.</p>\n<p>Incidentally, re your remark about \"isabelle console\", there used to be <br>\nIsar.loop () which would get you into an Isar parser - what has happened <br>\nto that?  Is there an equivalent to that now?</p>\n<p>Regards,</p>\n<p>Jeremy</p>",
        "id": 294738220,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190560
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 11.07.2018 02:45, Jeremy Dawson wrote:</p>\n<blockquote>\n<p>Well, thanks - I gather from all of this that</p>\n<p>val s = \"\\\\&lt;M&gt;\" ;<br>\nString.explode s ;<br>\nSymbol.explode s ;</p>\n<p>the string s is treated as a single symbol in Isabelle.</p>\n<p>However in the sections you quote I don't find anything to explain why I<br>\ncan enter the text above into the console, but when the above code is<br>\nput into a file which I then use, it causes an error.</p>\n</blockquote>\n<p>This is due to a subtle difference (explained in the manual) how <br>\nIsabelle treats text, with its own notation for infinitely many symbol. <br>\nThis also applies to Isabelle/ML as one of the many sublanguages of <br>\nIsabelle.</p>\n<p>On the \"isabelle console\" you get the raw SML environment of Poly/ML, <br>\nbut Isabelle/ML is not SML. It is better to avoid that -- you only need <br>\nit for rare invocations of use_thy in exotic debugging situations.</p>\n<p>Normal Isabelle/ML development happens always in the Prover IDE -- it <br>\nsaves a lot of time.</p>\n<blockquote>\n<p>Incidentally, re your remark about \"isabelle console\", there used to be<br>\nIsar.loop () which would get you into an Isar parser - what has happened<br>\nto that?  Is there an equivalent to that now?</p>\n</blockquote>\n<p>Isar.loop has become a historic footnote, see the blog entry from <br>\n31-Oct-2014: <br>\n<a href=\"https://sketis.net/2014/discontinuation-of-isabelle-proof-general\">https://sketis.net/2014/discontinuation-of-isabelle-proof-general</a></p>\n<p>There is no equivalent of it left: it has been superseded by the PIDE <br>\ndocument model in all respects.</p>\n<p>If you need quasi-command-line access to PIDE, you can use the new <br>\nIsabelle server of Isabelle2018, see the blob entry <br>\n<a href=\"https://sketis.net/2018/the-isabelle-server-responsive-control-of-prover-sessions\">https://sketis.net/2018/the-isabelle-server-responsive-control-of-prover-sessions</a></p>\n<p>Note that this is mainly relevant for accessing Isabelle from other <br>\nprograms, alternative front-ends etc.</p>\n<p>Makarius</p>",
        "id": 294738256,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190574
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nOn 07/12/2018 08:13 AM, Makarius wrote:</p>\n<blockquote>\n<p>On 11.07.2018 02:45, Jeremy Dawson wrote:</p>\n<blockquote>\n<p>Well, thanks - I gather from all of this that</p>\n<p>val s = \"\\\\&lt;M&gt;\" ;<br>\nString.explode s ;<br>\nSymbol.explode s ;</p>\n<p>the string s is treated as a single symbol in Isabelle.</p>\n<p>However in the sections you quote I don't find anything to explain why I<br>\ncan enter the text above into the console, but when the above code is<br>\nput into a file which I then use, it causes an error.</p>\n</blockquote>\n<p>This is due to a subtle difference (explained in the manual) how <br>\nIsabelle treats text, with its own notation for infinitely many symbol. <br>\nThis also applies to Isabelle/ML as one of the many sublanguages of <br>\nIsabelle.</p>\n<p>Hi Makarius,</p>\n</blockquote>\n<p>Which bit of the manual, exactly, explains this?</p>\n<p>I understand that it treats \\&lt;M&gt; as a single symbol, but here we have <br>\nthat it is simply rejected.  I don't see any explanation of that.</p>\n<p>Cheers,</p>\n<p>Jeremy</p>\n<blockquote>\n<p>On the \"isabelle console\" you get the raw SML environment of Poly/ML, <br>\nbut Isabelle/ML is not SML. It is better to avoid that -- you only need <br>\nit for rare invocations of use_thy in exotic debugging situations.</p>\n<p>Normal Isabelle/ML development happens always in the Prover IDE -- it <br>\nsaves a lot of time.</p>\n<blockquote>\n<p>Incidentally, re your remark about \"isabelle console\", there used to be<br>\nIsar.loop () which would get you into an Isar parser - what has happened<br>\nto that?  Is there an equivalent to that now?</p>\n</blockquote>\n<p>Isar.loop has become a historic footnote, see the blog entry from <br>\n31-Oct-2014: <br>\n<a href=\"https://sketis.net/2014/discontinuation-of-isabelle-proof-general\">https://sketis.net/2014/discontinuation-of-isabelle-proof-general</a></p>\n<p>There is no equivalent of it left: it has been superseded by the PIDE <br>\ndocument model in all respects.</p>\n<p>If you need quasi-command-line access to PIDE, you can use the new <br>\nIsabelle server of Isabelle2018, see the blob entry <br>\n<a href=\"https://sketis.net/2018/the-isabelle-server-responsive-control-of-prover-sessions\">https://sketis.net/2018/the-isabelle-server-responsive-control-of-prover-sessions</a> </p>\n<p>Note that this is mainly relevant for accessing Isabelle from other <br>\nprograms, alternative front-ends etc.</p>\n<p>Makarius</p>\n</blockquote>",
        "id": 294738364,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190603
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe normal Isabelle text representation of lists of symbols means that <br>\n\\\\&lt;M&gt; is a backslash followed by \\&lt;M&gt; but that is not a valid escape <br>\nsequence for ML string-literals.</p>\n<p>In contrast, the raw Standard ML toplevel loop of \"isabelle console\" <br>\ntreats it as escaped backslash followed by &lt; M &gt; characters.</p>\n<p>Normally you can work uniformly with the Isabelle symbol text view, and <br>\nthere is no need to refer to the raw toplevel loop, apart from invoking <br>\nsomething like use_thy from there.</p>\n<p>Makarius</p>",
        "id": 294738400,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190617
    }
]