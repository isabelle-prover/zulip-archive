[
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nHi,</p>\n<p>Consider this function and proof attempt:</p>\n<p>function f :: \"'a::finite set \\&lt;Rightarrow&gt; 'a set \\&lt;Rightarrow&gt; 'a list set\" where<br>\n  \"f C B =<br>\n    (if B = {} then {[]}<br>\n     else if B \\&lt;subseteq&gt; C<br>\n          then {c # cs |c cs. c \\&lt;in&gt; B \\&lt;and&gt; cs \\&lt;in&gt; f {} (B - {c})}<br>\n          else {})\"<br>\nby pat_completeness auto</p>\n<p>lemma f_termination:<br>\n  shows \"f_dom (C, B)\"<br>\nproof(induct t \\&lt;equiv&gt; \"card B\" arbitrary: B C)<br>\n  case (Suc i B C) then show ?case<br>\n    apply -<br>\n    apply (rule accpI)<br>\n    apply (erule f_rel.cases)</p>\n<p>Intuitively this function terminates because we keep removing elements of B from B. However f_rel does not seem to note that c is drawn from B in the recursion. (domintros is too weak, as is apparently well-known.)</p>\n<p>Any tips?</p>\n<p>In my use case f is actually only partially defined.</p>\n<p>cheers,<br>\npeter</p>",
        "id": 294667362,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172228
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThis looks like another case of a missing congruence rule. This congreunce rule <br>\nwould express that your set comprehension only makes calls to f where B has <br>\nbecome smaller. Grep for fundef_cong in the sources to see many examples. You <br>\nmay have to introduce an auxiliary constant to hide the complex set comprehension.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/pzXDKA4kUhgjs6lhX8ebZwmc/smime.p7s\">smime.p7s</a></p>",
        "id": 294667375,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172237
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nAs Tobias said, you have to declare an appropriate congruence rule for fun. The following <br>\nworks for me:</p>\n<p>declare conj_cong[fundef_cong]</p>\n<p>Note that it is good not to have this rule in the default set of congruence rules, because <br>\nif you add congruence rules, you get weaker induction rules. This is especially true for <br>\nconj_cong when one defines recursive predicates with fun.</p>\n<p>Andreas</p>",
        "id": 294667417,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172242
    },
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nThanks Tobias and Andreas. </p>\n<blockquote>\n<p>declare conj_cong[fundef_cong]</p>\n</blockquote>\n<p>indeed does the job.</p>\n<p>(A pointer from Section 8 of the functions manual to Section 10 would have helped me in this instance.)</p>\n<p>cheers,<br>\npeter</p>",
        "id": 294670207,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173182
    }
]