[
    {
        "content": "<p>From: Christian Urban &lt;<a href=\"mailto:christian.urban@kcl.ac.uk\">christian.urban@kcl.ac.uk</a>&gt;<br>\nDear All,</p>\n<p>I am trying to figure out whether a function I want to <br>\ndefine can be defined with the partial_function command<br>\n(fun and function will definitely not work).</p>\n<p>Is there some documentation about how this command<br>\nworks and which functions it can and cannot define?<br>\nThere are two nice examples in Fundefs.thy (see below)<br>\nand another one in RBT_Impl.thy. I also found somewhere<br>\nthat I can define a minimisation operation, which is <br>\nrelated to the function I want to define.</p>\n<p>The problem is that from these handful of examples it is <br>\nvery hard to find out what is going on, and when I try<br>\nto define the function I am interested in then I am asked<br>\nto discharge proof obligations of the form</p>\n<p>mono_option (%f. Some (least (%r. f (recf, r # ba) = Some 0)))</p>\n<p>and I have no idea when such proof-obligations are provable<br>\nand when not.</p>\n<p>Anybody knows more about partial_function and documentation?</p>\n<p>Thanks a lot and best wishes,<br>\nChristian</p>\n<p>partial_function (option)<br>\n  collatz :: \"nat =&gt; nat list option\"<br>\nwhere<br>\n  \"collatz n =<br>\n  (if n &lt;= 1 then Some [n]<br>\n   else if even n <br>\n     then do { ns &lt;- collatz (n div 2); Some (n # ns) }<br>\n     else do { ns &lt;- collatz (3 * n + 1);  Some (n # ns)})\"</p>\n<p>partial_function (tailrec) <br>\n  fixpoint :: \"('a =&gt; 'a) =&gt; 'a =&gt; 'a\"<br>\nwhere<br>\n  \"fixpoint f x = (if f x = x then x else fixpoint f (f x))\"</p>\n<p>partial_function (tailrec) <br>\n  findzero :: \"(nat =&gt; nat) =&gt; nat =&gt; nat\"<br>\nwhere<br>\n  \"findzero f n = (if f n = 0 then n else findzero f (Suc n))\"</p>",
        "id": 294234981,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904365
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear Christian,</p>\n<p>Are you aware of</p>\n<p><a href=\"http://www4.informatik.tu-muenchen.de/~krauss/mrec/mrec.pdf\">http://www4.informatik.tu-muenchen.de/~krauss/mrec/mrec.pdf</a></p>\n<p>(not that it contains too much information either, but it might help <br>\nestablish an intuition about the internal construction).</p>\n<p>Also in IsaFoR we use partial_functions sometimes (mostly for the option <br>\nmonad, which is already set up). See, e.g.,</p>\n<p><a href=\"http://cl2-informatik.uibk.ac.at/rewriting/mercurial.cgi/IsaFoR/file/76e79c503105/IsaFoR/Parser_Monad2.thy\">http://cl2-informatik.uibk.ac.at/rewriting/mercurial.cgi/IsaFoR/file/76e79c503105/IsaFoR/Parser_Monad2.thy</a></p>\n<p>for setting up a new datatype.</p>\n<p>hope this helps</p>\n<p>chris</p>",
        "id": 294234997,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904371
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nDear Christian,</p>\n<blockquote>\n<p>Also in IsaFoR we use partial_functions sometimes (mostly for the option monad, which is already set up). See, e.g.,</p>\n<p><a href=\"http://cl2-informatik.uibk.ac.at/rewriting/mercurial.cgi/IsaFoR/file/76e79c503105/IsaFoR/Parser_Monad2.thy\">http://cl2-informatik.uibk.ac.at/rewriting/mercurial.cgi/IsaFoR/file/76e79c503105/IsaFoR/Parser_Monad2.thy</a><br>\nfor setting up a new datatype.</p>\n</blockquote>\n<p>you might also refer to <a href=\"http://cl2-informatik.uibk.ac.at/rewriting/mercurial.cgi/IsaFoR/file/76e79c503105/IsaFoR/Xml.thy\">http://cl2-informatik.uibk.ac.at/rewriting/mercurial.cgi/IsaFoR/file/76e79c503105/IsaFoR/Xml.thy</a></p>\n<p>where for several functions, the monotonicity is proven<br>\n(Both via explicit [partial_function_mono], and also once via ML-code)</p>\n<p>Cheers,<br>\nRené</p>\n<blockquote>\n<p>On 02/24/2013 06:10 AM, Christian Urban wrote:</p>\n<blockquote>\n<p>Dear All,</p>\n<p>I am trying to figure out whether a function I want to<br>\ndefine can be defined with the partial_function command<br>\n(fun and function will definitely not work).</p>\n<p>Is there some documentation about how this command<br>\nworks and which functions it can and cannot define?<br>\nThere are two nice examples in Fundefs.thy (see below)<br>\nand another one in RBT_Impl.thy. I also found somewhere<br>\nthat I can define a minimisation operation, which is<br>\nrelated to the function I want to define.</p>\n<p>The problem is that from these handful of examples it is<br>\nvery hard to find out what is going on, and when I try<br>\nto define the function I am interested in then I am asked<br>\nto discharge proof obligations of the form</p>\n<p>mono_option (%f. Some (least (%r. f (recf, r # ba) = Some 0)))</p>\n<p>and I have no idea when such proof-obligations are provable<br>\nand when not.</p>\n<p>Anybody knows more about partial_function and documentation?</p>\n<p>Thanks a lot and best wishes,<br>\nChristian</p>\n<p>partial_function (option)<br>\n  collatz :: \"nat =&gt; nat list option\"<br>\nwhere<br>\n  \"collatz n =<br>\n  (if n &lt;= 1 then Some [n]<br>\n   else if even n<br>\n     then do { ns &lt;- collatz (n div 2); Some (n # ns) }<br>\n     else do { ns &lt;- collatz (3 * n + 1);  Some (n # ns)})\"</p>\n<p>partial_function (tailrec)<br>\n  fixpoint :: \"('a =&gt; 'a) =&gt; 'a =&gt; 'a\"<br>\nwhere<br>\n  \"fixpoint f x = (if f x = x then x else fixpoint f (f x))\"</p>\n<p>partial_function (tailrec)<br>\n  findzero :: \"(nat =&gt; nat) =&gt; nat =&gt; nat\"<br>\nwhere<br>\n  \"findzero f n = (if f n = 0 then n else findzero f (Suc n))\"</p>\n</blockquote>\n</blockquote>",
        "id": 294235041,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904393
    },
    {
        "content": "<p>From: Christian Urban &lt;<a href=\"mailto:christian.urban@kcl.ac.uk\">christian.urban@kcl.ac.uk</a>&gt;<br>\nDear René, dear Christian,</p>\n<p>Thanks a lot for the helpful pointers!</p>\n<p>Best wishes,<br>\nChristian</p>",
        "id": 294238103,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905691
    }
]