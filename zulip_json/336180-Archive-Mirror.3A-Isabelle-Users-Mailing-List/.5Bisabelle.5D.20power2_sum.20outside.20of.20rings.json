[
    {
        "content": "<p>From: Ramana Kumar &lt;<a href=\"mailto:rk436@cam.ac.uk\">rk436@cam.ac.uk</a>&gt;<br>\nMay I suggest that a version of power2_sum for a less specific type<br>\nclass be added to Main (more details below)?</p>\n<p>What is the usual process (if any) for contributing such very minor<br>\nimprovements?</p>\n<p>Thanks,<br>\nRamana</p>\n<p>---------- Forwarded message ----------<br>\nFrom: Tjark Weber &lt;<a href=\"mailto:tw333@cam.ac.uk\">tw333@cam.ac.uk</a>&gt;<br>\nDate: Mon, May 16, 2011 at 3:09 PM<br>\nSubject: Re: power2_sum<br>\nTo: Ramana Kumar &lt;<a href=\"mailto:ramana.kumar@gmail.com\">ramana.kumar@gmail.com</a>&gt;</p>\n<p>On Fri, 2011-05-13 at 16:36 +0100, Ramana Kumar wrote:</p>\n<blockquote>\n<p>I think the theorem called power2_sum in Main only works in a ring,<br>\nand natural numbers don't form a ring under plus and times.<br>\nBut the theorem is still true for natural numbers! (I just proved it<br>\nusing algebra_simps in place of ring_distribs and mult2.)<br>\nIs this a deficiency in Main or in my ability to search for the<br>\ncorrect lemmas to use?</p>\n</blockquote>\n<p>I believe that is a deficiency in Main. Â The whole type class hierarchy<br>\nis a bit complex, and not every lemma has been proved in every possible<br>\ncontext.</p>\n<p>One could consider adding the corresponding variant of power2_sum for<br>\nnat (or whatever the most general sort may be) to Main.</p>\n<p>Kind regards,<br>\nTjark</p>",
        "id": 294137733,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844905
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThanks for the suggestion.</p>\n<p>First a general point: we have not tried hard to keep nat and the <br>\nalgebraic type class hierarchy in sync. Additions are always welcome. But</p>\n<ul>\n<li>can you figure out the most general class the lemma can be proved in?</li>\n<li>are there other related lemmas that ought to be transfered? (certainly <br>\npower2_diff)</li>\n</ul>\n<p>There is no process. Typically the developer of the original theory has <br>\nan opinion on it and adds the theorem if it appears useful.</p>\n<p>Tobias</p>",
        "id": 294137758,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844918
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nTheorems power2_sum and power2_diff are both proved in class<br>\nnumber_ring, which is defined in Int.thy:</p>\n<p>class number_ring = number + comm_ring_1 +<br>\n  assumes number_of_eq: \"number_of k = of_int k\"</p>\n<p>This class constraint is necessary because this is (currently) the<br>\nmost general type class in which you can prove that 1 + 1 = 2.<br>\nUnfortunately nat cannot be made an instance of number_ring because it<br>\nis not a ring; in consequence every theorem that mentions numerals<br>\nneeds to have a separate, specialized version for type nat.</p>\n<p>I would propose adding a new number_semiring class, defined something like this:</p>\n<p>class number_semiring = number + semiring_1 +<br>\n  assumes number_of_int_eq: \"number_of (int n) = of_nat n\"</p>\n<p>It would be possible to prove 1 + 1 = 2 in class number_semiring, so<br>\npower2_sum and power2_diff (along with probably every theorem in<br>\nNat_Numeral.thy) could be generalized to number_semiring. Types like<br>\nnat and inat (from Library/Nat_Infinity.thy) would be instances.</p>\n<p>A more drastic solution would be to just get rid of the \"number\" class<br>\naltogether (its sole purpose seems to be so that you can have types<br>\nwhere numerals have a non-standard meaning) and have a single<br>\ndefinition of number_of that works uniformly for all types.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294137792,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844930
    }
]