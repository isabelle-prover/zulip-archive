[
    {
        "content": "<p>From: Steven Obua &lt;<a href=\"mailto:obua@in.tum.de\">obua@in.tum.de</a>&gt;<br>\nI like your idea of defining precedence by partial ordering; I dislike <br>\nthe system of assigning numerical values as precedences, because this <br>\nimplies that you know the numerical precedences of all the other <br>\nconstants that have precedences, which I don't.</p>\n<p>I do not agree to force \"x\" to relate to \"a\" and \"b\" if it does not. If <br>\nambiguity between \"x\"  and \"a\" or \"b\" arises, then the parser<br>\nshould signal a parse error. This is less confusing, too, I think, <br>\nbecause otherwise you have the old problem: What again was the nearest <br>\nelement less than \"c\"?? One should just accept that precedence is a <br>\npartial ordering, not a total one.</p>\n<p>Steven</p>",
        "id": 293896638,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660742918
    },
    {
        "content": "<p>From: Lucas Dixon &lt;<a href=\"mailto:lucas.dixon@ed.ac.uk\">lucas.dixon@ed.ac.uk</a>&gt;<br>\nDear Isabelle users,</p>\n<p>I've been wondering how easy it is to implement, and how useful people<br>\nwould find, a different mechanism for defining precedence: something<br>\nbased on partial orderings instead of numerical values. (I believe that<br>\n the underlying representation is a search tree anyway...)</p>\n<p>I'm thinking of something like:</p>\n<p>consts \"*\" :: \"N =&gt; N =&gt; N\" (infixr [&gt; \"=\"])<br>\nconsts \"+\" :: \"N =&gt; N =&gt; N\" (infixr [&lt; \"*\", &gt; \"=\"])<br>\nconsts \"^\" :: \"N =&gt; N =&gt; N\" (infixr [&gt; \"*\"])<br>\nconsts \"++\" :: \"N =&gt; N =&gt; N\" (infixr [= \"+\"])</p>\n<p>where the [&gt; \"X\"] makes the constant have greater precedence than X. [&lt;<br>\n\"X\"], less than and [= \"X\"] equal to X. I think this would be a nicer<br>\nway to specify them... what do you think?</p>\n<p>There is a little question as to the treatment of less well defined<br>\nsituations, such as:</p>\n<p>consts \"a\" :: \"N =&gt; N =&gt; N\" (infixr [&gt; \"=\"])<br>\nconsts \"b\" :: \"N =&gt; N =&gt; N\" (infixr [&gt; \"a\"])<br>\nconsts \"c\" :: \"N =&gt; N =&gt; N\" (infixr [&gt; \"b\"])<br>\nconsts \"x\" :: \"N =&gt; N =&gt; N\" (infixr [&lt; \"c\"])</p>\n<p>in particular, how does \"x\" relate to \"a\" and \"b\"? I suggest that when<br>\nsuch ambiguity arises \"x\" would be given precedence equal to the nearest<br>\nelement less than \"c\". Similarly for greater than: it could be<br>\ninterpreted, when ambiguity arises, as 'just a little bigger than': the<br>\nsame as the nearest next value.</p>\n<p>Cycles should obviously produce errors. :)</p>\n<p>Do any of you know of something like this in other systems? I do not<br>\nknow much about parsing, so perhaps there is some reason why such<br>\napproaches are not implemented... ? (if so, I'd like to know!)</p>\n<p>cheers,<br>\nlucas</p>",
        "id": 293896640,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660742918
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nSteven Obua wrote:<br>\nan observation which I confirm.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/vU-i6_vrISzSkXown9r8txTG/florian.haftmann.vcf\">florian.haftmann.vcf</a><br>\n<a href=\"/user_uploads/14278/agYrEsuBCsMgwB1p8atnVTyZ/signature.asc\">signature.asc</a></p>",
        "id": 293899540,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660743931
    }
]