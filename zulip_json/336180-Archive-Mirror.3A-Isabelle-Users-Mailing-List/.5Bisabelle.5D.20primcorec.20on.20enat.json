[
    {
        "content": "<p>From: Diego Marmsoler &lt;<a href=\"mailto:diego.marmsoler@tum.de\">diego.marmsoler@tum.de</a>&gt;<br>\nDear all,</p>\n<p>Im currently trying to develop an Isabelle/HOL Theory using the new<br>\ncodatatype package.</p>\n<p>I have constructed a simple codatatype similar to a lazy list and wanted to<br>\nimplement a primitive corecursive function which returns the length of this<br>\nlist as an enat (extended natural number from the<br>\nCoinductive/Coinductive_Nat package).</p>\n<p>My problem is now that I get an error message enat is not a codatatype.<br>\nThus, it cannot be used as a return type for corecursive functions.</p>\n<p>My question is now whether someone knows about an implementation of extended<br>\nnatural numbers as codatatype so that it can be used as return value for<br>\ncorecursive functions?</p>\n<p>Many thanks,</p>\n<p>Best,</p>\n<p>Diego<br>\n<a href=\"/user_uploads/14278/7qR0Cs3ZR6wjssX1vLZEaMWA/smime.p7s\">smime.p7s</a></p>",
        "id": 294709654,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181734
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Diego,</p>\n<p>Extended natural numbers can be seen both as</p>\n<p>datatype enat = enat nat | \\&lt;infinity&gt;</p>\n<p>and as</p>\n<p>codatatype enat = 0 | eSuc enat</p>\n<p>In Isabelle/HOL's library, extended natural numbers are defined with the datatype <br>\nrepresentation in mind. My AFP entry Coinductive <br>\n(<a href=\"https://www.isa-afp.org/entries/Coinductive.shtml\">https://www.isa-afp.org/entries/Coinductive.shtml</a>) provides the coinductive view for <br>\nenat. That it, defines the relevant constants and reasoning principles for considering <br>\nenat as a codatatype. Unfortunately, you cannot register it as a codatatype once it has <br>\nbeen defined as a datatype. Thus, you have to define your length function directly using <br>\nthe coiterator enat_unfold instead of using primrec, which basically does this internally <br>\nfor you. The reasoning is the same in both cases.</p>\n<p>Also note that my AFP entry also contains a large library about lazy lists, which also <br>\nincludes a length function.</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 294709687,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181747
    }
]