[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi all.</p>\n<p>If I issue the following definition:</p>\n<p>primrec f where \"f g v (a,b) = (g v a, b)\"</p>\n<p>I get:</p>\n<p>Type unification failed: Variable 'a::{} not of sort type</p>\n<p>Type error in application: incompatible operand type</p>\n<p>Operator:  old.rec_prod :: ('b ⇒ 'd ⇒ ??'a) ⇒ 'b × 'd ⇒ ??'a<br>\nOperand:   λa b g v. (g v a, b) ::<br>\n  'b ⇒ 'd ⇒ ('a ⇒ 'b ⇒ 'c) ⇒ 'a ⇒ 'c × 'd</p>\n<p>Although I would have expected the definition to go through. What is<br>\ngoing wrong here?</p>",
        "id": 294289163,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922877
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThe error message could be more informative, but I can’t imagine why you would use primrec here. There is neither a datatype nor recursion.</p>\n<p>Larry Paulson</p>",
        "id": 294289239,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922888
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman.brian.c@gmail.com\">huffman.brian.c@gmail.com</a>&gt;<br>\nThe product type is certainly a datatype. I've often used primrec to<br>\ndefine functions over non-recursive datatypes.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294289250,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922895
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nThis has nothing to do with primrec. If you inspect</p>\n<p>term \"f g v (a,b) = (g v a, b)\"</p>\n<p>or the even simpler</p>\n<p>term \"h x\"</p>\n<p>you will see that the first argument to g has the empty sort, as has x.<br>\nThis is a shortcoming of our type-inference:<br>\nIf the type of a variable is fully unconstrained (like the first<br>\nargument of g), the type inference fails to insert the default sort<br>\n(\"type\", in the case of HOL) for the corresponding type variable.</p>\n<p>The workaround is to add sufficient type annotations.</p>\n<p>-- Lars</p>",
        "id": 294289271,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922901
    }
]