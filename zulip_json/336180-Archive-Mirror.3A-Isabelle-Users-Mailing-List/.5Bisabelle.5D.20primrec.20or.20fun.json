[
    {
        "content": "<p>From: Rustom Mody &lt;<a href=\"mailto:rustompmody@gmail.com\">rustompmody@gmail.com</a>&gt;<br>\nIn<br>\n<a href=\"http://stackoverflow.com/questions/30419419/what-is-the-difference-between-primrec-and-fun-in-isabelle-hol\">http://stackoverflow.com/questions/30419419/what-is-the-difference-between-primrec-and-fun-in-isabelle-hol</a><br>\nthe general advice seems to be:</p>\n<p>However when I see examples anywhere I see mostly primrec and not fun<br>\nAlso I remember seeing somewhere that primrec is preferable since functions<br>\nin Isabelle  must be terminating and with fun that proof obligation needs<br>\nto be separately dealt with</p>\n<p>Thanks<br>\nRusi</p>",
        "id": 294674402,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174425
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nDear Rusi,</p>\n<p>Am Mittwoch, den 11.05.2016, 16:18 +0530 schrieb Rustom Mody:</p>\n<blockquote>\n<p>In<br>\n<a href=\"http://stackoverflow.com/questions/30419419/what-is-the-difference-between-primrec-and-fun-in-isabelle-hol\">http://stackoverflow.com/questions/30419419/what-is-the-difference-between-primrec-and-fun-in-isabelle-hol</a><br>\nthe general advice seems to be:</p>\n<blockquote>\n<p>*From a practitioner’s point of view, primrec is a lower-level tool that<br>\nyou usually do not need to worry about, and simply always use fun.*<br>\n</p>\n</blockquote>\n<p>However when I see examples anywhere I see mostly primrec and not fun</p>\n</blockquote>\n<p>I’m not sure about the history of primrec and fun, but some of the<br>\nexamples might be from times when fun was not around, or not as good as<br>\nit is now. Also, some tutorials/classes/courses might deliberately use<br>\nprimrec to force the student to be aware of the differences between<br>\nprimitive recursion and general recursion.</p>\n<blockquote>\n<p>Also I remember seeing somewhere that primrec is preferable since functions<br>\nin Isabelle  must be terminating and with fun that proof obligation needs<br>\nto be separately dealt with</p>\n</blockquote>\n<p>\"fun\" always proves termination (or gives up). If it cannot, you have<br>\nto use \"function\" and prove termination yourself.</p>\n<p>There are only a few (obscure?) cases where fun cannot do what primrec<br>\ncan, as Andreas writes on SO: When a data type does not have a size<br>\nfunction.</p>\n<p>Greetings,<br>\nJoachim</p>\n<p>Dipl.-Math. Dipl.-Inform. Joachim Breitner<br>\nWissenschaftlicher Mitarbeiter<br>\n<a href=\"http://pp.ipd.kit.edu/~breitner\">http://pp.ipd.kit.edu/~breitner</a><br>\n<a href=\"/user_uploads/14278/AJG7ejmSHacHU6oS6JJatZVm/signature.asc\">signature.asc</a></p>",
        "id": 294674415,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174432
    },
    {
        "content": "<p>From: Rustom Mody &lt;<a href=\"mailto:rustompmody@gmail.com\">rustompmody@gmail.com</a>&gt;<br>\nOk if you say so :-)<br>\nHowever <a href=\"http://isabelle.in.tum.de/doc/tutorial.pdf\">http://isabelle.in.tum.de/doc/tutorial.pdf</a> is from 2016 and still<br>\nheavily uses primrec?</p>\n<p>[Sorry for being obtuse -- just finding it hard to find my way around]</p>",
        "id": 294674448,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174444
    },
    {
        "content": "<p>From: Gergely Buday &lt;<a href=\"mailto:gbuday@karolyrobert.hu\">gbuday@karolyrobert.hu</a>&gt;<br>\nHi,</p>\n<p>the tutorial is originally from 2001 so might use idioms not up to date now.</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294674467,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174450
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThis tutorial was written in 2000, before fun. It doesn't reflect Isabelle 2016 <br>\nat all anymore, it was merely kept alive because it contains interesting <br>\nexamples. It will not be distributed as part of the Isabelle documentation in <br>\nthe future.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/S1yzBGzsJFMPg9wwyDeL_wKu/smime.p7s\">smime.p7s</a></p>",
        "id": 294674482,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174457
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nOne of the advantages of primrec is that fun generates a number of <br>\nauxiliary definitions and facts that you may not need for simple <br>\nrecursion patterns like the ones supported by primrec, so primrec is <br>\nmore ‘light-weight’ and may be faster.</p>\n<p>I therefore tend to use primrec whenever it is possible and I don't need <br>\nthe facts generated by fun.</p>\n<p>Manuel</p>",
        "id": 294674506,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174462
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nThat difference is indeed significant for more than theoretical reasons.</p>\n<p>Your ultimate aim is not to specify something but to actually prove<br>\nproperties about it.  Specifications mechanisms indicate what proof<br>\nprinciple is likely most suitable to derive fundamental properties:</p>\n<p>definition -&gt; unfolding<br>\n    inductive -&gt; induction using specific induct rule<br>\n    function -&gt; induction using specific induct rule<br>\n    primrec -&gt; structural induction over a datatype</p>\n<p>Hence primrec can be seen as a codified comment in that respect.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/fCa9JiClU0nUlw5jqR92V-YI/signature.asc\">signature.asc</a></p>",
        "id": 294674539,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174475
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;<br>\nJoachim wrote:</p>\n<p>There's also the case of mutual recursion on mutually defined datatypes, where I've seen some \"fun\" failures.</p>\n<p>\"primrec\" is more lightweight, so if you develop large theories it might help make Isabelle take fewer resources. <em>Might</em> because I'm not aware of any actual measurements.</p>\n<p>Jasmin</p>",
        "id": 294674552,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174481
    }
]