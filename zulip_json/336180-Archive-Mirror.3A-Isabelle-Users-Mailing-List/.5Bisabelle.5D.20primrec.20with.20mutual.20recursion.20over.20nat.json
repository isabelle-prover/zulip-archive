[
    {
        "content": "<p>From: \"henning.seidler\" &lt;<a href=\"mailto:henning.seidler@mailbox.tu-berlin.de\">henning.seidler@mailbox.tu-berlin.de</a>&gt;<br>\nHello,</p>\n<p>I want to define two mutual recursive functions, that both get a natural<br>\nnumber as an argument.<br>\nThe tutorial for datatypes states that this works fine with new-style<br>\ndatatypes, but in my case I get the error:<br>\n\"nat\" is an old-style datatype</p>\n<p>Some minimal example would be:<br>\nprimrec foo:: \"('a ⇒ 'a) ⇒ nat ⇒ 'a ⇒ 'a\" and bar:: \"('a ⇒ 'a) ⇒ nat ⇒<br>\n'a ⇒ 'a\" where<br>\n  \"foo f 0 a = a\"<br>\n| \"foo f (Suc n) a = f (bar f n a)\"<br>\n| \"bar f 0 b = b\"<br>\n| \"bar f (Suc n) b = f (foo f n b)\"</p>\n<p>Is there some way to fix this problem? Is there some \"new-style nat\"?</p>\n<p>Regards,<br>\nHenning<br>\n<a href=\"/user_uploads/14278/lYj1VS1aaGnef42P7qRoegQr/signature.asc\">signature.asc</a></p>",
        "id": 294667316,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172206
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;<br>\nDear Henning,</p>\n<p>The error message is misleading. If you try with a \"new-style nat\", you get a more informative message:</p>\n<p>datatype nat = Z | Suc nat</p>\n<p>primrec foo:: \"('a ⇒ 'a) ⇒ nat ⇒ 'a ⇒ 'a\" and bar:: \"('a ⇒ 'a) ⇒ nat ⇒ 'a ⇒ 'a\" where<br>\n     \"foo f Z a = a\"<br>\n    | \"foo f (Suc n) a = f (bar f n a)\"<br>\n    | \"bar f Z b = b\"<br>\n    | \"bar f (Suc n) b = f (foo f n b)\"</p>\n<p>produces</p>\n<p>\"Scratch.nat\" is neither mutually recursive with \"Scratch.nat\" nor nested recursive through itself</p>\n<p>The definition works fine if you use \"fun\" instead. Where did you read that \"this works fine with new-style datatypes\"? I'm not aware of any sentence to that effect in \"datatypes.pdf\" -- but maybe I'm wrong.</p>\n<p>Cheers,</p>\n<p>Jasmin</p>",
        "id": 294667331,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172212
    }
]