[
    {
        "content": "<p>From: Viorel Preoteasa &lt;<a href=\"mailto:viorel.preoteasa@abo.fi\">viorel.preoteasa@abo.fi</a>&gt;<br>\nHello,</p>\n<p>I have the following definitions:</p>\n<p>datatype Tree =<br>\nleaf1 | leaf2 | \"tree\" \"Tree\" \"Tree\" (infixr \"..\" 65)</p>\n<p>primrec Special :: \"Tree =&gt; bool\" where<br>\n\"Special leaf1 = True\" |<br>\n\"Special leaf2 = True\" |<br>\n\"Special (x .. y) = (case x of leaf1 =&gt; Special y | leaf2 =&gt; Special y<br>\n| (u .. v) ⇒ u = leaf1 /\\ Special y /\\ (Special v))\"</p>\n<p>On the definition of Special I get the error:</p>\n<p>Extra variables on rhs: \"Special\"<br>\nThe error(s) above occurred in definition \"Special_def\"</p>\n<p>How could Special be an extra variable? Is it possible<br>\nto fix this definition?</p>\n<p>Using fun instead of primrec seem to solve the problem,<br>\nbut fun seems more general.</p>\n<p>Best regards,</p>\n<p>Viorel Preoteasa</p>",
        "id": 294147607,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848082
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThat's precisely the point. There are very few reasons to prefer primrec to fun. The latter will also give you an induction rule exactly tailored to your function, and other benefits.</p>\n<p>Larry Paulson</p>",
        "id": 294147619,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848088
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nDear Viorel,</p>\n<p>your specification of Special is not primitively recursive, because the last <br>\nline calls special on the right child v of the left child x, but primitive <br>\nrecursion only allows to call Special on the immediate children x and y. <br>\nAdmittedly, the error message could be better.</p>\n<p>There are two ways to solve this:</p>\n<p>a) Since your function is not primitvely recursive, use the more general <br>\nfunction package. This way, you can also transform the ugly case expression into <br>\nmultiple pattern matches. Moreover, fun generates custom rules for induction and <br>\ncase analysis.</p>\n<p>b) Transform your definition into primitive recursion. I think the following is <br>\nequivalent to your definition:</p>\n<p>primrec Special :: \"Tree =&gt; bool\" where<br>\n  \"Special leaf1 = True\" |<br>\n  \"Special leaf2 = True\" |<br>\n  \"Special (x .. y) = (Special x /\\ Special y /\\<br>\n      (case x of (u .. v) =&gt; u = leaf1 | _ =&gt; True))\"</p>\n<p>Andreas</p>",
        "id": 294147635,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848095
    },
    {
        "content": "<p>From: Lukas Bulwahn &lt;<a href=\"mailto:bulwahn@in.tum.de\">bulwahn@in.tum.de</a>&gt;<br>\nThe error message might be misleading, but this function is not <br>\nprimitive recursive,<br>\nin the third equation, you would only be allowed to use recursive calls <br>\nSpecial x and Special y, but not Special v.</p>\n<p>One can probably reformulate it to fit the syntactic criteria of <br>\nprimrec, but it certainly easier just to use fun, as Larry suggested.</p>\n<p>Lukas</p>",
        "id": 294147647,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848101
    },
    {
        "content": "<p>From: Viorel Preoteasa &lt;<a href=\"mailto:viorel.preoteasa@abo.fi\">viorel.preoteasa@abo.fi</a>&gt;<br>\nThank you all for the quick answers.<br>\nI will use \"fun\". I was afraid that using fun<br>\nwould require providing the well founded<br>\nrelation which ensures termination.</p>\n<p>However it seems that in this case Isabelle<br>\nfigures it out automatically.</p>\n<p>Viorel</p>",
        "id": 294147664,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848107
    },
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:webertj@in.tum.de\">webertj@in.tum.de</a>&gt;<br>\nViorel,</p>\n<p>The Tutorial on Function Definitions<br>\n(<a href=\"http://isabelle.in.tum.de/dist/Isabelle2011-1/doc/functions.pdf\">http://isabelle.in.tum.de/dist/Isabelle2011-1/doc/functions.pdf</a>)<br>\ncontains useful descriptions of the \"fun\" and \"function\" commands.</p>\n<p>Kind regards,<br>\nTjark</p>",
        "id": 294147681,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848116
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi all,</p>\n<blockquote>\n<p>That's precisely the point. There are very few reasons to prefer primrec to fun.</p>\n</blockquote>\n<p>well, it's a matter of taste, but there are:</p>\n<p>a) didactic: markup primitive recursive functions as such<br>\nb) efficiency: primrec is faster than fun<br>\nc) automation: the primrec construction always works, whereas for<br>\nfunction you rely on a huge stack of layers, where borderline cases you<br>\nhave not foreseen could break down the whole matter (important when you<br>\nwrite packages with themselves define recursive functions)<br>\nd) generality: in datatypes involving higher-order arguments for<br>\nconstructors, primrec may succeed, whereas function is stumbling over<br>\nthose function arguments.</p>\n<p>What I see most critical nowadays is</p>\n<blockquote>\n<p>The latter will also give you an induction rule exactly tailored to your function, and other benefits.</p>\n</blockquote>\n<p>e) simplicity: if you have a primitive recursive function specification<br>\nand define it by means of primrec, the reader of your theory <em>sees</em> that<br>\nthe corresponding proof principle is structural induction on the<br>\ncorresponding datatype, whereas function would suggest that a special<br>\ninduction rule should apply.</p>\n<p>None of these is a reason to artificially bend a straightforward<br>\nnon-primrec specification to a primrec one.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/0bju0HQlGXT6yrn5ny233g_O/signature.asc\">signature.asc</a></p>",
        "id": 294148079,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848251
    },
    {
        "content": "<p>From: \"Vromen, H.J. (Huub)\" &lt;<a href=\"mailto:H.Vromen@ftr.ru.nl\">H.Vromen@ftr.ru.nl</a>&gt;<br>\nI am trying to formalize David Lewis' account of common knowledge. My theory starts with:</p>\n<p>[cid:656F2C7C9E19423CB5CB0AC3827EF818]</p>\n<p>In line 9, I get the error message \"Ill-formed equation (expected \"lhs = rhs\") at<br>\n⋀p. shared_reason_to_believe 0 p ≡ λw. ∀i. R i p w\".<br>\nCould someone tell me what I am doing wrong?</p>\n<p>Huub Vromen<br>\nRadboud University-Nijmegen, Department of Philosophy<br>\nRoom E 16.11<br>\nErasmusplein 1, 6525 HT  Nijmegen, Netherlands<br>\n<a href=\"/user_uploads/14278/Sml-pujw_NoIaP2awnbY74lN/Attachment.tiff\">Attachment.tiff</a></p>",
        "id": 294764401,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201237
    },
    {
        "content": "<p>From: Dominic Mulligan &lt;<a href=\"mailto:Dominic.Mulligan@arm.com\">Dominic.Mulligan@arm.com</a>&gt;<br>\nHi Huub,</p>",
        "id": 294764412,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201241
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI find it difficult to see anything on this low-resolution screen shot.<br>\nWhy not make a proper copy-paste of the source text?</p>\n<p>You probably merely need to use HOL equality \"=\" in the proper way. In<br>\napplications you rarely see the Pure equality \"==\" or \"≡\", although some<br>\nusers like to confuse other users and (ab)use the latter for its<br>\nsometimes more convenient syntax precedence.</p>\n<p>Makarius</p>",
        "id": 294764543,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201309
    }
]