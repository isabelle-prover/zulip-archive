[
    {
        "content": "<p>From: Ondřej Kunčar &lt;<a href=\"mailto:kuncar@in.tum.de\">kuncar@in.tum.de</a>&gt;<br>\nHi,<br>\nI've experienced the following problem with ML-level of Isabelle (namely <br>\nwith local theories and the code generator):</p>\n<p>My code is inside the command quotient_type and thus inside a <br>\nlocal_theory context. In this context a new constant is defined (by <br>\nLocal_Theory.define) and it's called let's say \"abs\". Because I am <br>\ninside a local_theory context, this constant is actually a fixed <br>\nvariable and not a real constant. So far so good. But now I want to call <br>\nCode.add_datatype and thus say that \"abs\" is a code datatype <br>\nconstructor. I do it by the following command:<br>\nLocal_Theory.declaration {syntax = false, pervasive = true}<br>\n  (K (Context.mapping (Code.add_datatype [(name, type)]) I))</p>\n<p>But then the code generator complains that \"abs\" is not a constant.<br>\nHow can I solve this situation? It seems to me that I need<br>\neither a) jump away from a local_theory context for a while and let <br>\n\"abs\" get transformed to a real constant<br>\nor b) I need something like a \"localized\" code generator package.</p>\n<p>Thanks for an answer.</p>\n<p>Cheers,<br>\nOndrej</p>",
        "id": 294157275,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851726
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 15 May 2012, Ondřej Kunčar wrote:</p>\n<blockquote>\n<p>I've experienced the following problem with ML-level of Isabelle (namely <br>\nwith local theories and the code generator):</p>\n</blockquote>\n<p>You should not use this confusing term \"ML-level of Isabelle\". <br>\nIsabelle/ML and Isabelle/Isar are intertwined in a certain way, and there <br>\nis no lower or upper level here.  See also the recent thread <br>\n<a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2012-April/msg00066.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2012-April/msg00066.html</a></p>\n<blockquote>\n<p>My code is inside the command quotient_type and thus inside a <br>\nlocal_theory context. In this context a new constant is defined (by <br>\nLocal_Theory.define) and it's called let's say \"abs\". Because I am <br>\ninside a local_theory context, this constant is actually a fixed <br>\nvariable and not a real constant.</p>\n</blockquote>\n<p>This is again a bit confusing.  Local_Theory.define is for abstract term <br>\ndefinitions.  It depends on the local_theory target how this will be <br>\nrepresented in the foundation, and integrated into the target for later <br>\nuse by the user.  For a global theory it will become a constant, for a <br>\nlocale a constant that depends on locale parameters plus some <br>\nabbreviations, for a completely different target something completely <br>\ndifferent.</p>\n<p>A simple analogy is this: local_theory is the regular virtual memory view <br>\nof a process address space that is now commonplace, probably even on tiny <br>\nmobile devices.  There are physical hardware addresses in the foundations <br>\nsomewhere, but you cannot count on that in your program code.</p>\n<blockquote>\n<p>But now I want to call Code.add_datatype and thus say that \"abs\" is a <br>\ncode datatype constructor. I do it by the following command: <br>\nLocal_Theory.declaration {syntax = false, pervasive = true} (K <br>\n(Context.mapping (Code.add_datatype [(name, type)]) I))</p>\n</blockquote>\n<p>The \"K\" above is part of the problem.  It disregards the morphism for the <br>\nmapping, which is required to move things from one context to the other, <br>\nbefore they can be applied to the concrete context in question.</p>\n<p>Admittedly this is the difficult aspect of local theory declarations, but <br>\nignoring it is no solution.  To make effective use of the Isabelle <br>\ninfrastructure, it is important to develop a habit to do things in \"the <br>\ncanonical\" way.  Thus one does not have to revisit all the implementation <br>\ndetails from the ground up over and over again.</p>\n<blockquote>\n<p>But then the code generator complains that \"abs\" is not a constant. How <br>\ncan I solve this situation? It seems to me that I need either a) jump <br>\naway from a local_theory context for a while and let \"abs\" get <br>\ntransformed to a real constant or b) I need something like a \"localized\" <br>\ncode generator package.</p>\n</blockquote>\n<p>Generally, you can try to work with general declarations with proper use <br>\nof morphisms, or make a reduced version that merely puts things into the <br>\nbackground theory context.  For that you transform the abstract term once <br>\nto move it the global theory and then work with <br>\nLocal_Theort.background_theory etc.</p>\n<p>I can't say anything about the possibility of a localied code generator. <br>\nFlorian Haftmann should comment on that.</p>\n<p>Makarius</p>",
        "id": 294157417,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851794
    },
    {
        "content": "<p>From: Ondřej Kunčar &lt;<a href=\"mailto:kuncar@in.tum.de\">kuncar@in.tum.de</a>&gt;<br>\nThanks. Local_Theort.background_theory did the job.</p>\n<p>Ondrej</p>",
        "id": 294157571,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851853
    }
]