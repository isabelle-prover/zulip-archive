[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Fri, 28 May 2010, Stephan Merz wrote:</p>\n<blockquote>\n<p>I'm having a problem with sort inference in Isabelle/HOL: when I enter</p>\n<p>lemma \"b = a ==&gt; f a (g a) = f b (g b)\"</p>\n<p>the following types and sorts are inferred:</p>\n<p>variables:<br>\n g :: 'a =&gt; 'c<br>\n f :: 'a =&gt; 'c =&gt; 'b<br>\n a, b :: 'a<br>\ntype variables:<br>\n 'a, 'b :: type<br>\n 'c :: {}</p>\n<p>Note the sort {} for type variable 'c. This prevents me to do something like</p>\n<p>lemma \"b = a ==&gt; f a (g a) = f b (g b)\"<br>\nproof -<br>\n from fun_cong have \"f a = f b ==&gt; f a (g a) = f b (g a)\"</p>\n<p>which yields</p>\n<p>*** Type unification failed: Variable 'c::{} not of sort type<br>\n*** Type error in application: Incompatible operand type</p>\n</blockquote>\n<p>This behaviour has been there from the very first day of type classes in <br>\nIsabelle.  Until some years ago it was even more confusing, since Pure had <br>\nits own \"logic\" type class, simular to \"type\" in HOL.</p>\n<p>Since we have a very powerful \"user-space type system\" mechanism for quite <br>\nsome time already, I have experimented with a global \"type improvement\" <br>\nfor Isabelle/HOL at some point, that specializes pending inference <br>\nparameters to something of sort HOL.type.  Unfortunately, it did not fully <br>\nwork out in certain border cases where the fully general types are needed <br>\ninternally (maybe it can be attempted again at some later stage).</p>\n<blockquote>\n<p>I can get around this problem by stating the lemma in the form</p>\n<p>lemma \"b = a ==&gt; (f::'a =&gt; 'c =&gt; 'b) a ((g::'a =&gt; 'c) a) = f b (g b)\"</p>\n<p>that is by explicitly annotating the term with the inferred types (even <br>\nwithout stating sort constraints) -- I assume that is because the <br>\nexplicitly given type variables receive the default sort \"type\"</p>\n</blockquote>\n<p>Yes, the \"default\" sort is attached to any type variable that is explicit <br>\nin the text, but does not have a sort constraint yet -- either directly or <br>\nvia the context.</p>\n<p>BTW, the long statement form allows to express your local context <br>\nexplicitly, without complicating the terms themselves:</p>\n<p>lemma<br>\n   fixes f :: \"'a =&gt; 'c =&gt; 'b\"<br>\n     and g :: \"'a =&gt; 'c\"<br>\n   assumes \"b = a\"<br>\n   shows \"f a (g a) = f b (g b)\"</p>\n<p>Makarius</p>",
        "id": 294107088,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835570
    },
    {
        "content": "<p>From: Stephan Merz &lt;<a href=\"mailto:Stephan.Merz@loria.fr\">Stephan.Merz@loria.fr</a>&gt;<br>\nI'm having a problem with sort inference in Isabelle/HOL: when I enter</p>\n<p>lemma \"b = a ==&gt; f a (g a) = f b (g b)\"</p>\n<p>the following types and sorts are inferred:</p>\n<p>variables:<br>\n  g :: 'a =&gt; 'c<br>\n  f :: 'a =&gt; 'c =&gt; 'b<br>\n  a, b :: 'a<br>\ntype variables:<br>\n  'a, 'b :: type<br>\n  'c :: {}</p>\n<p>Note the sort {} for type variable 'c. This prevents me to do something like</p>\n<p>lemma \"b = a ==&gt; f a (g a) = f b (g b)\"<br>\nproof -<br>\n  from fun_cong have \"f a = f b ==&gt; f a (g a) = f b (g a)\"</p>\n<p>which yields</p>\n<p>*** Type unification failed: Variable 'c::{} not of sort type<br>\n*** Type error in application: Incompatible operand type</p>\n<p>since fun_cong expects functions between types of sort \"type\".</p>\n<p>I can get around this problem by stating the lemma in the form</p>\n<p>lemma \"b = a ==&gt; (f::'a =&gt; 'c =&gt; 'b) a ((g::'a =&gt; 'c) a) = f b (g b)\"</p>\n<p>that is by explicitly annotating the term with the inferred types (even without stating sort constraints) -- I assume that is because the explicitly given type variables receive the default sort \"type\". I understand that the inferred type is more general, but it is actually useless. As a user, I find that behavior quite strange -- bug or feature?</p>\n<p>Thanks,<br>\nStephan</p>",
        "id": 294109129,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836208
    }
]