[
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear all,</p>\n<p>what is the reason that this function</p>\n<p>fun f :: \"'a tree ⇒ nat × nat\"<br>\n    where<br>\n      \"f (Tree ts) = foldl (λm t. let (l, k) = m; (u, v) = f t in (u +<br>\nl, v + k)) (0, 0) ts\"</p>\n<p>on the datatype</p>\n<p>datatype 'a tree = Tree \"'a tree list\"</p>\n<p>is automatically proven to be total, while this (almost) equivalent variant</p>\n<p>fun f :: \"'a tree ⇒ nat × nat\"<br>\n    where<br>\n      \"f (Tree ts) = foldl (λ(m, n) t. let (u, v) = f t in (u + m, v +<br>\nn)) (0, 0) ts\"</p>\n<p>is rejected?</p>\n<p>There is a fundef_cong installed for case_prod (and \"%(x, y). f x y\" is<br>\nsyntax for \"case_prod (%x y. f x y)\") but it doesn't seem to apply.</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294714812,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183415
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi.</p>\n<p>The congruence rules for case_prod do not work with the higher-order<br>\nterm that %(_,_) _ translates to.</p>\n<p>Try, e.g.,<br>\n  lemma [fundef_cong]:<br>\n    assumes \"(case m of (a,b) ⇒ t a b c) = (case m' of (a,b) ⇒ t' a b<br>\nc')\"<br>\n    shows \"case_prod (λa b c. t a b c) m c = case_prod (λa b c. t' a b<br>\nc) m' c'\"  <br>\n    using assms by (auto split: prod.split)  </p>\n<p>to convert the higher-order term inside the case expression to a first-<br>\norder term, on which the cong-rule for case_prod will work.</p>",
        "id": 294714824,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183418
    }
]