[
    {
        "content": "<p>From: \"Roger H.\" &lt;<a href=\"mailto:s57076@hotmail.com\">s57076@hotmail.com</a>&gt;<br>\nHello!</p>\n<p>how can i prove this result:</p>\n<p>lemma \"set (tl L) ⊆ set L\"</p>\n<p>Thank you!</p>",
        "id": 294240745,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906875
    },
    {
        "content": "<p>From: Ramana Kumar &lt;<a href=\"mailto:rk436@cam.ac.uk\">rk436@cam.ac.uk</a>&gt;<br>\nThat statement may not be true, unless you add an hypothesis that L is not<br>\nempty. (It depends on how tl is defined.)</p>\n<p>The result should then follow easily by induction on L.</p>",
        "id": 294240783,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906886
    },
    {
        "content": "<p>From: Ondřej Kunčar &lt;<a href=\"mailto:kuncar@in.tum.de\">kuncar@in.tum.de</a>&gt;<br>\nby (induction L) auto</p>",
        "id": 294240801,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906895
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nProperties of functions defined by pattern matching can usually be<br>\nproved by induction. \"tl\" is not recursive, so case analysis suffices.<br>\nSee the \"induct\" and \"cases\" methods.</p>\n<p>-- Lars</p>",
        "id": 294240811,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906899
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nBy calling sledgehammer, which gave me</p>\n<p>by (metis (lifting) append_in_lists_conv dual_order.refl lists_eq_set<br>\nmem_Collect_eq rotate1_hd_tl set_rotate1 tl.simps(1))</p>\n<p>Not a pretty proof, but I got it w/o having to post anything.</p>\n<p>Tobias</p>",
        "id": 294240933,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906937
    }
]