[
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>try sledgehammer on these things. You can also use a more detailed Isar<br>\nproof:</p>\n<p>lemma ineq:<br>\n  fixes a::real and b::real<br>\n  assumes \"a &gt; 0\" \"a &lt; 1\" \"b &gt; 0\" \"b &lt; 0\"<br>\n  shows \"a + b - a * b &gt; 0\"<br>\nproof-<br>\n  from <code>a &lt; 1</code> and <code>b &gt; 0</code> have \"b * (1 - a) &gt; 0\"<br>\n      by (simp add: algebra_simps)<br>\n  with <code>a &gt; 0</code> show ?thesis<br>\n      by (simp add: algebra_simps)<br>\nqed</p>\n<p>Cheers,<br>\nManuel</p>",
        "id": 294244668,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908425
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThis is a cute one. For a start, it is (a) non-linear and (b) not provable by<br>\njust multiplying things out and reasoning modulo AC, which is essentially what<br>\nalgebra/field_simps are doing.</p>\n<p>At first I tried what I thought to be the perfect match, namely I imported<br>\n\"~~/src/HOL/Library/Sum_of_Squares\", a proof procedure esp for non-linear<br>\ninequalities by John Harrison. Unfortunately, although the problem is simple,<br>\n\"by sos\" did not work (in the amount of time I waited). Then I did what Manuel<br>\nalready suggested and got this:</p>\n<p>by (metis add_less_cancel_left comm_monoid_add_class.add.right_neutral<br>\ncomm_monoid_mult_class.mult.left_neutral<br>\ncomm_semiring_1_class.normalizing_semiring_rules(24) diff_add_cancel<br>\npos_add_strict real_mult_less_iff1)</p>\n<p>Not very informative, but it does the job. Although sledgehammer is unlikely to<br>\nbe effective on more complicated arithmetic formulas.</p>\n<p>Having seen Manuel's proof and the fact that one assumption is not needed, I<br>\ntried John's sos again and got this proof with certificate:</p>\n<p>by (sos_cert \"((((A&lt;0 * (A&lt;1 * A&lt;2)) * R&lt;1) + (((A&lt;2 * R&lt;1) * (R&lt;1/4 * [a]^2)) +<br>\n(((A&lt;1 * R&lt;1) * (R&lt;1/4 * [~1*a + b]^2)) + (((A&lt;0 * R&lt;1) * (R&lt;1/4 * [a]^2)) +<br>\n(((A&lt;=0 * (A&lt;2 * R&lt;1)) * (R&lt;1/4 * [1]^2)) + ((A&lt;=0 * (A&lt;0 * R&lt;1)) * (R&lt;1/4 *\n[1]^2))))))))\")</p>\n<p>Again, a bit cryptic, but for general non-linear inequalities sos is the<br>\nrecommended method.</p>\n<p>Tobias</p>",
        "id": 294244672,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908428
    },
    {
        "content": "<p>From: Steffen Juilf Smolka &lt;<a href=\"mailto:steffen.smolka@in.tum.de\">steffen.smolka@in.tum.de</a>&gt;<br>\nThere is actually another option since recently (assuming you are using the repository version of Isabelle). If you are interested in a step-by-step proof but don't won't to do the work yourself, you can try calling sledgehammer with the isar_proofs option:</p>\n<p>lemma test:<br>\n  assumes a1: \"(a::real)&gt;0\" and a2: \"a&lt;1\" and b1: \"(b::real)&gt;0\" and b2: \"b&lt;1\"<br>\n  shows \"a+b - a*b &gt; 0\"<br>\nsledgehammer [isar_proofs, isar_compress=2]</p>\n<p>The isar_compress option lets you control the level of detail of the generated proof(s).<br>\nOn my machine, sledgehammer came up with the following proof:</p>\n<p>proof -<br>\n  have \"a * b &lt; b\"<br>\n    by (metis a2 b1 comm_semiring_1_class.normalizing_semiring_rules(11) mult_strict_right_mono)<br>\n  hence \"a * b &lt; a + b\"<br>\n    by (metis a1 pos_add_strict)<br>\n  thus \"0 &lt; a + b - a * b\"<br>\n    by (metis add_less_imp_less_right comm_semiring_1_class.normalizing_semiring_rules(5) diff_add_cancel)<br>\nqed</p>\n<p>I think the resulting proof is actually quite nice and easy to follow. (Unfortunately, it doesn't always work that well.)<br>\nThe proof gets even nicer after some manual post-processing (which may be done automatically in the near future):</p>\n<p>proof -<br>\n  have \"a * b &lt; b\"<br>\n    by (simp add: algebra_simps a2 b1)<br>\n  hence \"a * b &lt; a + b\"<br>\n    by (simp add: a1 pos_add_strict)<br>\n  thus \"0 &lt; a + b - a * b\"<br>\n    by simp<br>\nqed</p>\n<p>Regards,<br>\nSteffen</p>",
        "id": 294244700,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908440
    }
]