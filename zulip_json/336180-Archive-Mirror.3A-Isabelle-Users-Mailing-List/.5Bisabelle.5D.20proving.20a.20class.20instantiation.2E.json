[
    {
        "content": "<p>From: Viorel Preoteasa &lt;<a href=\"mailto:viorel.preoteasa@abo.fi\">viorel.preoteasa@abo.fi</a>&gt;<br>\nHello,</p>\n<p>I have a problem proving a class instantiation.</p>\n<p>after the instance keyword I get the following proof obligation:</p>\n<p>OFCLASS('a N, some_algebra_class)</p>\n<p>First question is how do I unfold this expression to be able to<br>\nuse apply scripts and not isar structured proofs.</p>\n<p>Second if I start an isar proof using the keyword proof,<br>\nthen I get 8 proof  subgoals:</p>\n<ol>\n<li>/\\ a b c . a * b = a * c ==&gt; b = c</li>\n<li>\n<p>/\\ b a c . b * a = c * a ==&gt; b = c<br>\n...</p>\n</li>\n<li>\n<p>...</p>\n</li>\n</ol>\n<p>I have 8 lemmas proved already for all these subgoals.</p>\n<p>Now if I use:</p>\n<p>fix a b c::\"'a N\" show \"a * b = a * c ==&gt; b = c\"  by (rule <br>\ncancel_times_left, simp) next;</p>\n<p>I cannot get rid of the first suboal. The first subgoal changes to:</p>\n<ol>\n<li>/\\ a b c . a * b = a * c ==&gt; ?a12 a b c * b =?a12 a b c * c</li>\n<li>\n<p>/\\ b a c . b * a = c * a ==&gt; b = c<br>\n...</p>\n</li>\n<li>\n<p>...</p>\n</li>\n</ol>\n<p>I find this proof style very difficult. As I mentioned I have<br>\nalready lemmas for all these subgoals, but I am not<br>\nable to use the lemmas to prove the subgoals. Is there an easier<br>\nway of discharging the subgoals without retyping them?</p>\n<p>Best regards,</p>\n<p>Viorel</p>",
        "id": 294121179,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839876
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Viorel,</p>\n<p>I think what you basically have to write is</p>\n<p>instance<br>\napply intro_classes<br>\napply (fact &lt;all your already proved facts)+<br>\ndone</p>\n<p>which can be collapsed to</p>\n<p>instance proof<br>\nqed (fact &lt;all your already proved facts)+</p>\n<p>See the Isar Reference manual for the intro_classes and fact methods.</p>\n<p>However I do not recommend to have the obligations proved as separate<br>\nlemmas: after instantiation, you can use the corresponding theorems of<br>\nthe class specification, so this introduces perhaps confusing duplication.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/iTs6tttLgcHWhPCF3hncQ20P/signature.asc\">signature.asc</a></p>",
        "id": 294121193,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839883
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nOn Tue, Nov 9, 2010 at 4:17 AM, Viorel Preoteasa<br>\n&lt;<a href=\"mailto:viorel.preoteasa@abo.fi\">viorel.preoteasa@abo.fi</a>&gt; wrote:</p>\n<blockquote>\n<p>fix a b c::\"'a N\" show \"a * b = a * c ==&gt; b = c\"  by (rule<br>\ncancel_times_left, simp) next;</p>\n<p>I cannot get rid of the first suboal. The first subgoal changes to:</p>\n<ol>\n<li>/\\ a b c . a * b = a * c ==&gt; ?a12 a b c * b =?a12 a b c * c</li>\n<li>/\\ b a c . b * a = c * a ==&gt; b = c</li>\n</ol>\n</blockquote>\n<p>Isar proofs behave strangely when you 'show' something with a<br>\nmeta-implication (==&gt;) in it, as you've done here. This has been<br>\ndiscussed on the mailing list before:</p>\n<p><a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2009-April/msg00052.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2009-April/msg00052.html</a><br>\n<a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2009-September/msg00044.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2009-September/msg00044.html</a></p>\n<p>The quick fix is to avoid using this:</p>\n<blockquote>\n<p>fix a b c::\"'a N\" show \"a * b = a * c ==&gt; b = c\"</p>\n</blockquote>\n<p>and instead use explicit 'assume' commands:</p>\n<p>fix a b c::\"'a N\" assume \"a * b = a * c\" thus \"b = c\"</p>\n<p>Hopefully this strange behavior can be changed in a future release of<br>\nIsabelle, because using 'show' with meta-implications is useful<br>\nsometimes, and users seem to get stuck on the same problem on a<br>\nregular basis.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294121212,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839889
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 9 Nov 2010, Brian Huffman wrote:</p>\n<blockquote>\n<p>&lt;<a href=\"mailto:viorel.preoteasa@abo.fi\">viorel.preoteasa@abo.fi</a>&gt; wrote:</p>\n<blockquote>\n<p>fix a b c::\"'a N\" show \"a * b = a * c ==&gt; b = c\"  by (rule<br>\ncancel_times_left, simp) next;</p>\n<p>I cannot get rid of the first suboal. The first subgoal changes to:</p>\n<ol>\n<li>/\\ a b c . a * b = a * c ==&gt; ?a12 a b c * b =?a12 a b c * c</li>\n<li>/\\ b a c . b * a = c * a ==&gt; b = c</li>\n</ol>\n</blockquote>\n<p>The quick fix is to avoid using this:</p>\n<blockquote>\n<p>fix a b c::\"'a N\" show \"a * b = a * c ==&gt; b = c\"</p>\n</blockquote>\n<p>and instead use explicit 'assume' commands:</p>\n<p>fix a b c::\"'a N\" assume \"a * b = a * c\" thus \"b = c\"</p>\n<p>Hopefully this strange behavior can be changed in a future release of <br>\nIsabelle,</p>\n</blockquote>\n<blockquote>\n<p>users seem to get stuck on the same problem on a regular basis.</p>\n</blockquote>\n<p>This is mainly due to the historic goal state output: when the system <br>\nprints a subgoal \"!!x. A x ==&gt; B x\" it means \"for arbitrary but fixed x <br>\nyou may now assume A x and then have to show B x\", but this is not <br>\nimmediately clear. Since the post-Proof-General model is less centered <br>\naround goal states anyway, the confusion might disappear by itself at some <br>\npoint.  There are also other reforms in the pipeline (for many years <br>\nalready) that did not make it into the light of reality yet.</p>\n<blockquote>\n<p>because using 'show' with meta-implications is useful sometimes</p>\n</blockquote>\n<p>Can you give an example for that?  I.e. where show \"!!x. A x ==&gt; B x\"<br>\nis needed as such, instead of something that is equivalent to<br>\n{ fix x assume \"A x\" then show \"B x\" ... } ?</p>\n<p>Makarius</p>",
        "id": 294121223,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839894
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nOn Tue, Nov 9, 2010 at 6:02 AM, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<blockquote>\n<p>On Tue, 9 Nov 2010, Brian Huffman wrote:</p>\n<blockquote>\n<p>because using 'show' with meta-implications is useful sometimes</p>\n</blockquote>\n<p>Can you give an example for that?  I.e. where show \"!!x. A x ==&gt; B x\"<br>\nis needed as such</p>\n</blockquote>\n<p>I've used the show \"!!x. A x ==&gt; B x\" pattern most often in class<br>\ninstance or locale interpretation proofs, where I have several goals,<br>\nand maybe one or two of them have fixes or assumptions. Often I need<br>\nto prove a few facts (using have \"...\") that will be used in multiple<br>\nplaces.</p>\n<p>instance<br>\nproof<br>\n  have lemma1: \"...\"<br>\n  show \"... first class assumption ...\"<br>\n    by (... lemma1 ...)<br>\n  show \"!!x. A x ==&gt; ... second class assumption ...\"<br>\n    by (... lemma1 ...)<br>\n  show \"!!x. B x ==&gt; ... third class assumption ...\"<br>\n    by (... lemma1 ...)<br>\nqed</p>\n<p>I can't use \"next\", since that erases all of my local facts along with<br>\nthe local assumptions:</p>\n<p>instance<br>\nproof<br>\n  have lemma1: \"...\"<br>\n  show \"... first class assumption ...\"<br>\n    by (... lemma1 ...)<br>\nnext<br>\n  fix x assume \"A x\" thus \"... second class assumption ...\"<br>\n    by (... lemma1 ...)<br>\n(* error: lemma1 is no longer in scope! *)</p>\n<p>The only alternative that I knew about before now was to add another<br>\nlevel of nesting, and restate the goal again. For large locale<br>\ninterpretations this is quite verbose, compared to the original<br>\nsolution. (Recall that show ?thesis doesn't work for locale<br>\ninterpretations!)</p>\n<p>instance<br>\nproof -<br>\n  have lemma1: \"...\"<br>\n  show \"OFCLASS('a, foo_class)\"<br>\n  proof<br>\n    show \"... first class assumption ...\"<br>\n      by (... lemma1 ...)<br>\n  next<br>\n    fix x assume \"A x\" thus \"... second class assumption ...\"<br>\n      by (... lemma1 ...)<br>\n  next<br>\n    fix x assume \"B x\" thus \"... third class assumption ...\"<br>\n      by (... lemma1 ...)<br>\n  qed<br>\nqed</p>\n<blockquote>\n<p>instead of something that is equivalent to<br>\n{ fix x assume \"A x\" then show \"B x\" ... } ?</p>\n</blockquote>\n<p>Until now I didn't know that using 'show' inside a proof block { .. }<br>\nwould even work to discharge a goal. Where is this documented? In the<br>\nIsar tutorial, proof blocks are only ever used with 'have'.</p>\n<p>Indeed, it seems like this would work well in the situation I<br>\ndescribed, and it is only a bit more verbose than the show \"!!x. A x<br>\n==&gt; B x\" approach.</p>\n<p>Even though it seems that show \"!!x. A x ==&gt; B x\" is never strictly<br>\nnecessary, I think that the handling of it should be changed: It<br>\nshould have exactly the same effect on the goal state as {fix x assume<br>\n\"A x\" thus \"B x\" }, which is what most users expect. The only other<br>\ndesign choice that makes sense to me is to have show \"!!x. A x ==&gt; B<br>\nx\" cause an error message. The current behavior is just weird.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294121270,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839910
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThere is one frequent situation where stating a goal in the wysiwyg<br>\nstyle (i.e. with ==&gt;) works very well, namely inductions.</p>\n<p>Tobias</p>\n<p>Brian Huffman schrieb:</p>",
        "id": 294121277,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839913
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 9 Nov 2010, Brian Huffman wrote:</p>\n<blockquote>\n<p>On Tue, Nov 9, 2010 at 6:02 AM, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<p>On Tue, 9 Nov 2010, Brian Huffman wrote:</p>\n<blockquote>\n<blockquote>\n<p>because using 'show' with meta-implications is useful sometimes</p>\n</blockquote>\n<p>Can you give an example for that?  I.e. where show \"!!x. A x ==&gt; B x\"<br>\nis needed as such</p>\n</blockquote>\n<p>I've used the show \"!!x. A x ==&gt; B x\" pattern most often in class<br>\ninstance or locale interpretation proofs, where I have several goals,<br>\nand maybe one or two of them have fixes or assumptions. Often I need<br>\nto prove a few facts (using have \"...\") that will be used in multiple<br>\nplaces.</p>\n<p>instance<br>\nproof<br>\n have lemma1: \"...\"<br>\n show \"... first class assumption ...\"<br>\n   by (... lemma1 ...)<br>\n show \"!!x. A x ==&gt; ... second class assumption ...\"<br>\n   by (... lemma1 ...)<br>\n show \"!!x. B x ==&gt; ... third class assumption ...\"<br>\n   by (... lemma1 ...)<br>\nqed</p>\n<p>I can't use \"next\", since that erases all of my local facts along with<br>\nthe local assumptions:</p>\n<p>instance<br>\nproof<br>\n have lemma1: \"...\"<br>\n show \"... first class assumption ...\"<br>\n   by (... lemma1 ...)<br>\nnext<br>\n fix x assume \"A x\" thus \"... second class assumption ...\"<br>\n   by (... lemma1 ...)<br>\n(* error: lemma1 is no longer in scope! *)</p>\n<p>The only alternative that I knew about before now was to add another<br>\nlevel of nesting, and restate the goal again. For large locale<br>\ninterpretations this is quite verbose, compared to the original<br>\nsolution. (Recall that show ?thesis doesn't work for locale<br>\ninterpretations!)</p>\n</blockquote>\n<p>You can use 'next' -- with plain blocks { ... } without restating a nested <br>\ngoal.  See also section \"6.1.2 Blocks\" in the isar-ref manual of <br>\nIsabelle2009-2.</p>\n<blockquote>\n<blockquote>\n<p>instead of something that is equivalent to<br>\n{ fix x assume \"A x\" then show \"B x\" ... } ?</p>\n</blockquote>\n<p>Until now I didn't know that using 'show' inside a proof block { .. } <br>\nwould even work to discharge a goal. Where is this documented? In the <br>\nIsar tutorial, proof blocks are only ever used with 'have'.</p>\n</blockquote>\n<p>The situation of Isabelle manuals is very complex.  In general you cannot <br>\nexpect a tutorial to tell the full story, although the explanation of <br>\n'next' in the Isar tutorial is especially misleading, since it suggests a <br>\nconnection to subgoals that does not exist.</p>\n<p>While the reference manuals that are maintained by myself are more <br>\nprecise, they are often harder to understand.  In recent years I have <br>\nstarted to add some examples, so this should become better.  (The isar-ref <br>\nmanual is still lagging behind, but the implementation manual already <br>\ngives many concrete standard schemes that work.)</p>\n<blockquote>\n<p>Indeed, it seems like this would work well in the situation I described, <br>\nand it is only a bit more verbose than the show \"!!x. A x ==&gt; B x\" <br>\napproach.</p>\n<p>Even though it seems that show \"!!x. A x ==&gt; B x\" is never strictly <br>\nnecessary, I think that the handling of it should be changed: It should <br>\nhave exactly the same effect on the goal state as {fix x assume \"A x\" <br>\nthus \"B x\" }, which is what most users expect. The only other design <br>\nchoice that makes sense to me is to have show \"!!x. A x ==&gt; B x\" cause <br>\nan error message. The current behavior is just weird.</p>\n</blockquote>\n<p>I'd say it is just a small detail that has not found its proper <br>\napplication yet.  The behaviour is not accidental, and I was fully aware <br>\nof it around 1999 when that part of Isar emerged.  If I would have forced <br>\nother aspects of the language like that in the past, many useful patterns <br>\nwould have been eliminated.</p>\n<p>The recurrent user confusion is always of the same pattern: people think <br>\nin terms of tactical goal states and suddenly find themselves in the world <br>\nof structured Isar proofs, typically via class instantiation proofs. <br>\nThis problem can be solved by having the system react on user input in a <br>\nway that immediately guides in the right direction.</p>\n<p>Makarius</p>",
        "id": 294121313,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839931
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIt is in fact a short form of this:</p>\n<p>{ fix x presume \"A x\" show \"B x\" ... }</p>\n<p>The question about \"short-cuts\" in general is of a slightly different <br>\nnature. One way is to have the \"IDE\" make it quick and easy to produce the <br>\nright text.  Another way is to come up with some extra notational devices <br>\nthat address this point, and maybe 2 or 3 other ones.</p>\n<p>I did start to experiment with various short versions of<br>\n{fix x assume \"A x\" show \"B x\" ... } in 2006, analogous<br>\nto fixes/assumes/shows/obtains at the theory level, but it got swamped in <br>\nthe release chaos of 2006/2007.  But it is not forgotten, and will <br>\nre-emerge and some point ...</p>\n<p>Makarius</p>",
        "id": 294121331,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839937
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nSo of the two possible interpretations of show \"!!x. A x ==&gt; B x\", you<br>\nspecifically chose the version with 'presume' rather than 'assume'.<br>\nWhy did you think this was the right choice? Comments on the mailing<br>\nlist have clearly shown that users uniformly expect the 'assume'<br>\ninterpretation, and are thoroughly confused by the current behavior.</p>\n<p><a href=\"http://en.wikipedia.org/wiki/Principle_of_least_astonishment\">http://en.wikipedia.org/wiki/Principle_of_least_astonishment</a></p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294121347,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839944
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe behaviour of show \"!!x. A x ==&gt; B x\" is a natural consequence of how <br>\nrule application works in Isar, and I did not force it into another <br>\ndirection when it emerged many years ago.  This is the same principle that <br>\nmade most of the language work out very well in the end.  So you are <br>\nasking to close a door where you have entered yourself before.</p>\n<p>Moreover, the \"expected\" treatment of such inlined rules would dilute <br>\nimportant concepts of the Isar language design, and make it harder to <br>\nlearn it properly later on.  One such principle is that native structural <br>\nlanguage elements are preferred over logical formulae.  If you take the <br>\nexisting fixes/assumes/shows/obtains for example, it gives the user an <br>\nopportinity to add names, attributes, is patterns etc. that can be later <br>\nused in the proof.  It also avoids an argument, if !!/==&gt; are just copies <br>\nof !/--&gt; in HOL, or a separete notation for rules, or whatever.</p>\n<p>Abbreviating { fix assume \"A x\" show \"B x\" ... } as<br>\nshow \"!!x. A x ==&gt; B x\" looses the advantages of Isar structure.<br>\nInstead, one could support something simular to fixes/assumes/shows inside <br>\na proof, but as always it requires substantial time to study the <br>\nconsequences of adding new trees to the garden, and maybe removing some <br>\nold ones.</p>\n<p>This delicate process of tending the arboretum is further complicated by <br>\ndifferent traditions being present at the same time. The whole Isar <br>\nframework grew out of certain ideas of tactical reasoning, natural <br>\ndeduction rule composition, semi-automated reasoning, and fit together so <br>\nsmoothly that many people still think that \"apply\" scripts are native to <br>\nIsar (although they are only guests).</p>\n<p>A marginal question concerning consistency and least surprise: Why do many <br>\npeople still indent toplevel Isar proofs differently from local ones? E.g. <br>\nlike this:</p>\n<p>lemma foo<br>\nby simp</p>\n<p>instead of the proper form according to the true logical structure of <br>\nIsar:</p>\n<p>lemma foo<br>\n   by simp</p>\n<p>Here the \"surprise\" has again historical roots, because the first version <br>\nis how unstructured proof scripts would look like, before they where <br>\nmanually converted to the new language many years ago.</p>\n<p>Makarius</p>",
        "id": 294121564,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840011
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>A marginal question concerning consistency and least surprise: Why do<br>\nmany people still indent toplevel Isar proofs differently from local<br>\nones? E.g. like this:</p>\n<p>lemma foo<br>\nby simp</p>\n<p>instead of the proper form according to the true logical structure of Isar:</p>\n<p>lemma foo<br>\n  by simp</p>\n</blockquote>\n<p>Lambda calculus terms do not need outermost parentheses. Paragraphs in<br>\nEnnglish texts are indented, except for the first one in a section. Etc.<br>\nFor good reasons in each case. And in this case there is not just a<br>\nsctructural reason but also the similarity with standard mathematical<br>\npractice.</p>\n<p>Tobias</p>\n<blockquote>\n<p>Here the \"surprise\" has again historical roots, because the first<br>\nversion is how unstructured proof scripts would look like, before they<br>\nwhere manually converted to the new language many years ago.</p>\n<p>Makarius</p>\n</blockquote>",
        "id": 294121582,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840017
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI did some thorough research on such details before setting a certain <br>\ndefault in formal proof documents.</p>\n<p>The point of paragraph markup is to emphasize the division of the text. <br>\nThere are two traditions.  The one with the indentation and without line <br>\nspacing is a bit more \"anglo saxon\" than the other, and more common in <br>\nsoftware packages from the US.  But it is not universal, and fails to <br>\nachieve its intention with the typical mix of formal and informal parts in <br>\nIsar documents.</p>\n<p>Here is a recent example: <br>\n<a href=\"http://isabelle.in.tum.de/repos/isabelle/rev/b8d89db3e238\">http://isabelle.in.tum.de/repos/isabelle/rev/b8d89db3e238</a> that made a big <br>\ndifference in the clarity of the structure of a text where many paragraphs<br>\nare shorter than one line.</p>\n<p>Makarius</p>",
        "id": 294121598,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840023
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nYou misunderstood me. I have not argued that paragraphs should be<br>\nindented but that there is an exception to this rule for the first<br>\nparagraph - this being another instance of the rule-with-an-exception<br>\npattern. Indeed, your default latex spacing and indenting avoids<br>\nexcessive and unnecessary indentation. Interestingly avoiding more or<br>\nless the indentation pattern you get by the \"proper\" Isar indentation<br>\nrules at the proof level:</p>\n<p>lemma<br>\n  by</p>\n<p>lemma<br>\n  by</p>\n<p>Tobias</p>\n<p>Makarius schrieb:</p>",
        "id": 294121633,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840030
    }
]