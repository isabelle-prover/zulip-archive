[
    {
        "content": "<p>From: \"Moez A. Abdel-Gawad\" &lt;<a href=\"mailto:moez@cs.rice.edu\">moez@cs.rice.edu</a>&gt;<br>\nHi,</p>\n<p>I'm new to Isabelle and Coq.</p>\n<p>However, my own personal attempt to prove the substitution<br>\nlemma in Coq - with very minor resort to the variable con-<br>\nvention and alpha-conversion equivalence - seemed to tell<br>\nthat the substitution lemma may not be the best example to<br>\nuse for <em>motivating</em> the need for the 'isabelle-nominal'<br>\npackage and project, as is done for example on this web-<br>\npage <a href=\"http://isabelle.in.tum.de/nominal/main.html\">http://isabelle.in.tum.de/nominal/main.html</a></p>\n<p>While I do not discount the possibility of the package<br>\nbeing useful - and even necessary - for other proofs, my<br>\nexperiment gave me the feeling that a much simpler app-<br>\nroach may be possible (may be even as simple as adding a<br>\nnew tactic), which may work in fact for many similar pr-<br>\noofs as well, and - if not - is very likely to work at<br>\nleast for the purpose of proving the substitution lemma.</p>\n<p>Your thoughts?</p>\n<p>-Moez</p>\n<p>PS: I was wondering if there is a Coq package and/or<br>\nproject similar to the 'isabelle-nominal' ones.</p>\n<p><a href=\"mailto:moez@rice.edu\">moez@rice.edu</a> | <a href=\"http://www.cs.rice.edu/~moez\">www.cs.rice.edu/~moez</a> | (713) 392-2844</p>\n<p>======================================================</p>\n<p>\"And you have been given of knowledge but little\"<br>\n  -Al-Qur'an [17:85]</p>\n<p>\"Our knowledge can only be finite, while our ignorance<br>\n  must necessarily be infinite.\"   -Karl Popper</p>",
        "id": 294052834,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660820284
    },
    {
        "content": "<p>From: Brian Aydemir &lt;<a href=\"mailto:baydemir@cis.upenn.edu\">baydemir@cis.upenn.edu</a>&gt;<br>\nHi Moez,</p>\n<p>If you're interested in what is possible with a \"lightweight\"<br>\napproach in this area, you may want to take at the following<br>\npaper.</p>\n<p>[1] Engineering Formal Metatheory, by Brian Aydemir, Arthur<br>\nChargu√©raud, Benjamin C. Pierce, Randy Pollack, and Stephanie<br>\nWeirich.  Available from<br>\n<a href=\"http://www.cis.upenn.edu/~baydemir/papers.shtml#AydCha+07a\">http://www.cis.upenn.edu/~baydemir/papers.shtml#AydCha+07a</a></p>\n<p>This is a paper that will appear at POPL 2008 that focuses on a<br>\nparticular style of locally nameless representation for<br>\nformalizing languages with binding.  (Coq code for the paper is<br>\navailable through the link above.)  The style is lightweight in<br>\nthat one could use it in a variety of proof assistants, e.g., Coq<br>\nand Isabelle, without any additional infrastructure.  The paper<br>\nalso makes some comparisons with other first-order approaches,<br>\nincluding the Isabelle/Nominal package.</p>\n<p>If you're interested in nominal techniques in Coq, I can mention<br>\ntwo other works (which Christian Urban has already pointed out<br>\non the Isabelle lists).</p>\n<p>[2] Nominal Reasoning Techniques in Coq, by Brian Aydemir, Aaron<br>\nBohannon, and Stephanie Weirich.  Available from<br>\n<a href=\"http://www.cis.upenn.edu/~baydemir/nominal-reasoning-in-coq.html\">http://www.cis.upenn.edu/~baydemir/nominal-reasoning-in-coq.html</a></p>\n<p>This is not really a package like the Isabelle/Nominal package but<br>\nmore a demonstration of what nominal reasoning might look like in<br>\nCoq.  In order to be practically useable, a similar amount of<br>\ninfrastructure would be required in Coq as in Isabelle.</p>\n<p>[3] A locally nameless solution to the POPLmark challenge, by<br>\nXavier Leroy.  Available from<br>\n<a href=\"http://cristal.inria.fr/~xleroy/POPLmark/locally-nameless/\">http://cristal.inria.fr/~xleroy/POPLmark/locally-nameless/</a></p>\n<p>Leroy uses some nominal techniques in a locally-nameless setting<br>\nin Coq.</p>\n<p>Cheers,<br>\nBrian</p>",
        "id": 294052844,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660820290
    },
    {
        "content": "<p>From: \"Moez A. Abdel-Gawad\" &lt;<a href=\"mailto:moez@cs.rice.edu\">moez@cs.rice.edu</a>&gt;<br>\nHi,</p>\n<p>Here's the story behind my substitution lemma proof development. I<br>\napologize if it is a bit long, and informal.  It was in fact the<br>\noriginal email I intended to send in place of my earlier email, but<br>\nthen I realized it - being long and informal - may not be approp-<br>\nriate as an introductory email. I apologize also for any possible<br>\ninconsistencies that may have crept-in due to the heavy editing,<br>\nand re-editing, I made to this message.</p>\n<p>Also, attached is my Coq proof script. It is almost-complete (except<br>\nfor the small part that needed the freshness assertion, of course),<br>\nbut it is very likely a very \"inefficient\" proof script, since I am<br>\nnew to Coq. I am, however, currently not interested in \"optimizing\"<br>\nit. My goal when I developed this proof was to learn the basics of<br>\nCoq, and to get as much as possible of the proof done with whatever<br>\ntactics are currently available in Coq (i.e., without resorting to<br>\nany sort of explicit use of nominality). The proof script is only my<br>\nsecond real - ie, non-toy-like - proof in Coq (after proving that<br>\nforall n: nat, n &lt; 2^n).</p>\n<p>In my quest to learn Coq, I started playing with a personal imple-<br>\nmentation of lambda calculus.  My initial goal was to prove the<br>\nsubstitution lemma, i.e., if x &lt;&gt; y and x \\nin FV(L) then<br>\nM[x:=N][y:=L] = [y:=L][x:=N[y:=L]].</p>\n<p>Using induction on M, doing the 'App' induction case in Coq was the<br>\nmost trivial case. As hypothesis for my proof, I had assumed - as<br>\nBarendregt explicitly does - that x &lt;&gt; y and x \\nin FV(L). Not pay-<br>\ning much attention, I did not - initially - assume freshness, nor<br>\ndid I assume the  equivalence of lambda terms modulo alpha-conver-<br>\nsion. Thus, for the 'Var' and 'Abs' induction cases, everything<br>\nwent well, by reasoning - using cases (on the boolean value<br>\n'string_dec') - whether the free variable (in case of 'Var') or the<br>\nabstraction variable (in case of 'Abs') is equal to or different<br>\nfrom other variables in the proof (i.e., x and y. The name chosen<br>\nby Coq for that auxiliary variable, in both cases, was 's', because<br>\nCoq chooses names based on the type, which is 'string' in both<br>\ncases), on until one tiny sub-subcase of the 'Abs' induction case<br>\n(also sometimes called the lambda-case), where I had 's' assumed to<br>\nbe not equal to x, but equal to y.  After doing all possible simpli-<br>\nfications, unfoldings and foldings, the goal I had to prove became:</p>\n<p>Abs s (subs x M N) = Abs s (subs x M (subs y N L))</p>\n<p>Having gone thru all earlier subcases successfully (i.e., in parti-<br>\ncular, without resorting to any additional external hypothesis), I<br>\nwas wondering why is that sub-subcase in particular hard to prove,<br>\nand what exactly was going on.  Not deterred by the failure of this<br>\nsub-subcase, I was able to do the remaining other parts of the pr-<br>\noof (using Coq's \"n:\" notation) without any problems... except for<br>\nthis little impeding sub-subcase.</p>\n<p>I then searched online for 'proving substitution lemma'. That is<br>\nwhen I came to know about the 'Nominal Isabelle' project, after<br>\ncoming across the following webpage:</p>\n<p><a href=\"http://isabelle.in.tum.de/nominal/main.html\">http://isabelle.in.tum.de/nominal/main.html</a></p>\n<p>The webpage explained what's going on very nicely, and reminded me<br>\nof the possible need for Barendregt's variable convention, as well<br>\nas the possible need for the equivalence of lambda terms modulo<br>\nalpha-conversion. It was also nice to know that there is an ongoing<br>\nproject that is trying to solve this deficiency (which is a defic-<br>\niency that exists, it seems to me, in most semi-automated theorem<br>\nprovers in general, not only in Isabelle and Coq).</p>\n<p>However, based on my experience with trying to prove the substitu-<br>\ntion lemma, it seems I may disagree with some implication in the<br>\nwebpage above.</p>\n<p>In particular, for purposes of the 'substitution lemma' only, I do<br>\nnot believe - again, based on my experience - that the 'full power'<br>\nof the freshness assumption (i.e., the variable convention) and the<br>\n'alpha-equivalence' is actually needed to prove it. Also, the \"ins-<br>\ntance of freshness\" needed seems to me to be much simpler (and gen-<br>\nerally less powerful) than the one the 'nominal-isabelle' package<br>\nwould provide (which, of course, may be useful for other more intr-<br>\nicate lemmas).</p>\n<p>That's because for proving the substitution lemma all that I needed<br>\nwas just to somehow be able to assert the freshness of 's', not in<br>\nall cases and subcases, but only <em>at that particular sub-subcase</em> I<br>\nmentioned above. I did not need the freshness of 's' in any other<br>\nparts of my proof. (I even only needed an assertion that 's' is not<br>\nequal to y, i.e., that it is different from one variable only, not<br>\nnecessarily that it is different from <em>all</em> other variables (in the<br>\ncurrent environment)).</p>\n<p>That observation led me to two conclusions.</p>\n<p>First, I would think thus that something simpler than the new nom-<br>\ninal-isabelle constructs (nominal_datatype, nominal_induction,<br>\navoiding, fresh_fact, forget, etc) maybe more intuitive, and also<br>\nmore straight-forward to add (to Isabelle, or other semi-automated<br>\ntheorem provers). In my proof development I wished there was just<br>\nsomething available as \"simple\" as a tactic that would allow stat-<br>\ning that 's is fresh' (having a syntax like 'fresh s'), to assert<br>\nthat s, as a variable name (string), is different from all other<br>\nvariable names in the current environment (x and y, as well as<br>\nother possibly ones inside M and N and L, that are irrelevant to<br>\nthe proof and are thus not explicitly mentioned in the lemma's<br>\nstatement, even though all I actually needed is for s to be diffe-<br>\nrent from y).</p>\n<p>Next, I also concluded that the substitution lemma, even though<br>\nwell-known to many PL researchers, may NOT be a very convincing<br>\nexample to cite (eg, on the webpage) for developing the new 'nom-<br>\ninal-isabelle' package. That is NOT to say the package itself is<br>\nuseless, but only to say that probably other examples can do a<br>\nbetter job in motivating the whole new package (a new package<br>\nsuggests that users have to learn a whole new bag of \"tricks and<br>\ntools\" to do proofs, and thus need a very strong motivation for<br>\nthat). In my view, using 'nominal-isabelle' to prove the substi-<br>\ntution lemma is like using a big hammer to pound a hair pin, when<br>\nit - the lemma - can, in my view, be proved using much simpler<br>\nmeans (e.g., a simple new tactic).</p>\n<p>Your insights and constructive feedback is more than welcome, and<br>\nwould be deeply appreciated.</p>\n<p>-Moez</p>\n<p>PS1: Further analyzing the subgoal written above, I realized that<br>\nthe freshness of 's' is actually not an absolute necessity in that<br>\nsub-subcase, but only if I had initially assumed (added to my hypo-<br>\nthesis) that y is not a free variable in N (y \\nin FV(N)). If that<br>\nwas assumed then the third 'subs' (substitution) in the subgoal<br>\nabove would be an identity operation over N, and the RHS would be<br>\nindeed equal to the LHS, and I'd be done. However, in the bigger<br>\ncontext, that second solution to my sub-subcase actually makes the<br>\nsubstitution lemma's statement very trivial and shallow.</p>\n<p>PS2: I am annoyed by receiving some of the latest emails three,<br>\nand even sometime four, times. What even aggravates the situation<br>\nis that there are also delayed deliveries (multiple copies of the<br>\nsame email, thus, do not come in as a chunk, at one time). I am<br>\nwondering if there is some means to get rid of this duplicity, and<br>\nof the delayed deliveries, coalescing multiple copies of the same<br>\nemails into one email, and/or having them be delivered almost at<br>\nthe same time. I did not check the mailing list archives to see if<br>\nthis issue was discussed before, but I believe it would be apprec-<br>\niated by most of subscribers to the mailing lists if it is true<br>\n(and my guess is that it is) that the vast majority of subscribers<br>\nto one list are subscribers to the other (among Coq and Isabelle),<br>\nand that subscribers of the nominal-isabelle mailing list are very<br>\nlikely to be a proper subset of the subscribers to the isabelle<br>\nmailing list (probably some cooperation at the level of the list<br>\nadmins is needed?).</p>\n<p><a href=\"mailto:moez@rice.edu\">moez@rice.edu</a> | <a href=\"http://www.cs.rice.edu/~moez\">www.cs.rice.edu/~moez</a> | (713) 392-2844</p>\n<p>======================================================</p>\n<p>\"And you have been given of knowledge but little\"<br>\n  -Al-Qur'an [17:85]</p>\n<p>\"Our knowledge can only be finite, while our ignorance<br>\n  must necessarily be infinite.\"   -Karl Popper<br>\n<a href=\"/user_uploads/14278/Q4vsMyWzGNegSVcXDaZEjiuT/LC.v\">LC.v</a></p>",
        "id": 294052887,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660820313
    }
]