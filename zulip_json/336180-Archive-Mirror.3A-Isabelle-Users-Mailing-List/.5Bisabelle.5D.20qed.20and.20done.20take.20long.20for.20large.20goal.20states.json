[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThere might be various \"after_qed\" bookkeeping steps that take long,<br>\nnotably in derived definitional packages like 'function' or<br>\n'partial_function'.</p>\n<p>Moreover, there could be genuine bottle-necks in the standard export<br>\noperations and re-adjustment operations performed at the end of a proof.</p>\n<p>If you can point to a concrete example that is particularly slow, I can<br>\ntake a look at profiling information and make more educated guesses.</p>\n<p>Makarius</p>",
        "id": 294678005,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661175641
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Isar experts,</p>\n<p>I am looking for ways to speed up the processing of some of my Isar proofs. Something I <br>\nnoticed is that when there are no subgoals left, \"done\" and \"qed\" nevertheless take <br>\nbetween 2 and 7 seconds of processing (according to the Isabelle timing panel in jEdit).</p>\n<p>I guess that the delays must have something to do with the size of the statement being <br>\nproved. They only occur for large proof states. For example, large elimination rules (with <br>\napprox. 20 cases) or the cases for induction proves about functions defined with <br>\npartial_function. The delays are particularly annoying for the latter case, because each <br>\ninduction proof has many subcases and the delay occurs for each of the subcases.</p>\n<p>Are there any options or tweaks to speed up the processing of qed/done?</p>\n<p>As the delays also appear inside proofs (i.e., not for top-level lemma statements), I <br>\nsuspect that attributes and propagation of facts to locale interpretations are not to be <br>\nblamed.</p>\n<p>My machine is still the usual one:</p>\n<p>Linux lenovoal 3.13.0-91-generic #138-Ubuntu SMP Fri Jun 24 17:00:34 UTC 2016 x86_64 <br>\nx86_64 x86_64 GNU/Linux<br>\nIntel(R) Core(TM) i7-3630QM CPU @ 2.40GHz<br>\n16GB of RAM</p>\n<p>Thanks in advance,<br>\nAndreas</p>",
        "id": 294678469,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661175824
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis requires more rethinking of the approach.</p>\n<p>Net.match_term explicitly says \"MUST BE BETA-ETA NORMAL\", in contrast to<br>\nNet.unify_term.</p>\n<p>I am unsure if the net operations can be refined to cope with non-normal<br>\nterms.</p>\n<p>Makarius</p>",
        "id": 294680745,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176646
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis probably refers to the \"eta_contract\" attribute. It happens much<br>\nlater when abstractions are pretty printed.</p>\n<p>Abbreviations see the original, independently of this option.</p>\n<p>Makarius</p>",
        "id": 294680768,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176658
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nAs the author of this code, which is already pretty tricky, I would be surprised if it could be fixed easily. If it were, the penalty might be much more permissive filtering, which would defeat the purpose of this code.</p>\n<p>It would be useful to see “got indeed a bit faster” quantified. Did the change make a really big improvement in some situations?</p>\n<p>Larry</p>",
        "id": 294680792,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176671
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Larry,</p>\n<p>With the plain matching, the processing times for the qed's and done's got down from about <br>\n4.5s to 0.8s on my machine (according to the Timing panel). Since there are dozens of them <br>\nin that particular theory, the effect was quite noticeable.</p>\n<p>Andreas</p>",
        "id": 294680817,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176677
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThat is a major gain and certainly worth keeping.</p>\n<p>I am not terribly bothered by the presentation of abbreviations, but nevertheless, perhaps we can get the best of both? After all, no abbreviations are printed when you type qed.</p>\n<p>Larry Paulson</p>",
        "id": 294680873,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176683
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe overall result is printed, and thus all abbreviations of the context<br>\nare potentially applied to some potentially large term.</p>\n<p>This relative verbosity of the system goes back to the 1990s and TTY<br>\nmode / Proof General. In early PIDE versions, it was not done due to<br>\nconfusion with the remaining Proof General setup. After that was<br>\ndeleted, printing in the old way was mostly restored.</p>\n<p>So maybe instead of tweaking low-level data structures, it is better to<br>\nchange something in the general policies. E.g.</p>\n<p>* A context option like \"show_results\" to control printing of results.<br>\n  * Asynchronous printing of results.</p>\n<p>Makarius</p>",
        "id": 294680886,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176689
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Larry,</p>\n<p>I do care very much about abbreviations. Especially when I work inside a locales, I want <br>\nthe constants defined in the locale to be printed without all the arguments, i.e.,</p>\n<p>foo x</p>\n<p>rather than</p>\n<p><a href=\"http://l.foo\">l.foo</a> p1 p2 p3 x</p>\n<p>And if for some reason, any of the parameters p_i gets eta-expanded (e.g., due to <br>\ncongruence rules or unification), I still want to see \"foo x\".</p>\n<p>Andreas</p>",
        "id": 294680902,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176696
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Makarius,</p>\n<p>I had thought that results are printed asynchronously already. At least, the Isabelle NEWS <br>\nfile for 2013-1 says</p>\n<p>* Support for asynchronous print functions, as overlay to existing<br>\n   document content.</p>\n<p>If results do not take part in that so far, I think this would be a good time to do so.</p>\n<p>I am not so sure about the context option. I usually ignore the output \"solved goal by <br>\nexported rule ...\", so I would not miss that. However, I usually do look at the result of <br>\ntop-level statements.</p>\n<p>By the way, I remember two particular \"lemmas\" commands in JinjaThreads <br>\n(Compiler/J1JVMBisim around line 1055) which manipulate induction rules for inductively <br>\ndefined bisiumlation relations (especially \"split_format (complete)\"). Their processing <br>\ntook ages back then with ProofGeneral because of the pretty printing.  I haven't checked <br>\nhow bad it is nowadays on better hardware and with Isabelle/jEdit. When I worked on these <br>\nproofs, I wished that I could have disabled the printing of results.</p>\n<p>Andreas</p>",
        "id": 294680914,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176701
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 10/08/16 14:50, Andreas Lochbihler wrote:</p>\n<blockquote>\n<p>I had thought that results are printed asynchronously already. At least,<br>\nthe Isabelle NEWS file for 2013-1 says</p>\n<p>* Support for asynchronous print functions, as overlay to existing<br>\n  document content.</p>\n<p>If results do not take part in that so far, I think this would be a good<br>\ntime to do so.</p>\n</blockquote>\n<p>The asynchronous printing of 2013 only applies to official command<br>\ntransaction states, i.e. the subsequent proof state.</p>\n<p>We are talking about unofficial side-results here: verbosity produced by<br>\ncertain commands on their own account.</p>\n<p>To make this asynchronous requires some care, because the order of<br>\nresults should remain stable.</p>\n<blockquote>\n<p>By the way, I remember two particular \"lemmas\" commands in JinjaThreads<br>\n(Compiler/J1JVMBisim around line 1055) which manipulate induction rules<br>\nfor inductively defined bisiumlation relations (especially \"split_format<br>\n(complete)\"). Their processing took ages back then with ProofGeneral<br>\nbecause of the pretty printing.</p>\n</blockquote>\n<p>I can imagine that the system spends a good portion of time on<br>\n\"potentially useful output\", often more than performing proof steps.</p>\n<p>Makarius</p>",
        "id": 294680936,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176707
    }
]