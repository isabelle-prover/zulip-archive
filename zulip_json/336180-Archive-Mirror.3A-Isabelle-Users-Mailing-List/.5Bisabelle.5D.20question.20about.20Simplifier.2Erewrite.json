[
    {
        "content": "<p>From: <a href=\"mailto:Thomas.Sewell@data61.csiro.au\">Thomas.Sewell@data61.csiro.au</a><br>\nI haven't had a look at the attached file in detail, however, I'm pretty <br>\nsure your confusion arises from congruence rules.</p>\n<p>There's a discussion of this here:</p>\n<p>- <br>\n<a href=\"http://stackoverflow.com/questions/15627676/why-wont-isabelle-simplify-the-body-of-my-if-then-else-construct\">http://stackoverflow.com/questions/15627676/why-wont-isabelle-simplify-the-body-of-my-if-then-else-construct</a></p>\n<p>- <br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2009-October/msg00069.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2009-October/msg00069.html</a></p>\n<p>- <br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2010-May/msg00046.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2010-May/msg00046.html</a></p>\n<p>And probably in various other places. Short version: the default <br>\nif_weak_cong congruence rule, declared by default with [cong], prevents <br>\nthe simplifier from looking inside the branches of if statements.</p>\n<p>My understanding is that this was originally done to allow some <br>\nrecursive unfolds to be safe with the simplifier, e.g. \"fib x = (if x = <br>\n0 then 1 else fib (x - 1) + fib (x - 2))\"</p>\n<p>Because the simplifier won't look inside the branches of the <br>\nif-statement until it can decide whether x = 0, the above rewrite is <br>\nsafe. The datatype packages declares its equivalents of if_weak_cong as <br>\ncongruence rules themselves for the same reason. As I've said on this <br>\nlist before, I consider this a bit of a bug, but it's ancient in <br>\nIsabelle, and probably too much work to change.</p>\n<p>Things you can do:</p>\n<p>- (simp cong: if_cong)<br>\n   - (simp cong del: if_weak_cong)<br>\n   - something else which controls simplifier application.</p>\n<p>Cheers,<br>\n     Thomas.</p>",
        "id": 294684647,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177548
    },
    {
        "content": "<p>From: Iulia Dragomir &lt;<a href=\"mailto:iulia.dragomir@aalto.fi\">iulia.dragomir@aalto.fi</a>&gt;<br>\nHello</p>\n<p>I have a problem with Simplifier.rewrite which simplifies the expression<br>\n(1::real) = (2::real) within some simple term, but not in a more complex<br>\nterm. Since the complex term is quite involved, the actual questions are<br>\nin the attached file, which also contains the term.</p>\n<p>Any help is greatly appreciated.</p>\n<p>Best regards,<br>\nIulia Dragomir<br>\n<a href=\"/user_uploads/14278/fIm8GG4xc7AynbkUfnH-hIHh/Test.thy\">Test.thy</a></p>",
        "id": 294696406,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178236
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>try invoking the simplifier with (simp cong: if_cong)</p>\n<p>By default, the simplifier uses thm weak_if_cong as congruence rule for<br>\nif, which prevents it from simplifying inside if expressions.</p>",
        "id": 294696418,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178241
    }
]