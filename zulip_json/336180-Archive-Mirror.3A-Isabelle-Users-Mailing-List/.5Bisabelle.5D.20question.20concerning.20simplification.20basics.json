[
    {
        "content": "<p>From: Andrei Popescu &lt;<a href=\"mailto:uuomul@yahoo.com\">uuomul@yahoo.com</a>&gt;<br>\nHello,   </p>\n<p>In the scripts below, why does lemma \"try\" succeed whilst lemma \"try2\" fails?  (\"try2\" fails not only with force, but also with auto and blast, not to mention simp). </p>\n<p>Thank you in advance, <br>\n   Andrei Popescu </p>\n<p>consts P::\"'a =&gt; bool\"</p>\n<p>definition Q :: \"'a =&gt; bool\" <br>\nwhere \"Q = P\"</p>\n<p>lemma try:<br>\n\"P x  ==&gt; Q x\"<br>\nproof-<br>\n  assume \"P x\"<br>\n  thus \"Q x\" by (simp add: Q_def)<br>\nqed</p>\n<p>lemma try2:<br>\n\"P x  ==&gt; Q x\"<br>\nproof-<br>\n  assume \"P x\"<br>\n  thus \"Q x\" using Q_def by force (* THIS FAILS *)<br>\nqed</p>",
        "id": 294079830,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830295
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 7 Jul 2009, Andrei Popescu wrote:</p>\n<blockquote>\n<p>consts P::\"'a =&gt; bool\"</p>\n<p>definition Q :: \"'a =&gt; bool\"<br>\nwhere \"Q = P\"</p>\n<p>lemma try:<br>\n\"P x  ==&gt; Q x\"<br>\nproof-<br>\n  assume \"P x\"<br>\n  thus \"Q x\" by (simp add: Q_def)<br>\nqed</p>\n</blockquote>\n<p>This works, because the polymorphic definition Q_def is locally added to <br>\nthe Simplifier context (via \"add\") and the Simplifier will match it <br>\nagainst any goal states, instantiating an arbitrary ?'a by a fixed 'a as <br>\nexpected.</p>\n<blockquote>\n<p>lemma try2:<br>\n\"P x  ==&gt; Q x\"<br>\nproof-<br>\n  assume \"P x\"<br>\n  thus \"Q x\" using Q_def by force (* THIS FAILS *)<br>\nqed</p>\n</blockquote>\n<p>This fails because Q_def is merely inserted straight into the goal, before <br>\nregular \"force\" operation.  The unspecified ?'a on the left of the <br>\nimplication that is part of the goal will never be instantiated by the <br>\nproof tool -- all automated proof tools work like that (simp, auto, fast).</p>\n<p>Better be more specific about \"unfolding Q_def\" before finishing by force <br>\netc.  Alternatively, you can include it via \"simp add: Q_def\" into the <br>\nmethod context as for simp above.</p>\n<p>Makarius</p>",
        "id": 294080071,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830356
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThis is a tricky one to do with types. If you write \"using &lt;thms&gt;\" then<br>\nthese thms become part of the proof state, namely new assumptions. But<br>\nthe simplifier does not instantiate ?-Variables in the proof state -<br>\nthis is not equivalence preserving. This includes type variables. In<br>\nyour example one of your assumptions is now \"(Q::?'a =&gt; bool) = (P::?'a<br>\n=&gt; bool)\" and this ?'a does not get instantiated with 'a to allow<br>\nrewriting the conclusion \"Q(x::'a)\". If you write \"(simp add:thms)\"<br>\ninstead, the simplifier is perfectly happy to instantiate the ?-type<br>\nvariables as required because they are no longer part of the proof state.</p>\n<p>The only time I add simplification rules via \"using\" is if they need to<br>\nbe simplified themselves. Otherwise \"simp add:\" is preferable.</p>\n<p>Best<br>\nTobias</p>\n<p>Andrei Popescu wrote:</p>",
        "id": 294080130,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830363
    }
]