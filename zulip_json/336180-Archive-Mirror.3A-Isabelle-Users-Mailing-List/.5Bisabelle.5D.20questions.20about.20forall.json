[
    {
        "content": "<p>From: Amarin Phaosawasdi &lt;<a href=\"mailto:phaosaw2@illinois.edu\">phaosaw2@illinois.edu</a>&gt;<br>\nHello,</p>\n<p>This question is based on some definitions defined in the book Concrete <br>\nSemantics. Here's a high-level description of the problem.</p>\n<p>I have to prove something in the form<br>\n\"⋀ x. assumption1 ⟹ ... ⟹ assumptionN ⟹ thesis\"</p>\n<p>However, the assumptions give me the exact value of x I needed. All <br>\nother values make the assumptions false (hence making the thesis true).</p>\n<p>How would I go about proving the theorem, removing \"⋀ x\" and <br>\ninstantiating x to be that specific value I wanted?</p>\n<p>In particular, given the big step semantics of while loops in a simple <br>\nprogramming language (see below), I'm trying to prove the following lemma.</p>\n<p>lemma \"⟦(WHILE b DO c,s) ⇒ s'';<br>\n         bval b s;<br>\n         (c,s) ⇒ s'⟧ ⟹<br>\n   (WHILE b DO c,s') ⇒ s''\"</p>\n<p>I'm stuck at the step where I need to prove.<br>\n\"⋀s2. bval b s ⟹<br>\n        (c, s) ⇒ s' ⟹<br>\n        bval b s ⟹<br>\n        (c, s) ⇒ s2 ⟹<br>\n        (WHILE b DO c, s2) ⇒ s'' ⟹<br>\n  (WHILE b DO c, s') ⇒ s''\"</p>\n<p>In this case, I know that s2 has to be s'.</p>\n<p>Below is the code.</p>\n<p>Thank you,<br>\nAmarin</p>\n<p>============================================<br>\ntheory SemanticsQuestion imports Main begin</p>\n<p>type_synonym vname = string<br>\ntype_synonym val = int<br>\ntype_synonym state = \"vname ⇒ val\"</p>\n<p>datatype bexp = Bc bool<br>\nfun bval :: \"bexp ⇒ state ⇒ bool\" where<br>\n\"bval (Bc v) s = v\"</p>\n<p>datatype<br>\n   com = SKIP |<br>\n         While bexp com (\"(WHILE _/ DO _)\"  [0, 61] 61)</p>\n<p>inductive<br>\n   big_step :: \"com × state ⇒ state ⇒ bool\" (infix \"⇒\" 55)<br>\nwhere<br>\nWhileFalse: \"⟦¬bval b s⟧ ⟹ (WHILE b DO c,s) ⇒ s\" |<br>\nWhileTrue: \"⟦ bval b s1;  (c,s1) ⇒ s2;  (WHILE b DO c,s2) ⇒ s3 ⟧<br>\n   ⟹ (WHILE b DO c, s1) ⇒ s3\"</p>\n<p>declare big_step.intros [intro]<br>\nlemmas big_step_induct = big_step.induct[split_format(complete)]<br>\ninductive_cases WhileE[elim]: \"(WHILE b DO c,s) ⇒ t\"</p>\n<p>theorem big_step_determ: \"⟦ (c,s) ⇒ t; (c,s) ⇒ u ⟧ ⟹ u = t\"<br>\n   by (induction arbitrary: u as3 rule: big_step_induct) blast+</p>\n<p>lemma \"⟦(WHILE b DO c,s) ⇒ s'';<br>\n         bval b s;<br>\n         (c,s) ⇒ s'⟧ ⟹<br>\n   (WHILE b DO c,s') ⇒ s''\"<br>\napply (erule WhileE)<br>\napply simp<br>\nsorry</p>\n<p>end</p>",
        "id": 294309462,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925379
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nYou need to exploit determinism of your semantics, e.g.</p>\n<p>lemma \"⟦(WHILE b DO c,s) ⇒ s'';<br>\n         bval b s;<br>\n         (c,s) ⇒ s'⟧ ⟹<br>\n   (WHILE b DO c,s') ⇒ s''\"<br>\napply (erule WhileE)<br>\napply simp<br>\napply (drule (1) big_step_determ, simp)<br>\ndone</p>",
        "id": 294309485,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925392
    },
    {
        "content": "<p>From: Amarin Phaosawasdi &lt;<a href=\"mailto:phaosaw2@illinois.edu\">phaosaw2@illinois.edu</a>&gt;<br>\nThanks. It seems like the simplifier can do the job when I have the <br>\nright assumptions.</p>\n<p>I have some follow up questions.</p>\n<p>What does the \"(1)\" do?</p>\n<p>I see that using drule (without the \"(1)\") requires me to prove the <br>\nother assumption in big_step_determ, while when using \"drule (1)\"I am <br>\nnot required to do so.</p>\n<p>In general, what does adding \"(number)\" to a drule do? Also can I use it <br>\nwith rule, erule, frule as well?</p>\n<p>Also, what is the difference between the following?</p>\n<p>apply (drule (1) big_step_determ, simp)</p>\n<p>and</p>\n<p>apply (drule (1)big_step_determ)<br>\n   apply (simp)</p>\n<p>Amarin</p>",
        "id": 294315798,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925422
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nOn Mo, 2014-10-27 at 11:37 -0500, Amarin Phaosawasdi wrote:</p>\n<blockquote>\n<p>What does the \"(1)\" do?</p>\n<p>I see that using drule (without the \"(1)\") requires me to prove the <br>\nother assumption in big_step_determ, while when using \"drule (1)\"I am <br>\nnot required to do so.</p>\n<p>In general, what does adding \"(number)\" to a drule do? Also can I use it <br>\nwith rule, erule, frule as well?</p>\n</blockquote>\n<p>The (n) means, that n extra assumptions should be discharged. It's<br>\nroughly the same as adding \",assumption,...,assumption\" n times.</p>\n<blockquote>\n<p>Also, what is the difference between the following?</p>\n<p>apply (drule (1) big_step_determ, simp)</p>\n<p>and</p>\n<p>apply (drule (1)big_step_determ)<br>\n   apply (simp)</p>\n</blockquote>\n<p>In your case, it should be the same, as the drule matches the<br>\nassumptions unambiguously.<br>\nIn general, the \",\" allows backtracking, while a new \"apply\"<br>\nonly takes the first result.</p>",
        "id": 294315933,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925472
    },
    {
        "content": "<p>From: Amarin Phaosawasdi &lt;<a href=\"mailto:phaosaw2@illinois.edu\">phaosaw2@illinois.edu</a>&gt;<br>\nGot it, thank you for the help.</p>\n<p>Amarin</p>",
        "id": 294316040,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925515
    }
]