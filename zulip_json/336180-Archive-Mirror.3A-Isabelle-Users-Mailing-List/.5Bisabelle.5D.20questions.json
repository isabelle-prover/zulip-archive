[
    {
        "content": "<p>From: Jared Davis &lt;<a href=\"mailto:jared@cs.utexas.edu\">jared@cs.utexas.edu</a>&gt;<br>\nHi,</p>\n<p>I am new to Isabelle and have several questions:</p>\n<ol>\n<li>Is there a way to make a purely syntactic abbreviation for a constant?  For <br>\nexample, I have:<p>datatype object = Symbol nat | ...</p>\n</li>\n</ol>\n<p>Right now I can write:</p>\n<p>constdefs foo :: object<br>\n              \"foo == Symbol 0\"<br>\n              bar :: object<br>\n              \"bar == Symbol 1\"<br>\n              ...</p>\n<p>This is almost what I want, since I can now write \"foo\" and \"bar\" in definitions <br>\nand theorems.  But unfortunately I now need to add foo_def and bar_def for simp <br>\nto make progress in some cases, and if I do that I will see \"Symbol 0\" instead <br>\nof foo, etc.</p>\n<p>Is there a way to make these syntactic abbreviations so that Isabelle sees <br>\nSymbol 0 when I type foo, but still prints foo back to me?</p>\n<ol start=\"2\">\n<li>\n<p>Is there a way to write a function/macro that takes a variable number of <br>\narguments?  For example, could I define a function to \"and\" together an<br>\narbitrary number of boolean arguments?</p>\n</li>\n<li>\n<p>Is there a local scoping mechanism I can use so that if I define a lemma, it <br>\ngoes out of scope after I prove some theorems with it?  I.e., imagine a sequence <br>\nsuch as:</p>\n<p>lemma \"lemma1\" ...<br>\n   lemma \"lemma2\" ...<br>\n   theorem \"thm1\" ...<br>\n   theorem \"thm2\" ...</p>\n</li>\n</ol>\n<p>Can I wrap something around this to make the lemmas disappear so I can reuse <br>\ntheir names, etc.?</p>\n<ol start=\"4\">\n<li>What is the \"right\" way to write a theorem that has multiple hyps?  I could <br>\nwrite something like,<p>hyp1 --&gt; hyp2 --&gt; ... --&gt; hypN --&gt; concl</p>\n</li>\n</ol>\n<p>Or I could write:</p>\n<p>[| hyp1; hyp2; ...; hypN |] ==&gt; concl</p>\n<p>Is there any difference to doing this?  Which will be better for the simplifier?</p>\n<ol start=\"5\">\n<li>Is there a good way to debug looping rewrite rules?  I tried activating the <br>\n\"trace simplifier\" to do this but it started printing lots of output and <br>\nwouldn't respond to the stop button, so I had to forcibly kill the xemacs session.</li>\n</ol>\n<p>Thanks!</p>\n<p>Jared</p>",
        "id": 294041829,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815627
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;</p>\n<blockquote>\n<ol>\n<li>\n<p>Is there a way to make a purely syntactic abbreviation for a <br>\nconstant?  For example, I have:</p>\n<p>datatype object = Symbol nat | ...</p>\n</li>\n</ol>\n<p>Right now I can write:</p>\n<p>constdefs foo :: object<br>\n             \"foo == Symbol 0\"<br>\n             bar :: object<br>\n             \"bar == Symbol 1\"<br>\n             ...</p>\n<p>This is almost what I want, since I can now write \"foo\" and \"bar\" in <br>\ndefinitions and theorems.  But unfortunately I now need to add foo_def <br>\nand bar_def for simp to make progress in some cases, and if I do that I <br>\nwill see \"Symbol 0\" instead of foo, etc.</p>\n<p>Is there a way to make these syntactic abbreviations so that Isabelle <br>\nsees Symbol 0 when I type foo, but still prints foo back to me?</p>\n</blockquote>\n<p>If you use Isabelle 2005, you may use introduce sytactic symbols and <br>\n\"translations\", eg</p>\n<p>syntax foo :: object<br>\n        bar :: object</p>\n<p>translations \"foo\" == \"Symbol 0\"<br>\n              \"bar\" == \"Symbol 1\"</p>\n<p>There are restrictions here (no var may occur twice on the lhs or rhs), <br>\nand you should read the ref manual for the details.</p>\n<p>In the development version there are the much slicker \"abbreviations\".</p>\n<blockquote>\n<ol start=\"2\">\n<li>Is there a way to write a function/macro that takes a variable <br>\nnumber of arguments?  For example, could I define a function to \"and\" <br>\ntogether an<br>\narbitrary number of boolean arguments?</li>\n</ol>\n</blockquote>\n<p>No. Not typeable.</p>\n<blockquote>\n<ol start=\"3\">\n<li>Is there a local scoping mechanism I can use so that if I define a <br>\nlemma, it goes out of scope after I prove some theorems with it?  I.e., <br>\nimagine a sequence such as:<p>lemma \"lemma1\" ...<br>\n  lemma \"lemma2\" ...<br>\n  theorem \"thm1\" ...<br>\n  theorem \"thm2\" ...</p>\n</li>\n</ol>\n<p>Can I wrap something around this to make the lemmas disappear so I can <br>\nreuse their names, etc.?</p>\n</blockquote>\n<p>Locales provide some of that. You can reuse thm names anyway.</p>\n<blockquote>\n<ol start=\"4\">\n<li>What is the \"right\" way to write a theorem that has multiple hyps?  <br>\nI could write something like,<p>hyp1 --&gt; hyp2 --&gt; ... --&gt; hypN --&gt; concl</p>\n</li>\n</ol>\n<p>Or I could write:</p>\n<p>[| hyp1; hyp2; ...; hypN |] ==&gt; concl</p>\n<p>Is there any difference to doing this?  Which will be better for the <br>\nsimplifier?</p>\n</blockquote>\n<p>The simplifier does not care but other tools do. Always use the second <br>\nform, it supports backward chaining.</p>\n<blockquote>\n<ol start=\"5\">\n<li>Is there a good way to debug looping rewrite rules?  I tried <br>\nactivating the \"trace simplifier\" to do this but it started printing <br>\nlots of output and wouldn't respond to the stop button, so I had to <br>\nforcibly kill the xemacs session.</li>\n</ol>\n</blockquote>\n<p>That is a problem of the xemacs and Proof General interface which we <br>\nalso suffer from :-( In the development version you can set the trace <br>\ndepth level (eg to 1), which often helps.</p>\n<p>Tobias</p>",
        "id": 294041834,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815631
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 18 Sep 2006, Jared Davis wrote:</p>\n<blockquote>\n<ol start=\"2\">\n<li>Is there a way to write a function/macro that takes a variable <br>\n   number of arguments?  For example, could I define a function to \"and\" <br>\n   together an arbitrary number of boolean arguments?</li>\n</ol>\n</blockquote>\n<p>Just use an explicit list of arguments.</p>\n<p>An alternative is to use polymorphic recursion (overloading), e.g. see <br>\n<a href=\"http://isabelle.in.tum.de/nominal/\">http://isabelle.in.tum.de/nominal/</a> for definitions of generic permutations <br>\nand freshness predicates for lists, pairs, options, numbers, etc. This is <br>\nadvanced matter, though.</p>\n<blockquote>\n<ol start=\"4\">\n<li>What is the \"right\" way to write a theorem that has multiple hyps?  </li>\n</ol>\n</blockquote>\n<p>The most general / scalable way is this:</p>\n<p>lemma<br>\n  assumes hyp1 and hyp2 and ... and hypN<br>\n  shows concl</p>\n<p>This has the advantage that the hypothesis are immediately available for <br>\nreasoning in the proof body, can be named separately etc.  Small <br>\nstatements are usually written as a single !! / ==&gt; formula.</p>\n<p>Makarius</p>",
        "id": 294041843,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815637
    }
]