[
    {
        "content": "<p>From: John Matthews &lt;<a href=\"mailto:matthews@galois.com\">matthews@galois.com</a>&gt;<br>\nHello,</p>\n<p>I am trying to provide a shallow embedding of the Cryptol primitive  <br>\n\"cerror :: int =&gt; int =&gt; string =&gt; 'a\". Logically this is an undefined  <br>\nvalue, but I'd like Isabelle's quickcheck command to compile the  <br>\nCryptol expression \"cerror a b str\" into the SML expression \"error  <br>\nstr\", so that quickcheck throws an exception if cerror s ever executed  <br>\nduring a run. How do I define cerror appropriately?</p>\n<p>Thanks,<br>\n-john</p>",
        "id": 294060517,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823475
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nHi John,</p>\n<p>Here's a solution (with only one int argument - trust you can generalize ;-)</p>\n<p>consts cerror :: \"int =&gt; string =&gt; 'a\"</p>\n<p>consts_code<br>\n   \"cerror\" (\"(fn i =&gt; (fn x =&gt; error(implode x)))\")</p>\n<p>definition f where \"f i == if i &lt; 0 then cerror i ''x'' else i\"</p>\n<p>lemma \"f x = x\"</p>\n<p>The implode is required because HOL's strings are implemented as char lists.</p>\n<p>However, there are two things that puzzle me, that the implementor might <br>\nbe able to comment on:</p>\n<ol>\n<li>\n<p>autoquickcheck does seem to kick in or its result is hidden...</p>\n</li>\n<li>\n<p>If in the ML code for cerror I replace the i by _, I have a problem: <br>\nthe generatd ML does not type check...</p>\n</li>\n</ol>\n<p>Tobias</p>\n<p>John Matthews schrieb:</p>",
        "id": 294060533,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823486
    },
    {
        "content": "<p>From: Stefan Berghofer &lt;<a href=\"mailto:berghofe@in.tum.de\">berghofe@in.tum.de</a>&gt;<br>\nTobias Nipkow wrote:</p>\n<blockquote>\n<p>However, there are two things that puzzle me, that the implementor might<br>\nbe able to comment on:</p>\n<ol>\n<li>autoquickcheck does seem to kick in or its result is hidden...</li>\n</ol>\n</blockquote>\n<p>auto quickcheck only outputs something if it finds a counterexample,<br>\ni.e. the goal evaluates to False. If the code generator signals an error<br>\nbecause the current goal is not executable, the compilation of the generated<br>\ncode fails because it is ill-formed, or an exception is raised during the<br>\nexecution of the code, this is silently ignored. The rationale behind this<br>\nwas to prevent auto quickcheck from displaying too many \"spam messages\" that<br>\nmight confuse users.</p>\n<blockquote>\n<ol start=\"2\">\n<li>If in the ML code for cerror I replace the i by _, I have a problem:<br>\nthe generatd ML does not type check...</li>\n</ol>\n</blockquote>\n<p>The problem is that _ has a special meaning: like in mixfix templates,<br>\nthe _ in a declaration</p>\n<p>consts_code<br>\n    f (\"...\")</p>\n<p>indicates a position in the ML code \"...\" where code for the arguments of f<br>\nshould be inserted (see e.g. the definition of \"+\" in the Int theory). If<br>\nyou want a _ to occur in the ML code, you have to escape it by writing '_<br>\n(like in mixfix templates).</p>\n<p>Greetings,<br>\nStefan</p>",
        "id": 294060543,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823489
    },
    {
        "content": "<p>From: John Matthews &lt;<a href=\"mailto:matthews@galois.com\">matthews@galois.com</a>&gt;<br>\nThanks, Stefan. Is it possible to have a special \"undefined\" or  <br>\n\"quickcheck\" exception that is not silently ignored by quickcheck? I  <br>\nwant to make cerror executable exactly so that autoquickcheck will  <br>\ntell me if I have an unintended execution path leading to it.</p>\n<p>Thanks,<br>\n-john</p>",
        "id": 294060552,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823494
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThat's a discussion we have been having internally as well. For example, <br>\nautoquickcheck currently does not object to \"hd xs # tl xs = xs\" because <br>\nit ignores the Match exception thrown by \"hd []\". We'll take this <br>\ndiscussion up again (with a reduced audience).</p>\n<p>Tobias</p>\n<p>John Matthews schrieb:</p>",
        "id": 294060579,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823507
    }
]