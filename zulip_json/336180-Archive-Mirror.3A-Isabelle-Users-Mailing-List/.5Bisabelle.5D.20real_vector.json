[
    {
        "content": "<p>From: Steve W &lt;<a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a>&gt;<br>\nHi,</p>\n<p>I'm looking at how \"real_vector\" is used as a type and am somewhat confused<br>\nby examples like:</p>\n<p>definition<br>\n  convex :: \"'a::real_vector set \\&lt;Rightarrow&gt; bool\" ...</p>\n<p>in HOL/Library/Convex.thy. How come \"convex\" is declared wrt the type<br>\nvariable \"'a\" rather than \"real_vector\" directly, i.e.</p>\n<p>convex :: \"real_vector set...\"</p>\n<p>Thank you for any help.</p>\n<p>Steve</p>",
        "id": 294133027,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843491
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nreal_vector is a type class, i.e. there are different types implementing<br>\na real_vector. For example real, complex, real^'n, (real * real) are all<br>\nreal vectors.</p>\n<p>So \"'a :: real_vector set\" is a set of type 'a where 'a forms a real<br>\nvector space. Hence convex is defined for real, real^'n, real * real,<br>\netc. </p>\n<p>Hope this helps,<br>\n  Johannes</p>",
        "id": 294133036,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843494
    },
    {
        "content": "<p>From: Steve W &lt;<a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a>&gt;<br>\n2011/3/22 Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>real_vector is a type class, i.e. there are different types implementing<br>\na real_vector. For example real, complex, real^'n, (real * real) are all<br>\nreal vectors.</p>\n<p>So \"'a :: real_vector set\" is a set of type 'a where 'a forms a real<br>\nvector space. Hence convex is defined for real, real^'n, real * real,<br>\netc.<br>\n</p>\n</blockquote>\n<p>I see. So if I'd like, say, a const v to be a real vector of reals, how do I<br>\ngo about that? 'consts v :: \"real real_vector\"' doesn't seem to be right.</p>\n<p>Thanks<br>\nSteve</p>\n<blockquote>\n<p>Hope this helps,<br>\n Johannes</p>\n<p>Am Dienstag, den 22.03.2011, 16:54 +0000 schrieb Steve W:</p>\n<blockquote>\n<p>Hi,</p>\n<p>I'm looking at how \"real_vector\" is used as a type and am somewhat<br>\nconfused<br>\nby examples like:</p>\n<p>definition<br>\n  convex :: \"'a::real_vector set \\&lt;Rightarrow&gt; bool\" ...</p>\n<p>in HOL/Library/Convex.thy. How come \"convex\" is declared wrt the type<br>\nvariable \"'a\" rather than \"real_vector\" directly, i.e.</p>\n<p>convex :: \"real_vector set...\"</p>\n<p>Thank you for any help.</p>\n<p>Steve</p>\n</blockquote>\n</blockquote>",
        "id": 294133077,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843507
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nI'm not sure what you mean.</p>\n<p>1) The types in the type class real_vector only contain vectors of<br>\n   reals. So it is not necessary to specify this explicitly.</p>\n<p>it is enough to say:</p>\n<p>consts v :: \"'a real_vector\"</p>\n<p>This is a constant of a arbitrary type forming a real vector space.</p>\n<p>For example you can now write:</p>\n<p>\"v + sin 1\"</p>\n<p>in this case 'v' will be of type real.</p>\n<p>Or you write</p>\n<p>\"case v of (a, b) =&gt; ...\"</p>\n<p>in this case it will be (real * real). </p>\n<p>2) To have a vector of a specific size, you need to encode this in the<br>\ntype. For example the HOL-Multivariate_Analysis image contains the<br>\ncartesian products:</p>\n<p>real ^ 'n</p>\n<p>Here 'n encodes the size as a type. (This is a restriction, but often<br>\none can work around it)</p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294133095,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843513
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\n2011/3/22 Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;:</p>\n<blockquote>\n<p>Am Dienstag, den 22.03.2011, 17:37 +0000 schrieb Steve W:</p>\n<blockquote>\n<p>2011/3/22 Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>real_vector is a type class, i.e. there are different types implementing<br>\na real_vector. For example real, complex, real^'n, (real * real) are all<br>\nreal vectors.</p>\n<p>So \"'a :: real_vector set\" is a set of type 'a where 'a forms a real<br>\nvector space. Hence convex is defined for real, real^'n, real * real,<br>\netc.<br>\n</p>\n</blockquote>\n<p>I see. So if I'd like, say, a const v to be a real vector of reals, how do I<br>\ngo about that? 'consts v :: \"real real_vector\"' doesn't seem to be right.</p>\n</blockquote>\n<p>I'm not sure what you mean.</p>\n<p>1) The types in the type class real_vector only contain vectors of<br>\n  reals. So it is not necessary to specify this explicitly.</p>\n</blockquote>\n<p>Just to be clear: class \"real_vector\" includes finite-dimensional real<br>\nvector spaces like \"real * real\" and \"real ^ 'n\", but it doesn't rule<br>\nout the possibility of infinite-dimensional spaces (although I don't<br>\nthink there are any examples of such in the libraries yet).</p>\n<p>If you want to define operations on or prove lemmas about arbitrary<br>\n<em>finite</em>-dimensional spaces, you can use the class \"euclidean_space\",<br>\nwhich is defined in the Multivariate_Analysis theories. I think this<br>\nmight correspond more closely to what you mean by a \"vector of reals\".</p>\n<blockquote>\n<p>it is enough to say:</p>\n<p>consts v :: \"'a real_vector\"</p>\n<p>This is a constant of a arbitrary type forming a real vector space.</p>\n</blockquote>\n<p>Actually, this contains a typo; it should be</p>\n<p>consts v :: \"'a::real_vector\"</p>\n<p>with a double-colon between the type variable and the class name.<br>\nWithout the double-colon, Isabelle will think that \"real_vector\" is<br>\nsupposed to be a type constructor, which it is not.</p>\n<p>I think some of the confusion might come from the somewhat unusual<br>\nparsing rules for type application vs. sort annotations. The infix<br>\n\"::\" for sort annotations actually binds more tightly than type<br>\nconstructor application, so the type expression</p>\n<p>\"'a::real_vector set =&gt; bool\"</p>\n<p>is actually parsed as</p>\n<p>\"('a::real_vector) set =&gt; bool\"</p>\n<p>It is <em>not</em> parsed as \"'a::(real_vector set) =&gt; bool\", which wouldn't<br>\nmake sense anyway.</p>\n<p>I admit this is rather confusing, especially since \"::\" binds quite<br>\nloosely when it is used for type annotations on terms.</p>\n<p>Hope this helps,</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294133107,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843519
    },
    {
        "content": "<p>From: Timothy McKenzie &lt;<a href=\"mailto:tjm1983@gmail.com\">tjm1983@gmail.com</a>&gt;<br>\nDo you mean this?</p>\n<p>consts v :: \"'a::real_vector\"</p>\n<p>Tim<br>\n&lt;&gt;&lt;<br>\n<a href=\"/user_uploads/14278/Q_AnIRwXOLX0qov6dkAHrvZp/signature.asc\">signature.asc</a></p>",
        "id": 294133133,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843525
    }
]