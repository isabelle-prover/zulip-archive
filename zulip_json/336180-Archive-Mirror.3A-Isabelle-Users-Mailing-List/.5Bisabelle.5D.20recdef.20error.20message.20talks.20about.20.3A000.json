[
    {
        "content": "<p>From: Dave Cunningham &lt;<a href=\"mailto:dc04@doc.ic.ac.uk\">dc04@doc.ic.ac.uk</a>&gt;<br>\nI'm trying to use recdef for the first time and I'm getting error<br>\nmessages I don't understand.  Here is my problem boiled down as small as<br>\nI can make it:</p>\n<p>consts test :: \"nat list =&gt; bool\"<br>\nrecdef test \"measure(length)\"<br>\n       \"test ([]) = True\"<br>\n       \"test ((discard#L)) = (EX L'. (L=L') /\\ test L')\"</p>\n<p>*** Proof failed.<br>\n*** ALL:000 L. length :000 &lt; Suc (length L)<br>\n***  1. ALL:000 L. length :000 &lt; Suc (length L)<br>\n*** 1 unsolved goal(s)!<br>\n*** The error(s) above occurred for the goal statement:<br>\n*** ALL:000 L. length :000 &lt; Suc (length L)<br>\n*** At command \"recdef\".</p>\n<p>Have no idea what :000 is, or how to make this work.  Any help<br>\nappreciated.</p>",
        "id": 294059697,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823108
    },
    {
        "content": "<p>From: Amine Chaieb &lt;<a href=\"mailto:chaieb@in.tum.de\">chaieb@in.tum.de</a>&gt;<br>\nThe :000 is a variable introduced by recdef to prove termination of <br>\ntest. The definition looks unnecessarily complicated. Here is an <br>\nalternative:</p>\n<p>consts test :: \"nat list =&gt; bool\"</p>\n<p>recdef test \"measure(length)\"<br>\n        \"test ([]) = True\"<br>\n        \"test ((discard#L)) = test L\"</p>\n<p>You could then derive your second clause:</p>\n<p>lemma test_Cons: \"test  ((discard#L)) = (EX L'. (L = L') &amp; test L')\"<br>\n   by simp</p>\n<p>and prove that test is the constant True function, so you could have <br>\ndefined test = (%x. True).</p>\n<p>lemma \"test xs\" by (induct xs, simp_all)</p>\n<p>You could alternatively use the function package to separate function <br>\ndefinition and termination proofs.</p>\n<p>Hope it helps.<br>\nAmine</p>\n<p>Dave Cunningham wrote:</p>",
        "id": 294059791,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823127
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nDave,</p>\n<p>First of all you should read the internal variable :000 as L'.</p>\n<p>Recdef fails in proving the termination of the function and shows you <br>\nthe goal it could not prove, which is indeed unprovable. The problem is <br>\nthat it does not know that it can use the equality on the left of the <br>\nconjunction for simplifying the right hand side. You can tell it to do <br>\nso by adding</p>\n<p>(hints recdef_cong: conj_cong)</p>\n<p>at the end of the recdef command.</p>\n<p>Also note that using the old recdef package is now discouraged in favour <br>\nof the new functinon package, which will often make your life easier. <br>\nSee <a href=\"http://isabelle.in.tum.de/dist/Isabelle/doc/functions.pdf\">http://isabelle.in.tum.de/dist/Isabelle/doc/functions.pdf</a> for <br>\ndocumentation.</p>\n<p>Hope this helps,<br>\nAlex</p>",
        "id": 294059802,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823132
    }
]