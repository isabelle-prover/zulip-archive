[
    {
        "content": "<p>From: Reto Kramer &lt;<a href=\"mailto:kramer@acm.org\">kramer@acm.org</a>&gt;<br>\nThe recdef matchE below fails with:</p>\n<p>*** Bad final proof state:<br>\n*** matchE (a, b) \\&lt;and&gt; matchE (b, a) \\&lt;and&gt; e = Diff x y  <br>\n\\&lt;longrightarrow&gt;<br>\n*** Suc (depthE x + depthE y) &lt; depthE e + (depthE a + depthE b)<br>\n***  1. matchE (a, b) \\&lt;and&gt; matchE (b, a) \\&lt;and&gt; e = Diff x y  <br>\n\\&lt;longrightarrow&gt;<br>\n***     Suc (depthE x + depthE y) &lt; depthE e + (depthE a + depthE b)<br>\n*** 1 unsolved goals!<br>\n*** Proof failed!<br>\n*** At command \"recdef\".</p>\n<p>despite lemma depth2E_bg_1 being a recdef-hint, stating the truth of  <br>\nthis very subgoal.  I'm puzzled that the  depth2E_bg_1 lemma isn't  <br>\ntaken into account in the recdef proof.</p>\n<p>How can I help the system prove the above subgoal, or how do I ensure  <br>\nthe hint is effective?</p>\n<p>Thanks,</p>\n<ul>\n<li>Reto</li>\n</ul>\n<p>theory idc = List:</p>\n<p>types<br>\n   element = \"nat\"<br>\n   path = \"element list\"</p>\n<p>consts inOrEq :: \"path \\&lt;Rightarrow&gt; path \\&lt;Rightarrow&gt; bool\" (*  <br>\n(infix \"\\&lt;subseteq&gt;\" 500) *)<br>\nprimrec<br>\n   \"inOrEq [] q     = (case q of []   \\&lt;Rightarrow&gt; True    (*  *  in  </p>\n<ul>\n<li>\n<p>*)<br>\n                               | y#ys \\&lt;Rightarrow&gt; False)\" (*  *  in  <br>\na*  *)<br>\n   \"inOrEq (x#xs) q = (case q of []   \\&lt;Rightarrow&gt; True    (*  a* in  </p>\n</li>\n<li>\n<p>*)<br>\n                               | y#ys \\&lt;Rightarrow&gt; (x = y) &amp; (inOrEq  <br>\nxs ys))\"</p>\n</li>\n</ul>\n<p>types<br>\n   node = \"path \\&lt;times&gt; element\"</p>\n<p>consts path :: \"node \\&lt;Rightarrow&gt; path\"<br>\nprimrec<br>\n   \"path (p,n) = p\"</p>\n<p>consts node :: \"node \\&lt;Rightarrow&gt; element\"<br>\nprimrec<br>\n   \"node (p,n) = n\"</p>\n<p>constdefs<br>\n   eqN :: \"node \\&lt;Rightarrow&gt; node \\&lt;Rightarrow&gt; bool\"<br>\n   \"eqN a b == a = b\"</p>\n<p>datatype expr = Empty<br>\n               | Node node<br>\n               | Descendents path (* a.b.* translates to Descendents  <br>\n[a,b] *)<br>\n               | Children path (* a.b.# translates to Children [a,b] *)<br>\n               | Sum expr expr<br>\n               | Diff expr expr</p>\n<p>consts depthE :: \"expr \\&lt;Rightarrow&gt; nat\" (* helper for termination  <br>\nproof of matchE *)<br>\nprimrec<br>\n   \"depthE (Empty)         = 1\"<br>\n   \"depthE (Node x)        = 1\"<br>\n   \"depthE (Descendents x) = 1\"<br>\n   \"depthE (Children x)    = 1\"<br>\n   \"depthE (Sum x y)       = (depthE x) + (depthE y)\"<br>\n   \"depthE (Diff x y)      = (depthE x) + (depthE y)\"</p>\n<p>lemma depthE_bg_0: \"0 &lt; depthE e\"<br>\n   apply (induct_tac e)<br>\n   apply simp_all<br>\ndone</p>\n<p>lemma depth2E_bg_1:<br>\n   \"matchE (a,b) \\&lt;and&gt; matchE (b,a) \\&lt;and&gt; e = Diff x y<br>\n     \\&lt;longrightarrow&gt; Suc (depthE x + depthE y) &lt; depthE e + (depthE  <br>\na + depthE b)\"<br>\n   apply (rule impI)<br>\n   apply simp<br>\n   apply (induct_tac a)<br>\n   apply (simp_all add: depthE_bg_0)<br>\ndone</p>\n<p>consts matchE :: \"expr \\&lt;times&gt; expr \\&lt;Rightarrow&gt; bool\"<br>\nrecdef matchE \"measure (\\&lt;lambda&gt;(e1,e2). depthE e1 + depthE e2)\"<br>\n   \"matchE (e,(Empty)) = (case e of<br>\n                            Empty         \\&lt;Rightarrow&gt; True<br>\n                          | Node x        \\&lt;Rightarrow&gt; False<br>\n                          | Descendents x \\&lt;Rightarrow&gt; False<br>\n                          | Children x    \\&lt;Rightarrow&gt; False<br>\n                          | Sum x y       \\&lt;Rightarrow&gt;   matchE (x,  <br>\nEmpty)<br>\n                                             &amp; matchE (y, Empty)<br>\n                          | Diff x y      \\&lt;Rightarrow&gt;   matchE (y, x)<br>\n                                             | matchE (x, Empty))\"<br>\n   \"matchE (e,(Node n)) = (case e of<br>\n                             Empty         \\&lt;Rightarrow&gt; True<br>\n                           | Node x        \\&lt;Rightarrow&gt; eqN n x<br>\n                           | Descendents x \\&lt;Rightarrow&gt; False<br>\n                           | Children x    \\&lt;Rightarrow&gt; False<br>\n                           | Sum x y       \\&lt;Rightarrow&gt;   matchE (x,  <br>\nNode n)<br>\n                                              &amp; matchE (x, Node n)<br>\n                           | Diff x y      \\&lt;Rightarrow&gt;    matchE  <br>\n(x, Node n)<br>\n                                              &amp; ~matchE (Node n, y))\"<br>\n   \"matchE (e,(Descendents p)) = (case e of<br>\n                                   Empty         \\&lt;Rightarrow&gt; True<br>\n                                 | Node (q,m)    \\&lt;Rightarrow&gt; inOrEq  <br>\nq p<br>\n                                 | Descendents x \\&lt;Rightarrow&gt; p = x<br>\n                                 | Children x    \\&lt;Rightarrow&gt; inOrEq  <br>\nx p<br>\n                                 | Sum x y       \\&lt;Rightarrow&gt; matchE  <br>\n(x, Descendents p)<br>\n                                                  &amp; matchE (x,  <br>\nDescendents p)<br>\n                                 | Diff x y      \\&lt;Rightarrow&gt; matchE  <br>\n(x, Descendents p)<br>\n                                                  &amp; ~matchE  <br>\n(Descendents p, y))\"<br>\n   \"matchE (e,(Children p)) = (case e of<br>\n                                 Empty          \\&lt;Rightarrow&gt; True<br>\n                               | Node (q,m)     \\&lt;Rightarrow&gt; p = q<br>\n                               | Descendents x  \\&lt;Rightarrow&gt; False<br>\n                               | Children x     \\&lt;Rightarrow&gt; p = x<br>\n                               | Sum x y        \\&lt;Rightarrow&gt;    <br>\nmatchE (x, Children p)<br>\n                                                   &amp; matchE (x,  <br>\nChildren p)<br>\n                               | Diff x y      \\&lt;Rightarrow&gt;     <br>\nmatchE (x, Children p)<br>\n                                                   &amp; ~matchE  <br>\n(Children p, y))\"<br>\n   \"matchE (e,(Sum a b)) = (case e of<br>\n                                Empty         \\&lt;Rightarrow&gt; True<br>\n                              | Node x        \\&lt;Rightarrow&gt; (matchE  <br>\n(e,a))|(matchE (e,b))<br>\n                              | Descendents x \\&lt;Rightarrow&gt; (matchE  <br>\n(e,a))|(matchE (e,b))<br>\n                              | Children x    \\&lt;Rightarrow&gt; (matchE  <br>\n(e,a))|(matchE (e,b))<br>\n                              | Sum x y       \\&lt;Rightarrow&gt; matchE  <br>\n(x, Sum a b)<br>\n                                                &amp; matchE (y, Sum a b)<br>\n                              | Diff x y      \\&lt;Rightarrow&gt;   matchE  <br>\n(Diff x y, a)<br>\n                                                 | matchE (Diff x y,  <br>\nb))\"<br>\n   \"matchE (e,(Diff a b)) = (case e of<br>\n                               Empty         \\&lt;Rightarrow&gt; True<br>\n                             | Node x        \\&lt;Rightarrow&gt; (matchE  <br>\n(e,a))&amp;~(matchE (e,b))<br>\n                             | Descendents x \\&lt;Rightarrow&gt; (matchE  <br>\n(e,a))&amp;~(matchE (e,b))<br>\n                             | Children x    \\&lt;Rightarrow&gt; (matchE  <br>\n(e,a))&amp;~(matchE (e,b))<br>\n                             | Sum x y       \\&lt;Rightarrow&gt;   matchE  <br>\n(Sum x y, a)<br>\n                                                &amp; ~matchE (Sum x y, b)<br>\n                             | Diff x y      \\&lt;Rightarrow&gt;<br>\n                                 (if (matchE (a,b) &amp; matchE (b,a))<br>\n                                    then matchE (Diff x y, Empty)<br>\n                                    else   matchE (Diff x y, a)<br>\n                                         &amp; ~matchE (Diff x y, b)))\"<br>\n   (hints recdef_simp: depth2E_bg_1 depthE_bg_0)</p>",
        "id": 293896471,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660742861
    }
]