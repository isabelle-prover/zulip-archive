[
    {
        "content": "<p>From: Reto Kramer &lt;<a href=\"mailto:kramer@acm.org\">kramer@acm.org</a>&gt;<br>\nDue to it's structure, I need to use recdef for the matchE function  <br>\n(signature below). Since recdef takes one argument only, I had to  <br>\npresent it with a tuple (expr \\&lt;times&gt; expr).</p>\n<p>Is there any way for me to still be able to create an infix syntax?  <br>\nIdeally I'd like to write \"x \\&lt;subseteq&gt;E y\" as if I had been able to  <br>\nuse primrec.</p>\n<p>I've scanned the tutorial, google and the reference manual, but was  <br>\nunable to locate a relevant example.</p>\n<p>Thanks,</p>\n<ul>\n<li>Reto</li>\n</ul>\n<p>consts matchE :: \"expr \\&lt;times&gt; expr \\&lt;Rightarrow&gt;  <br>\nbool\" (\"\\&lt;subseteq&gt;E\" 500)  &lt;-- prefix ok, infix though?<br>\nrecdef matchE \"measure (\\&lt;lambda&gt;(e1,e2). depthE e1 + depthE e2)\"<br>\n...</p>",
        "id": 293896477,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660742862
    },
    {
        "content": "<p>From: Norbert Schirmer &lt;<a href=\"mailto:norbert.schirmer@web.de\">norbert.schirmer@web.de</a>&gt;<br>\nYes. You just have to define additional syntax and a syntax translation.</p>\n<p>consts matchE :: \"'a \\&lt;times&gt; 'a \\&lt;Rightarrow&gt;  bool\"<br>\nsyntax \"@matchE\":: \"'a \\&lt;Rightarrow&gt; 'a \\&lt;Rightarrow&gt; bool\" (infixl <br>\n\"\\&lt;subseteq&gt;E\" 500)</p>\n<p>translations<br>\n\"e1 \\&lt;subseteq&gt;E e2\" == \"matchE (e1, e2)\"</p>\n<p>term \"e1 \\&lt;subseteq&gt;E e2\"</p>\n<p>You can also define the E as subscript.<br>\n\\&lt;subseteq&gt;\\&lt;^sub&gt;E</p>\n<p>Norbert</p>",
        "id": 293896479,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660742864
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nReto Kramer wrote:<br>\nYou can only declare infix syntax for curried functions.</p>\n<p>If you want infix syntax, you have to define an auxiliary function:</p>\n<p>consts<br>\n   matchE_aux :: \"expr * expr =&gt;  bool\"</p>\n<p>matchE :: \"expr =&gt; expr =&gt; bool\"  (\"\\&lt;subseteq&gt;E\" 500)</p>\n<p>recdef matchE \"measure (\\&lt;lambda&gt;(e1,e2). depthE e1 + depthE e2)\"<br>\n  ...</p>\n<p>defs<br>\n   matchE_def: \"matchE x y == matchE_aux (x,y)\"</p>\n<p>(* now derive the recursion equations of matchE from matchE_aux ...*)</p>\n<p>Hope this helps...</p>\n<p>Alex</p>",
        "id": 293896482,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660742866
    }
]