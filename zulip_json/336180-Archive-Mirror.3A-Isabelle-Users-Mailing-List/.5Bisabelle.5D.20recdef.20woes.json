[
    {
        "content": "<p>From: Michael Norrish &lt;<a href=\"mailto:Michael.Norrish@nicta.com.au\">Michael.Norrish@nicta.com.au</a>&gt;<br>\nI'm using the most recent CVS version of Isabelle, or something very<br>\nclose to it.  </p>\n<p>recdef is making the definition at the bottom of the attached</p>\n<hr>\n<p>datatype<br>\n  typ_tag = char_tt | short_tt | int_tt | long_tt | ptr_tt <br>\n          | struct_tt \"typ_tag list\" | array_tt \"typ_tag\" \"nat\"</p>\n<p>consts<br>\n  wf_tag :: \"typ_tag \\&lt;Rightarrow&gt; bool\"</p>\n<p>lemma[simp]: \"t \\&lt;in&gt; set tyl \\&lt;longrightarrow&gt; size t &lt; Suc (typ_tag_list_size <br>\ntyl)\"<br>\nby (induct_tac tyl,auto)</p>\n<p>recdef wf_tag \"measure size\"<br>\n  \"wf_tag char_tt = True\"<br>\n  \"wf_tag short_tt = True\"<br>\n  \"wf_tag int_tt = True\"<br>\n  \"wf_tag long_tt = True\"<br>\n  \"wf_tag ptr_tt = True\"<br>\n  \"wf_tag (struct_tt tyl) = (\\&lt;not&gt; null tyl \\&lt;and&gt; (\\&lt;forall&gt; t \\&lt;in&gt; set tyl. <br>\nwf_tag t))\"<br>\n  \"wf_tag (array_tt ty n) = wf_tag ty\"</p>\n<p>print_theorems (* have a look at wf_tag.simps *)</p>\n<hr>\n<p>in such a way that there is still a check to see if the argument to<br>\nwf_tag is in the measure, and if not, giving me back arbitrary.</p>\n<p>The little lemma above it doesn't seem to help.   </p>\n<p>The wf_tag.induct theorem is also \"wrong\" because it doesn't allow me<br>\nto assume anything about the contents of tyl.</p>\n<p>Using</p>\n<p>wf_tag (struct_tt tyl) = (\\&lt;not&gt; null tyl \\&lt;and&gt; <br>\n                            list_all id (map wf_tag tyl))</p>\n<p>works.  Using \"list_all wf_tag tyl\" doesn't.</p>\n<p>No doubt it wouldn't be difficult to recast this as an inductive<br>\ndefinition.</p>\n<p>Michael.</p>",
        "id": 293896653,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660742922
    },
    {
        "content": "<p>From: Konrad Slind &lt;<a href=\"mailto:slind@cs.utah.edu\">slind@cs.utah.edu</a>&gt;<br>\nThe context of that recursive call hasn't been tracked. Maybe the<br>\nrecdef termination condition extractor doesn't know about the<br>\ncongruence theorem for bounded quantification?</p>\n<p>Konrad.</p>",
        "id": 293896654,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660742922
    },
    {
        "content": "<p>From: Michael Norrish &lt;<a href=\"mailto:Michael.Norrish@nicta.com.au\">Michael.Norrish@nicta.com.au</a>&gt;<br>\nWhile we're about it, the following also fails, generating an<br>\nimpossible termination condition.  (HOL4 gets this right, Konrad will<br>\nbe pleased to hear.)</p>\n<hr>\n<p>recdef align_tt \"measure size\"<br>\n  \"align_tt char_tt = 1\"<br>\n  \"align_tt short_tt = 2\"<br>\n  \"align_tt int_tt = 4\"<br>\n  \"align_tt long_tt = 4\"<br>\n  \"align_tt ptr_tt = 4\"<br>\n  \"align_tt (array_tt ty n) = align_tt ty\"<br>\n  \"align_tt (struct_tt []) = 0\" <br>\n  \"align_tt (struct_tt (ty#tys)) = foldr (\\&lt;lambda&gt;ty n. max (align_tt ty) n)<br>\n                                          tys (align_tt ty)\"</p>\n<hr>\n<p>Michael.</p>",
        "id": 293896659,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660742924
    },
    {
        "content": "<p>From: Michael Norrish &lt;<a href=\"mailto:Michael.Norrish@nicta.com.au\">Michael.Norrish@nicta.com.au</a>&gt;<br>\nAlexander Krauss writes:</p>\n<p>I still don't understand why list_all on its own didn't work, but <br>\nwhen I combined list_all with map it did work.  Anyway, thanks for the<br>\nhelp in finding a workaround.</p>\n<p>Michael.</p>",
        "id": 293899532,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660743930
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:gerwin.klein@nicta.com.au\">gerwin.klein@nicta.com.au</a>&gt;<br>\nI just checked the library: that is because there is a congruence rule for <br>\nmap, but none for list_all. </p>\n<p>In the example with \"list_all id (map ..)\" the \"id\" probably made it simple <br>\nenough to deal with.</p>\n<p>Cheers,<br>\nGerwin</p>",
        "id": 293899536,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660743930
    }
]