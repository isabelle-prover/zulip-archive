[
    {
        "content": "<p>From: Dimitrios Vytiniotis &lt;<a href=\"mailto:dimitriv@cis.upenn.edu\">dimitriv@cis.upenn.edu</a>&gt;<br>\nHello all, consider the (admittedly strange) fragment:</p>\n<p>datatype tm = Z | S \"tm\"</p>\n<p>consts foo :: \"tm =&gt; tm set\"<br>\nrecdef foo \"measure size\"<br>\n\"foo x = { Z. (x = Z) } \\&lt;union&gt;<br>\n          { (S x1) | x1. x = S x1 /\\ x1 : (foo x1) }\";</p>\n<p>Isabelle cannot prove monotonicity, because the equation \"x = S x1\"<br>\nseems to not be available. In particular, she tries to prove to me that:</p>\n<p>forall x1. size x1 &lt; size x<br>\ninstead of:<br>\n     forall x1. (x = S x1) --&gt; (size x1 &lt; size x)</p>\n<p>Why is this happening? Why aren't the rest of the equations in the <br>\ncomprehension used to derive the monotonicity requirement? Here's my<br>\nexplanation:<br>\nSuch a thing would still be sound. Because if the \"x = S x1\" was false<br>\nno call to \"foo x1\" would have to be done and hence no monotonicity<br>\ncheck would be necessary. The whole predicate (x = S x1 /\\ x1: foo x1)<br>\nwould be false and the particular set component empty. But the problem<br>\nwould be that checking that the predicate is false would require in the<br>\ngeneral case validating the predicate in a particular order (one that<br>\ndoes not attempt to run foo first) and perhaps there's no internal<br>\nmechanism in Isabelle to do such a thing. Is this the reason? Or is such<br>\na thing not sound alltogether? It would be nice if such a definition was<br>\npossible.</p>\n<p>Thanks!</p>\n<p>--dimitris</p>\n<p>ps: I know that I can rewrite the function in other ways that will make<br>\nit work but I really want to keep this style (basically because with<br>\nthis style I do not have to write explicit pattern match cases for<br>\nfail-through cases---when the predicate fails, the set is empty and<br>\nthat's it)</p>",
        "id": 294042144,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815784
    },
    {
        "content": "<p>From: Stefan Berghofer &lt;<a href=\"mailto:berghofe@in.tum.de\">berghofe@in.tum.de</a>&gt;<br>\nDimitrios Vytiniotis wrote:<br>\nHello,</p>\n<p>by declaring the congruence rule for conjunction via</p>\n<p>declare conj_cong [recdef_cong]</p>\n<p>before invoking recdef, you can instruct Isabelle to use the<br>\nequation \"x = S x1\" when proving the termination condition for<br>\n\"x1 : (foo x1)\". With the above declaration, the termination<br>\nproof for \"foo\" is completely automatic.</p>\n<p>Greetings,<br>\nStefan</p>",
        "id": 294042166,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815797
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nDimitrios,</p>\n<p>Also note that in the first comprehension, Z is parsed as a bound <br>\nvariable (\"The set of all Z, where x equals Z\"). Is this really what you <br>\nwant?</p>\n<p>Alex</p>",
        "id": 294042176,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815803
    }
]