[
    {
        "content": "<p>From: Viorel Preoteasa &lt;<a href=\"mailto:viorel.preoteasa@abo.fi\">viorel.preoteasa@abo.fi</a>&gt;<br>\nI have the following definitions:</p>\n<p>datatype Tree =<br>\n   A | B | \"tree\" \"Tree\"  \"Tree\"</p>\n<p>fun changetree:: \"Tree =&gt; Tree\" where<br>\n   \"changetree A = B\"|<br>\n   \"changetree B = A\"|<br>\n   \"changetree (tree A (tree x y)) = tree (changetree y) (changetree x)\" |<br>\n   \"changetree (tree (tree u v) (tree x y)) = tree (changetree y) <br>\n(changetree x)\" |<br>\n   \"changetree (tree x y) = (tree x y)\"</p>\n<p>consts<br>\n   sometree:: \"Tree\"</p>\n<p>lemma X [simp]: \"- (sometree = A)\"<br>\n   sorry<br>\nlemma Y [simp]: \"- (sometree = B)\"<br>\n   sorry<br>\nlemma Z [simp]: \"- (sometree = (tree A (tree x y)))\"<br>\n   sorry<br>\nlemma U [simp]: \"- (sometree = (tree (tree u v) (tree x y)))\"<br>\n   sorry</p>\n<p>lemma main: \"changetree sometree = sometree\"<br>\n   apply (case_tac sometree)<br>\n   apply simp_all</p>\n<p>I would expect that all simplifications lemmas X ... U will prove the <br>\nlemma main.<br>\nHow it is possible to do a proof by the cases of the function <br>\ndefinition, not the case<br>\nof tree?</p>\n<p>Best regards,</p>\n<p>Viorel</p>",
        "id": 294147757,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848138
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi Viorel,</p>\n<p>The function package derives a case analysis rule \"changetree.cases\" for <br>\nyou (which is basically a degenerate form of induction). Use it with</p>\n<p>apply (cases sometree rule: changetree.cases)</p>\n<p>Note that the cases you actually get are more than you wrote down in the <br>\ndefinition, due to pattern disambiguation.</p>\n<p>Another remark (even if this is just a toy example): Don't use unary <br>\nminus when you mean negation, in particular in [simp] rules. Negation is <br>\nwritten ~ or \\&lt;not&gt;, negated equality is written ~= or \\&lt;noteq&gt;. Your <br>\nsimp rules would never apply, because terms of this forms generally do <br>\nnot occur. More generally: Write your simp rules in such a way that the <br>\nleft hand side is a normal form wrt. to the existing simp rules.</p>\n<p>Hope this helps,</p>\n<p>Alex</p>",
        "id": 294147974,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848224
    }
]