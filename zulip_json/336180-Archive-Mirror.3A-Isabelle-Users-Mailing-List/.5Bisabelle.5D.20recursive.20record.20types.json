[
    {
        "content": "<p>From: Michael Norrish &lt;<a href=\"mailto:Michael.Norrish@nicta.com.au\">Michael.Norrish@nicta.com.au</a>&gt;<br>\nIs there any chance the following will come to be allowed by the<br>\nrecord definition package?</p>\n<hr>\n<p>theory foo imports Main<br>\nbegin</p>\n<p>datatype 'a ptr = Ptr nat</p>\n<p>record listnode =<br>\n  item :: nat<br>\n  nextnode :: \"listnode ptr\"</p>\n<p>end</p>\n<hr>\n<p>It'd be annoying to have to make the nextnode field of \"unit ptr\", and<br>\nend up with an Isabelle model that has less type information than the<br>\noriginal C program.</p>\n<p>Michael.</p>",
        "id": 294044272,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816643
    },
    {
        "content": "<p>From: Norbert Schirmer &lt;<a href=\"mailto:norbert.schirmer@web.de\">norbert.schirmer@web.de</a>&gt;<br>\nHi Michael,</p>\n<p>On Wednesday 29 November 2006 23:12, Michael Norrish wrote:</p>\n<blockquote>\n<p>Is there any chance the following will come to be allowed by the<br>\nrecord definition package?</p>\n</blockquote>\n<p>Such a change is not planned since recursion and extensibility of records <br>\ndoesn't seem to fit together too well.</p>\n<p>If you really need recursion you can still use a datatype.</p>\n<blockquote>\n<hr>\n<p>theory foo imports Main<br>\nbegin</p>\n<p>datatype 'a ptr = Ptr nat</p>\n<p>record listnode =<br>\n  item :: nat<br>\n  nextnode :: \"listnode ptr\"</p>\n<p>end</p>\n<hr>\n</blockquote>\n<p>However, in your example you only want to maintain a kind of type-tag for<br>\n\"ptr\". Maybe one of the following workarounds can still help you:</p>\n<p>1)</p>\n<hr>\n<p>datatype 'a ptr = Ptr nat</p>\n<p>typedecl listnodeT<br>\nrecord listnode =<br>\n  item :: nat<br>\n  nextnode :: \"listnodeT ptr\"</p>\n<hr>\n<hr>\n<p>2)<br>\nrecord 'a listnode =<br>\n  item ::nat<br>\n  nextnode :: \"'a ptr\"</p>\n<p>term \"r::(unit listnode) listnode\"</p>\n<hr>\n<p>Norbert</p>",
        "id": 294044330,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816673
    },
    {
        "content": "<p>From: Norbert Schirmer &lt;<a href=\"mailto:norbert.schirmer@web.de\">norbert.schirmer@web.de</a>&gt;<br>\nHi Michael,</p>\n<p>On Wednesday 29 November 2006 23:12, Michael Norrish wrote:</p>\n<blockquote>\n<p>Is there any chance the following will come to be allowed by the<br>\nrecord definition package?</p>\n</blockquote>\n<p>Such a change is not planned since recursion and extensibility of records <br>\ndoesn't seem to fit together too well.</p>\n<p>If you really need recursion you can still use a datatype.</p>\n<blockquote>\n<hr>\n<p>theory foo imports Main<br>\nbegin</p>\n<p>datatype 'a ptr = Ptr nat</p>\n<p>record listnode =<br>\n  item :: nat<br>\n  nextnode :: \"listnode ptr\"</p>\n<p>end</p>\n<hr>\n</blockquote>\n<p>However, in your example you only want to maintain a kind of type-tag for<br>\n\"ptr\". Maybe one of the following workarounds can still help you:</p>\n<p>1)</p>\n<hr>\n<p>datatype 'a ptr = Ptr nat</p>\n<p>typedecl listnodeT<br>\nrecord listnode =<br>\n  item :: nat<br>\n  nextnode :: \"listnodeT ptr\"</p>\n<hr>\n<hr>\n<p>2)<br>\nrecord 'a listnode =<br>\n  item ::nat<br>\n  nextnode :: \"'a ptr\"</p>\n<p>term \"r::(unit listnode) listnode\"</p>\n<hr>\n<p>Norbert</p>",
        "id": 294044499,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816741
    }
]