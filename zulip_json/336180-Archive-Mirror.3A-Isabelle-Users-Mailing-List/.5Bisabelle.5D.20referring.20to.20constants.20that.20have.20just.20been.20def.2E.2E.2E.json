[
    {
        "content": "<p>From: Michael Norrish &lt;<a href=\"mailto:Michael.Norrish@nicta.com.au\">Michael.Norrish@nicta.com.au</a>&gt;<br>\nIf I have just defined a constant (using add_constdefs_i, say), and<br>\nwant to construct a new term including that new constant term, how<br>\nshould I generate that term?</p>\n<p>It seems that using </p>\n<p>Sign.intern_const</p>\n<p>will give me the correct qualified name for the constant (I do know<br>\nits name after all), but I'm worried about the situation when multiple<br>\nconstants from different theories have the same name.  What will<br>\nintern_const do then?</p>\n<p>Is there a function that will give me the name of the current theory,<br>\nso that I can construct the fully-qualified name myself?  </p>\n<p>Or is there some other way again?</p>\n<p>Thanks,<br>\nMichael.</p>",
        "id": 293905103,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660745716
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nYou are right in being worried. Above `intern' only worked by chance, <br>\nbecause a recent declaration is likely to be preferred by name space <br>\nlookup.</p>\n<p>Name spaces provide 3 key operations:</p>\n<p>full -- produce fully qualified name according to the current naming policy</p>\n<p>intern -- internalize an external name (partically qualified) according <br>\n    to the current name space (for reading etc.)</p>\n<p>extern -- reverse of intern (for printing etc.)</p>\n<p>You want to perform the `full' operation here, ie. mimic what <br>\nadd_constdefs_i did internally.  Do this via Sign.full_name, which uses <br>\nthe official naming convention of the theory context.  Do not refer to <br>\ntheory_name etc. directly.</p>\n<p>Makarius</p>",
        "id": 293905182,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660745744
    }
]