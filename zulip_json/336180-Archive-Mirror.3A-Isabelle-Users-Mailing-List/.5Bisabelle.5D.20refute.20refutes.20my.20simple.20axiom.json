[
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nHi,</p>\n<p>So if you have something inconsistent, you get to experience both the <br>\ncheap thrills of sledgehammer, and the dashing of your naive dreams with <br>\nrefute. Still, automation is great. You want your naivety demolished as <br>\nsoon as possible.</p>\n<p>Refute is finding a model. I simplified everything down to a theorem <br>\nwhich states a simple axiom as an exists instead of a forall, and refute <br>\nfinds a model, although metis proves the theorem. I don't know how to <br>\ninterpret the results of refute. Here's the theory.</p>\n<p>typedecl sT</p>\n<p>axiomatization<br>\nempty_set::sT and<br>\ninS::\"sT =&gt; sT =&gt; bool\" (infixl \"∈⇣σ\" 55)<br>\nwhere<br>\nempty_ax:\"!(x::sT). ~(x ∈⇣σ empty_set)\"</p>\n<p>theorem --\"refute finds a model\"<br>\n\"~(?(x::sT). x ∈⇣σ empty_set)\"<br>\nnitpick<br>\nrefute<br>\noops</p>\n<p>theorem --\"metis proves it.\"<br>\n\"~(?(x::sT). x ∈⇣σ empty_set)\"<br>\nby (metis empty_ax)</p>\n<p>Refute returns this message:</p>\n<p>Model found:<br>\nSize of types: ?'b: 1, sT: 1<br>\nempty_set: sTs_1ax.sT0<br>\nop ∈⇣σ: {(sTs_1ax.sT0, {(sTs_1ax.sT0, True)})}</p>\n<p>Can anyone tell me how to interpret the refute message? Is there <br>\ndocumentation on the web that tells me how to read the output of an SAT <br>\nsolver?</p>\n<p>Actually, it looks like it might be saying that the empty_set is an <br>\nelement of the empty_set.</p>\n<p>I could try to come up with a fix based on that hunch, but I spent 3 or <br>\n4 hours before I figured out to simplified the theory to the bare bones. <br>\nIt would be nice to know for sure, and if anyone wants to tell me how to <br>\nfix the problem, that would be okay.</p>\n<p>Attached is the complete theory.</p>\n<p>Regards,<br>\nGB<br>\n<a href=\"/user_uploads/14278/koFbxbheJUMqUhGyBXpRccxj/sTs_1ax.thy\">sTs_1ax.thy</a></p>",
        "id": 294165911,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660854702
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;<br>\nHi Gottfried,</p>\n<blockquote>\n<p>Refute is finding a model. I simplified everything down to a theorem which states a simple axiom as an exists instead of a forall, and refute finds a model, although metis proves the theorem. I don't know how to interpret the results of refute. Here's the theory.</p>\n</blockquote>\n<p>Refute is unsound in the presence of axioms, because it will fail to pick these up. For cases like these, you have to use Nitpick.</p>\n<p>As a general rule, Nitpick subsumes Refute and there is no reason to use the latter. Refute is provided for historical reasons and might disappear in a future release.</p>\n<p>Regards,</p>\n<p>Jasmin</p>",
        "id": 294165924,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660854707
    },
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:webertj@in.tum.de\">webertj@in.tum.de</a>&gt;<br>\nrefute simply disregards user-supplied axioms (other than type and<br>\nconstant definitions). See Section 3.4 (page 52) of<br>\n<a href=\"http://user.it.uu.se/~tjawe125/publications/weber08satbased.html\">http://user.it.uu.se/~tjawe125/publications/weber08satbased.html</a><br>\nfor a brief discussion. As you noticed, this may well lead to spurious<br>\n(counter-)models in the presence of such axioms.</p>\n<p>I suggest that you use nitpick instead, which -- for all practical<br>\nintents and purposes -- is a worthy successor to refute.</p>\n<p>Best regards,<br>\nTjark</p>",
        "id": 294165938,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660854714
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nJasmin, thanks for the info. I'm happy to simplify my life where possible.</p>\n<p>How about quickcheck? Is that something I should forget? I do this:</p>\n<p>theorem --\"refute finds a model\"<br>\n\"!(x::sT). ~(x ∈⇣σ empty_set)\"<br>\nquickcheck</p>\n<p>And it gives me this:</p>\n<p>Quickchecking...<br>\nNo active testers for quickcheck</p>\n<p>The examples I saw in the list archives didn't give quickcheck any <br>\noptions, though I tried this, after looking at isar-ref.pdf:</p>\n<p>quickcheck [exhaustive]</p>\n<p>Thanks,<br>\nGB</p>",
        "id": 294165954,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660854719
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nTjark,</p>\n<p>I like worthy successors.</p>\n<p>I had a look at the section you referenced. Thanks.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294166003,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660854726
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;<br>\nIf you use \"axiomatization\", yes. Quickcheck requires executable definitions / code equations.</p>\n<p>Jasmin</p>",
        "id": 294166019,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660854734
    }
]