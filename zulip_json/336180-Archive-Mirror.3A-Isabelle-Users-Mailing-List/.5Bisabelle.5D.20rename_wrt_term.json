[
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Marco,</p>\n<p>Almost the same as variant_frees ;-). A list of named things (\"(string *\n'a) list\") is renamed so that no name clashes with the names (Frees,<br>\nTFrees, base name of constants) in a term.</p>\n<p>Hope this helps<br>\nFlorian<br>\n<a href=\"/user_uploads/14278/g0BiTebYQmU6_O6qKyZNG6Ly/florian.haftmann.vcf\">florian.haftmann.vcf</a><br>\n<a href=\"/user_uploads/14278/Kdh8EDZ4Br0jqo6oTu5_uz7B/signature.asc\">signature.asc</a></p>",
        "id": 294040725,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815141
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nActually this is the current internal development version.  The official <br>\nIsabelle2005 source reads like this:</p>\n<p>(* renames and reverses the strings in vars away from names *)<br>\nfun rename_aTs names vars : (string*typ)list =<br>\n  let fun rename_aT (vars,(a,T)) =<br>\n                (variant (map #1 vars @ names) a, T) :: vars<br>\n  in Library.foldl rename_aT ([],vars) end;</p>\n<p>fun rename_wrt_term t = rename_aTs (add_term_names(t,[]));</p>\n<p>In general there are usually two steps to find out what a certain internal <br>\noperation does:</p>\n<p>1) look at the definition<br>\n  2) look at the actual uses elsewhere</p>\n<p>(Use something like grep -r --include=\\*.ML here.)</p>\n<p>Makarius</p>",
        "id": 294040742,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815150
    },
    {
        "content": "<p>From: Marco &lt;<a href=\"mailto:marco@uma.pt\">marco@uma.pt</a>&gt;<br>\nCould someone please tell me what rename_wrt_term does?</p>",
        "id": 294041269,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815384
    }
]