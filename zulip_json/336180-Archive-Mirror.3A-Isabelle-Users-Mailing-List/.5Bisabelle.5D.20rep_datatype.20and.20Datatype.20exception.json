[
    {
        "content": "<p>From: Mathieu Giorgino &lt;<a href=\"mailto:mathieu.giorgino@irit.fr\">mathieu.giorgino@irit.fr</a>&gt;<br>\nHello all,</p>\n<p>I'm trying to use rep_datatype command, however I'm getting an exception <br>\n\"Datatype\" and I'm not sure why.</p>\n<p>In the following example, the only difference between Cons2 and Cons2' is the <br>\n(un)currying of the parameters but it's OK for the first one while it isn't <br>\nfor the second.</p>\n<hr>\n<p>theory RepDatatype imports Main<br>\nbegin</p>\n<p>typedef 'a list2 = \"UNIV:: 'a list set\" ..</p>\n<p>definition Nil2 :: \"'a list2\" where \"Nil2 = Abs_list2 []\"</p>\n<p>fun Cons2 :: \"'a \\&lt;Rightarrow&gt; 'a list2 \\&lt;Rightarrow&gt; 'a list2\" where<br>\n  \"Cons2 a as = Abs_list2 (a # Rep_list2 as)\"</p>\n<p>rep_datatype Nil2 Cons2 (* OK *)<br>\noops</p>\n<p>fun Cons2' :: \"('a * 'a list2) \\&lt;Rightarrow&gt; 'a list2\" where<br>\n  \"Cons2' (a, as) = Abs_list2 (a # Rep_list2 as)\"</p>\n<p>rep_datatype Nil2 Cons2' (* exception Datatype raised<br>\n    (line 218 of \"~~/src/HOL/Tools/Datatype/datatype_aux.ML\") *)</p>\n<hr>\n<p>What does this exception mean ?</p>\n<p>Thanks,</p>\n<p>Mathieu Giorgino<br>\n<a href=\"/user_uploads/14278/OJPQDjba6pqZ-D78g2MFNrVG/signature.asc\">signature.asc</a></p>",
        "id": 294124761,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840957
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nHi Mathieu,</p>\n<p>This is a bug. \"Datatype\" is an exception used internally in the<br>\nimplementation of \"rep_datatype\"; users are never supposed to see it.</p>\n<p>It appears that while \"rep_datatype\" supports mutual recursion, it has<br>\nproblems with indirect-recursive datatypes like your \"list2\" type.<br>\n(Indirect recursion means that a recursive type appears as a parameter<br>\nof another datatype. In your case, type \"'a list2\" appears inside a<br>\nproduct type.)</p>\n<p>To the Isabelle developers: I was able to get a little further on this<br>\nexample by modifying HOL/Tools/Datatype/datatype_data.ML like this:</p>\n<p>val descr = map_index mk_spec cs;<br>\n     val injs = Datatype_Prop.make_injs [descr] vs;<br>\n     val half_distincts = map snd (Datatype_Prop.make_distincts [descr] vs);</p>\n<ul>\n<li>val ind = Datatype_Prop.make_ind [descr] vs;</li>\n<li>val dt_info = get_all thy;</li>\n<li>val (descrs, _) = unfold_datatypes thy descr vs dt_info descr (length cs);</li>\n<li>val ind = Datatype_Prop.make_ind descrs vs;<br>\n     val rules = (map o map o map) Logic.close_form [[[ind]], injs,<br>\nhalf_distincts];</li>\n</ul>\n<p>Now the rep_datatype command produces the right goals for me to prove,<br>\nbut it raises another Datatype exception after I finish the proof.<br>\nMaybe whoever is currently maintaining the datatype package (Stefan or<br>\nFlorian?) can follow up on this.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294124860,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840986
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi all,</p>\n<p>the issue with rep_datatype is that it started as a semi-official<br>\nbootstrap device for HOL and, over the last years, turned more and more<br>\nin a user-space command which still carries around restrictions from<br>\nthat time.  For this sake I recommend to prefer datatype, and use<br>\nrep_datatype only under special conditions.</p>\n<p>Traditionally, Isabelle/HOL is built in a way that there is practically<br>\nonly one way to introduce a certain type, although there might be a<br>\ncouple of legitimate views on that type (e.g. multisets either as<br>\ntypedef with a restriction predicate over 'a =&gt; nat or a quotient of 'a<br>\nlist).  This is indeed a constructivism which has no justification<br>\nexcept pragmatism, and maybe future developments should lift that<br>\nrestriction.  For the moment, the only known exception to this is indeed<br>\nrep_datatype, which in its current implementation is an<br>\nunderapproximation of what it should be properly.</p>\n<p>Maybe I find some time to have a look at it.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/nfJJ2_m2hKxE9FVf2hkrm5-D/signature.asc\">signature.asc</a></p>",
        "id": 294124956,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660841018
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Fri, 17 Dec 2010, Florian Haftmann wrote:</p>\n<blockquote>\n<p>the issue with rep_datatype is that it started as a semi-official <br>\nbootstrap device for HOL and, over the last years, turned more and more <br>\nin a user-space command which still carries around restrictions from <br>\nthat time.  For this sake I recommend to prefer datatype, and use <br>\nrep_datatype only under special conditions.</p>\n</blockquote>\n<p>Right.  And of course there is no \"bug\" in the package, it merely tells <br>\nyou via a low-level exception that it cannot handle certain cases.</p>\n<p>I have recently had other surprises with 'rep_datatype', which are in fact <br>\nto be expected, since the main characterizing theorems that your have <br>\nalready usually differ from what 'datatype' would produce (induct rule <br>\netc.).  This means one should not lean out of the window too much, and use <br>\nplain datatype from the very start whenever this is possible.</p>\n<blockquote>\n<blockquote>\n<p>To the Isabelle developers: I was able to get a little further on this <br>\nexample by modifying HOL/Tools/Datatype/datatype_data.ML like this:</p>\n</blockquote>\n<blockquote>\n<p>Now the rep_datatype command produces the right goals for me to prove, <br>\nbut it raises another Datatype exception after I finish the proof. <br>\nMaybe whoever is currently maintaining the datatype package (Stefan or <br>\nFlorian?) can follow up on this.</p>\n</blockquote>\n</blockquote>\n<p>The situation of the datatype package is twofold:</p>\n<p>(1) It is very complex already.<br>\n   (2) It still needs to be localized.</p>\n<p>Practically this means that I will have to spend quite some time with it <br>\nmyself, to upgrade it to the current system infrastructure.  I hope that <br>\nthis is still feasible, so that this key component of Isabelle/HOL is not <br>\nstuck in the past -- due to a load of features that is too heavy to lift <br>\nit again.</p>\n<p>Makarius</p>",
        "id": 294124965,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660841022
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nMakarius wrote:</p>\n<blockquote>\n<p>The situation of the datatype package is twofold:</p>\n</blockquote>\n<p>(I moved this discussion to the isabelle-dev list, since it is getting <br>\ninto implementation details)</p>\n<p>Alex</p>",
        "id": 294125098,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660841053
    }
]