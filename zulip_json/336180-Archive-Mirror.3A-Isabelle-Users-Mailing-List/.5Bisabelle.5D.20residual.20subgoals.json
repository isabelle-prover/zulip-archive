[
    {
        "content": "<p>From: Buday Gergely &lt;<a href=\"mailto:gbuday@karolyrobert.hu\">gbuday@karolyrobert.hu</a>&gt;<br>\nHi,</p>\n<p>following</p>\n<p><a href=\"http://stackoverflow.com/questions/35156803/sledgehammer-gives-insufficient-proof-tactic\">http://stackoverflow.com/questions/35156803/sledgehammer-gives-insufficient-proof-tactic</a></p>\n<p>I created</p>\n<p>theory Even<br>\nimports Main</p>\n<p>begin</p>\n<p>inductive<br>\n  structural_even :: \"nat ⇒ bool\"<br>\nwhere<br>\n  \"structural_even 0\"<br>\n| \"structural_even n ⟹ structural_even (Suc(Suc n))\"</p>\n<p>fun<br>\n  computational_even :: \"nat ⇒ bool\"<br>\nwhere<br>\n  \"computational_even 0 = True\"<br>\n| \"computational_even (Suc 0) = False\"<br>\n| \"computational_even (Suc(Suc n)) = computational_even n\"</p>\n<p>lemma \"computational_even n ⟹ structural_even n\"<br>\nproof (induct n rule: computational_even.induct)<br>\nshow \"computational_even 0 ⟹ structural_even 0\"<br>\n  by (metis structural_even.intros(1))<br>\nnext<br>\nshow \"computational_even (Suc 0) ⟹ structural_even (Suc 0)\"<br>\n  by (metis computational_even.simps(2))<br>\nnext<br>\nshow \"⋀n. (computational_even n ⟹ structural_even n) ⟹ computational_even (Suc (Suc n)) ⟹ structural_even (Suc (Suc n))\"<br>\n  proof<br>\n   fix n<br>\n   assume \"computational_even n ⟹ structural_even n\"<br>\n   from this show \"computational_even (Suc (Suc n)) ⟹ structural_even n\"<br>\n    by (simp only: computational_even.simps(3))<br>\n  qed<br>\nqed</p>\n<p>end</p>",
        "id": 294667704,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172353
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi Gergely,</p>\n<blockquote>\n<p>Is it standard practice not to bother these but postpone solving them via the final qed?</p>\n</blockquote>\n<p>I'd say it's not standard practice. Most Isabelle users prefer not using<br>\nmeta-implications and meta-quantification in Isar proofs if it can be<br>\navoided. See Lars Noschinski's answer here for a case where it actually<br>\ndoesn't work if you use meta-implication:</p>\n<p>&lt;<a href=\"https://stackoverflow.com/a/25442787/4776939\">https://stackoverflow.com/a/25442787/4776939</a>&gt;</p>\n<p>Isabelle2016 has changed some things with that respect. For example, you<br>\ncan now write</p>\n<p>fix P<br>\n  assume \"P x\" for x</p>\n<p>instead of</p>\n<p>fix P<br>\n  assume \"⋀x. P x\"</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294667719,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172359
    },
    {
        "content": "<p>From: Buday Gergely &lt;<a href=\"mailto:gbuday@karolyrobert.hu\">gbuday@karolyrobert.hu</a>&gt;<br>\nHi Lars,</p>\n<p>Thanks. Re-formulating my goal I wrote</p>\n<p>lemma<br>\n fixes n :: \"nat\"<br>\n assumes \"computational_even n\"<br>\n shows \"structural_even n\"<br>\nproof (induct n rule:computational_even.induct)</p>\n<p>which results in </p>\n<p>goal (3 subgoals):</p>\n<ol>\n<li>structural_even 0</li>\n<li>structural_even (Suc 0)</li>\n<li>⋀n. structural_even n ⟹ structural_even (Suc (Suc n))</li>\n</ol>\n<p>where the 2nd subgoal is simply not true.</p>\n<p>What is wrong with that lemma expression?</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294667798,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172377
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nAm Mittwoch, den 03.02.2016, 11:50 +0100 schrieb Buday Gergely:</p>\n<blockquote>\n<p>Hi Lars,</p>\n<blockquote>\n<blockquote>\n<p>Is it standard practice not to bother these but postpone solving<br>\nthem via<br>\nthe final qed?</p>\n</blockquote>\n<p>I'd say it's not standard practice. Most Isabelle users prefer not<br>\nusing meta-<br>\nimplications and meta-quantification in Isar proofs if it can be<br>\navoided. See<br>\nLars Noschinski's answer here for a case where it actually doesn't<br>\nwork if you<br>\nuse meta-implication:</p>\n<p>&lt;<a href=\"https://stackoverflow.com/a/25442787/4776939\">https://stackoverflow.com/a/25442787/4776939</a>&gt;</p>\n</blockquote>\n<p>Thanks. Re-formulating my goal I wrote</p>\n<p>lemma<br>\n fixes n :: \"nat\"<br>\n assumes \"computational_even n\"<br>\n shows \"structural_even n\"<br>\nproof (induct n rule:computational_even.induct)</p>\n</blockquote>\n<p>You need to add the assumption with \"using\":</p>\n<p>assumes \"computational_even n\"<br>\n    shows \"structural_even n\"</p>\n<blockquote>\n<blockquote>\n<p>using assms<br>\n  proof (induct n rule:computational_even.induct)</p>\n</blockquote>\n</blockquote>\n<p>Then your 2. goal should state:</p>\n<p>computational_even (Suc 0) ==&gt; structural_even (Suc 0)</p>\n<p>Which is true as \"computational_even (Suc 0) = False\"</p>\n<ul>\n<li>Johannes</li>\n</ul>\n<blockquote>\n<p>which results in </p>\n<p>goal (3 subgoals):<br>\n 1. structural_even 0<br>\n 2. structural_even (Suc 0)<br>\n 3. ⋀n. structural_even n ⟹ structural_even (Suc (Suc n))</p>\n<p>where the 2nd subgoal is simply not true.</p>\n<p>What is wrong with that lemma expression?</p>\n<ul>\n<li>Gergely</li>\n</ul>\n</blockquote>",
        "id": 294667839,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172390
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nYou are not using your assumption at all, so effectively, you're trying <br>\nto show that /every/ number n is structurally even, which is, of course, <br>\nfalse.</p>\n<p>Chain in the assumption by putting a \"using assms\" in front of your <br>\n\"proof\". Then you will have the additional assumption <br>\n\"computational_even (Suc 0)\" in the second case, and that should be <br>\nfalse, which means the second case is trivially provable.</p>\n<p>Cheers,</p>\n<p>Manuel</p>",
        "id": 294667863,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172396
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nYou need not modify the lemma statement and \"proof\" line at all. Induction is <br>\nvery happy with implicational goals.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/3W2rK-BclmTygDln0IToqPwd/smime.p7s\">smime.p7s</a></p>",
        "id": 294667891,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172402
    }
]