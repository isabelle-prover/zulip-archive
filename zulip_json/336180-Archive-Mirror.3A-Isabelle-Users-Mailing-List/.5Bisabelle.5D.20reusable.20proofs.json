[
    {
        "content": "<p>From: Amarin Phaosawasdi &lt;<a href=\"mailto:phaosaw2@illinois.edu\">phaosaw2@illinois.edu</a>&gt;<br>\nSuppose I have an inductive definition \"is_number n\" which specifies <br>\nwhether n is a number. If n is even, then n is a number. If n is odd, <br>\nthen n is a number. \"even n\" and \"odd n\" are also inductive definitions.</p>\n<p>theory MyNumber imports Main begin</p>\n<p>inductive even :: \"nat ⇒ bool\" where<br>\n   even0: \"even 0\" |<br>\n   evenSS: \"⟦even n⟧ ⟹ even (Suc (Suc n))\"</p>\n<p>inductive odd :: \"nat ⇒ bool\" where<br>\n   odd1: \"odd (Suc 0)\" |<br>\n   oddSS: \"⟦odd n⟧ ⟹ odd (Suc (Suc n))\"</p>\n<p>inductive is_number :: \"nat ⇒ bool\" where<br>\n   o: \"⟦odd n⟧ ⟹ is_number n\" |<br>\n   e: \"⟦even n⟧ ⟹ is_number n\"</p>\n<p>end</p>\n<p>Suppose I wanted to prove that (Suc (Suc (Suc (Suc 0)))) is a number. I <br>\ncould do the following.</p>\n<p>lemma \"is_number (Suc (Suc (Suc (Suc 0))))\"<br>\n   apply (rule e)<br>\n   apply (rule evenSS)+<br>\n   apply (rule even0)<br>\n   done</p>\n<p>The problem is that this proof is not \"reusable\" in the MyNumber theory. <br>\nIf will fail if I try to prove whether 0 or any odd number is a number.</p>\n<p>One way to have a proof that can be \"reused\" (at least in this case) is <br>\nto use code_pred.</p>\n<p>code_pred is_number .</p>\n<p>lemma \"is_number (Suc (Suc (Suc (Suc 0))))\"<br>\n   by eval</p>\n<p>lemma \"is_number 0\"<br>\n   by eval</p>\n<p>lemma \"is_number (Suc (Suc (Suc 0)))\"<br>\n   by eval</p>\n<p>Are there any other proof techniques other than using code_pred such <br>\nthat the proofs are more \"reusable\"?</p>\n<p>Thank you,<br>\nAmarin</p>",
        "id": 294320936,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660926858
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nTry one of these:</p>\n<p>by (simp add: is_number.intros odd.intros even.intros) <br>\nby (metis is_number.intros odd.intros even.intros) <br>\nby (blast intro: is_number.intros intro!: odd.intros even.intros) </p>\n<p>They all work with, e.g.,</p>\n<p>lemma \"is_number (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))))))))))))))))))))))))))))))))))\"</p>\n<p>Larry Paulson</p>",
        "id": 294320976,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660926870
    },
    {
        "content": "<p>From: Wenda Li &lt;<a href=\"mailto:wl302@cam.ac.uk\">wl302@cam.ac.uk</a>&gt;<br>\nAlternatively, we can prove some general lemmas:</p>\n<p>lemma even_or_odd:\"even n ∨ odd n\"<br>\n   apply (induct n rule:nat_less_induct)<br>\n   apply (case_tac n,simp add:even0)<br>\n   apply (case_tac nat,simp add:odd1)<br>\n   by (metis evenSS less_Suc_eq oddSS)</p>\n<p>lemma is_number: \"is_number n\" by (metis e even_or_odd o)</p>\n<p>Then, we can have</p>\n<p>lemma \"is_number (Suc (Suc (Suc (Suc 0))))\" by (rule is_number)</p>\n<p>Wenda</p>",
        "id": 294321027,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660926884
    },
    {
        "content": "<p>From: Amarin Phaosawasdi &lt;<a href=\"mailto:phaosaw2@illinois.edu\">phaosaw2@illinois.edu</a>&gt;<br>\nThank you.</p>\n<p>Amarin</p>",
        "id": 294321213,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660926950
    }
]