[
    {
        "content": "<p>From: Amarin Phaosawasdi &lt;<a href=\"mailto:phaosaw2@illinois.edu\">phaosaw2@illinois.edu</a>&gt;<br>\nHi,</p>\n<p>Based on the Concrete Semantics book, I want to prove that after <br>\nassigning 1 to x, the state is updated with x being 1.</p>\n<p>To do this informally, I would use the semantics of assignmentfollowed <br>\nby simplification.</p>\n<p>Is there a one-liner proof that can do this?</p>\n<p>Below are the definitions and the Isar style proof.</p>\n<p>What are the other simpler ways to prove this lemma using Isar (e.g., do <br>\nI really need to spell out the intermediate state to match the <br>\nassignment rule)?</p>\n<p>Thank you,<br>\nAmarin</p>\n<p>=============================<br>\ntheory Question imports Main begin</p>\n<p>type_synonym state = \"string ⇒ int\"</p>\n<p>datatype aexp = N int<br>\nfun aval :: \"aexp ⇒ state ⇒ int\" where<br>\n\"aval (N n) s = n\"</p>\n<p>datatype<br>\n   com = Assign string aexp (\"_ ::= _\" [1000, 61] 61)</p>\n<p>inductive<br>\n   big_step :: \"com × state ⇒ state ⇒ bool\" (infix \"⇒\" 55)<br>\nwhere<br>\nAssign: \"(x ::= a,s) ⇒ (s(x := aval a s))\"</p>\n<p>lemma \"(''x'' ::= N 1,λx.0) ⇒ (λx.0)(''x'':=1)\"<br>\nproof -<br>\n   let ?s=\"λx.0\"<br>\n   have \"(''x'' ::= N 1,λx.0) ⇒ (λx.0)(''x'':=aval (N 1) ?s)\" by (rule <br>\nAssign)<br>\n   thus ?thesis by simp<br>\nqed</p>\n<p>end</p>",
        "id": 294321665,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927085
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi Amarin,</p>\n<p>The problem is that, for the introduction rule Assign, auto, blast, etc.<br>\nmust see the pattern \"x:=aval ...\". However, you could use metis:<br>\n  by (metis Assign aval.simps)</p>\n<p>or you could use the simplification rules generated for the big_step<br>\npredicate:<br>\n  by (simp add: big_step.simps)</p>\n<p>Yet another option may be to prove a lemma of the form<br>\n  [| ...; s'=aval e s |] ==&gt; (Assign x e,s) =&gt; s'</p>\n<p>or define the assign-rule like this in first place.</p>",
        "id": 294321687,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927090
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nYet another variation:</p>\n<p>lemma \"(''x'' ::= N 1,λx.0) ⇒ (λx.0)(''x'':=1)\"<br>\nusing Assign[of \"''x''\" \"N 1\" \"λx. 0\"] by simp</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/j8Kzx1zx_l_86FoHBOgHZKF0/smime.p7s\">smime.p7s</a></p>",
        "id": 294321698,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927097
    }
]