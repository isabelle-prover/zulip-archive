[
    {
        "content": "<p>From: Viorel Preoteasa &lt;<a href=\"mailto:viorel.preoteasa@abo.fi\">viorel.preoteasa@abo.fi</a>&gt;<br>\nHello,</p>\n<p>I have a lemma which states the equality of two boolean values:</p>\n<p>lemma (in algebra) commutative: \"(! a b . a * b = b * a) = ((op l-&gt;) = <br>\n(op r-&gt;))\";</p>\n<p>If I use apply safe on this I get two sub-goals:</p>\n<ol>\n<li>(! a b . a * b = b * a) ==&gt; (op l-&gt; ) = (op r-&gt;)</li>\n<li>/\\ a b . a * b = b * a</li>\n</ol>\n<p>The first sub-goal is provable, but the second is too weak. What is the <br>\nrule for<br>\nsplitting a boolean equality in two implications.</p>\n<p>Best regards,</p>\n<p>Viorel Preoteasa</p>",
        "id": 294109971,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836484
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nOn Thu, Jun 10, 2010 at 12:43 AM, Viorel Preoteasa<br>\n&lt;<a href=\"mailto:viorel.preoteasa@abo.fi\">viorel.preoteasa@abo.fi</a>&gt; wrote:</p>\n<blockquote>\n<p>Hello,</p>\n<p>I have a lemma which states the equality of two boolean values:</p>\n<p>lemma (in algebra) commutative: \"(! a b . a * b = b * a) = ((op l-&gt;) = (op<br>\nr-&gt;))\";</p>\n<p>If I use apply safe on this I get two sub-goals:</p>\n<ol>\n<li>(! a b . a * b = b * a) ==&gt; (op l-&gt; ) = (op r-&gt;)</li>\n<li>/\\ a b . a * b = b * a</li>\n</ol>\n<p>The first sub-goal is provable, but the second is too weak.</p>\n</blockquote>\n<p>The problem is that safe tries to be helpful by eliminating equalities<br>\nfrom the assumptions, unfolding them in the rest of the subgoal. In<br>\nthis case the assumption \"(op l-&gt; ) = (op r-&gt;)\" in goal 2 is<br>\neliminated; since \"op |-&gt;\" does not appear in the rest of the subgoal,<br>\nthe equality just goes away. This is often a reasonable behavior for<br>\nfree variables, but it is NOT generally safe for variables fixed in<br>\nlocales or structured proofs, and it is certainly not generally safe<br>\nfor constants. This undesirable behavior has been noted before on the<br>\nlist, and I would consider it a bug. (I really wish we had some kind<br>\nof issue-tracking system for such things, since they seem to be so<br>\nquickly forgotten after being mentioned on the mailing list.)</p>\n<p><a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2007-February/msg00075.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2007-February/msg00075.html</a><br>\n<a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2007-February/msg00076.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2007-February/msg00076.html</a></p>\n<blockquote>\n<p>What is the rule<br>\nfor<br>\nsplitting a boolean equality in two implications.</p>\n</blockquote>\n<p>You can use \"apply (rule iffI)\" or even just \"apply rule\". Either of<br>\nthese should result in the two subgoals that you expect.</p>\n<blockquote>\n<p>Best regards,</p>\n<p>Viorel Preoteasa</p>\n</blockquote>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294110242,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836589
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nEqualities involving constants have never been eliminated in this way. The equality must involve a variable, free or bound. The method has no way of knowing about constraints on the variable that are not part of the goal. In the case of a structured proof, it would be appropriate and natural to insert relevant inequalities with an appropriate “using” clause.</p>\n<p>The problem with locale constants is that they look like free variables to this 15 year old code. We need to look at whether there is a way for this code to identify locale constants and to treat them as such.</p>\n<p>Larry Paulson</p>",
        "id": 294110253,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836595
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nBrian Huffman wrote:<br>\nIt also happens in the following situation, in addition to the situation <br>\nBrian mentions:</p>\n<blockquote>\n<p>goal Main.thy \"P ==&gt; P = Q --&gt; Q\" ;<br>\nLevel 0 (1 subgoal)<br>\nP = Q --&gt; Q</p>\n</blockquote>\n<ol>\n<li>\n<p>P = Q --&gt; Q<br>\nval it = [\"P\"  [.]] : Thm.thm list</p>\n<blockquote>\n<blockquote>\n<p>by Safe_tac ;<br>\nLevel 1 (1 subgoal)<br>\nP = Q --&gt; Q</p>\n</blockquote>\n</blockquote>\n</li>\n<li>\n<p>Q<br>\nval it = () : unit<br>\n &gt;</p>\n</li>\n</ol>\n<p>Jeremy</p>",
        "id": 294110336,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836607
    }
]