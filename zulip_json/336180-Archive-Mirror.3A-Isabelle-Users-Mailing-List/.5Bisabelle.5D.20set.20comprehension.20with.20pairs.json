[
    {
        "content": "<p>From: Andrei Popescu &lt;<a href=\"mailto:uuomul@yahoo.com\">uuomul@yahoo.com</a>&gt;<br>\nHello, </p>\n<p>Given  P :: 'a =&gt; 'b =&gt; bool, </p>\n<p>I would like to know what does the expression </p>\n<p>{(x,y). P x y} </p>\n<p><em>precisely</em> stand for. </p>\n<p>Is it something like </p>\n<p>{z. EX x y. z = (x,y) /\\ P x y} ?</p>\n<p>Knowing this would help me deal more easily with some trivial set theory that seems reluctant to blasting.  I would also appreciate if someone showed me not only the answer to this, but also the way I could have found out myself looking at the online libraries.  </p>\n<p>Thank you in advance, <br>\n   Andrei Popescu</p>",
        "id": 294079823,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830293
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAndrei Popescu wrote:</p>\n<blockquote>\n<p>Hello, </p>\n<p>Given  P :: 'a =&gt; 'b =&gt; bool, </p>\n<p>I would like to know what does the expression </p>\n<p>{(x,y). P x y} </p>\n<p><em>precisely</em> stand for. </p>\n</blockquote>\n<p>Collect (split P)</p>\n<blockquote>\n<p>Is it something like </p>\n<p>{z. EX x y. z = (x,y) /\\ P x y} ?</p>\n</blockquote>\n<p>No. That is what you get when you use the syntax {(x,y)| x y. P x y}</p>\n<blockquote>\n<p>Knowing this would help me deal more easily with some trivial set theory that seems reluctant to blasting.</p>\n</blockquote>\n<p>I believe \"blast\" is mostly superior to \"fast\", but in the case of<br>\ntuples \"fast\" can be superior - try that.</p>\n<blockquote>\n<p>I would also appreciate if someone showed me not only the answer to this, but also the way I could have found out myself looking at the online libraries.  </p>\n</blockquote>\n<p>See the Isabelle/HOL tutorial, 8.2 Pairs and Tuples.<br>\nThe syntax is defined in theory Product_type. However, this is difficult<br>\nto spot because sets are not mentioned at all at that point. This is<br>\nwere patterns (syntax _patterns) are extended with tuples - the fact<br>\nthat {_ . _} allows patterns is found in theory Set.</p>\n<p>Best<br>\nTobias</p>\n<blockquote>\n<p>Thank you in advance, <br>\n   Andrei Popescu </p>\n</blockquote>",
        "id": 294080053,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830353
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:lochbihl@ipd.info.uni-karlsruhe.de\">lochbihl@ipd.info.uni-karlsruhe.de</a>&gt;<br>\nHi Andrei,</p>\n<p>the sytnax translation \"{x. P}\" == \"Collect (%x. P)\" in theory Set<br>\ntells you that \"{(x, y). P x y}\" is \"Collect (%(x, y). P x y)\".<br>\nNow, the translation \"%(x,y).b\" == \"split(%x y. b)\" in theory <br>\nProduct_Type defines the syntax \"%(x, y). P x y\" for<br>\n\"split (%x y. P x y)\". \"%x y. P x y\" eta-contracts to \"P\".</p>\n<p>Hence, your expression stands for \"Collect (split P)\", or in nice syntax <br>\nif \"split P\" is eta-expanded to \"%z. split P z\": \"{z. split P z}\".</p>\n<p>Regards,<br>\nAndreas</p>\n<p>Andrei Popescu schrieb:</p>",
        "id": 294080203,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830399
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nAndreas Lochbihler wrote:</p>\n<blockquote>\n<p>Hi Andrei,</p>\n<p>the sytnax translation \"{x. P}\" == \"Collect (%x. P)\" in theory Set<br>\ntells you that \"{(x, y). P x y}\" is \"Collect (%(x, y). P x y)\".<br>\nNow, the translation \"%(x,y).b\" == \"split(%x y. b)\" in theory <br>\nProduct_Type defines the syntax \"%(x, y). P x y\" for<br>\n\"split (%x y. P x y)\". \"%x y. P x y\" eta-contracts to \"P\".</p>\n<p>Hence, your expression stands for \"Collect (split P)\", or in nice <br>\nsyntax if \"split P\" is eta-expanded to \"%z. split P z\": \"{z. split P z}\".</p>\n<p>Regards,<br>\nAndreas</p>\n<p>In general I find it easiest to answer questions like this in the <br>\nfollowing way:<br>\n(which I think has been removed from more recent versions of Isabelle)<br>\nval it = () : unit<br>\nread \"{(x, y). P x y}\"  ;<br>\nval it =<br>\n   Const (\"Collect\", \"(('a, 'b) * =&gt; bool) =&gt; ('a, 'b) * set\") $<br>\n      (Const (\"split\", \"('a =&gt; 'b =&gt; bool) =&gt; ('a, 'b) * =&gt; bool\") $<br>\n         Abs<br>\n            (\"x\",<br>\n               \"'a\"<br>\n               Abs<br>\n                  (\"y\",<br>\n                     \"'b\",<br>\n                     Free (\"P\", \"'a =&gt; 'b =&gt; bool\") $ Bound 1 $ Bound 0)))<br>\n: Term.term</p>\n</blockquote>\n<p>And I recall being told that there is some Isar equivalent to this <br>\n(possibly involving the command \"term\" ? )</p>\n<p>Jeremy</p>\n<blockquote>\n<p>Andrei Popescu schrieb:</p>\n<blockquote>\n<p>Hello,<br>\nGiven  P :: 'a =&gt; 'b =&gt; bool,<br>\nI would like to know what does the expression<br>\n{(x,y). P x y}<br>\n<em>precisely</em> stand for.<br>\nIs it something like<br>\n{z. EX x y. z = (x,y) /\\ P x y} ?</p>\n<p>Knowing this would help me deal more easily with some trivial set <br>\ntheory that seems reluctant to blasting.  I would also appreciate if <br>\nsomeone showed me not only the answer to this, but also the way I <br>\ncould have found out myself looking at the online libraries. <br>\nThank you in advance,    Andrei Popescu</p>\n</blockquote>\n</blockquote>",
        "id": 294080344,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830454
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;</p>\n<blockquote>\n<p>In general I find it easiest to answer questions like this in the<br>\nfollowing way:<br>\n(which I think has been removed from more recent versions of Isabelle)</p>\n<blockquote>\n<p>val it = () : unit<br>\nread \"{(x, y). P x y}\"  ;<br>\nval it =<br>\n  Const (\"Collect\", \"(('a, 'b) * =&gt; bool) =&gt; ('a, 'b) * set\") $<br>\n     (Const (\"split\", \"('a =&gt; 'b =&gt; bool) =&gt; ('a, 'b) * =&gt; bool\") $<br>\n        Abs<br>\n           (\"x\",<br>\n              \"'a\"<br>\n              Abs<br>\n                 (\"y\",<br>\n                    \"'b\",<br>\n                    Free (\"P\", \"'a =&gt; 'b =&gt; bool\") $ Bound 1 $ Bound 0)))<br>\n: Term.term</p>\n</blockquote>\n<p>And I recall being told that there is some Isar equivalent to this<br>\n(possibly involving the command \"term\" ? )</p>\n<p>You probably mean the @{term ...} antiqotation, i.e. from Isar-level:</p>\n</blockquote>\n<p>ML {* @{term \"{(x, y). P x y}\"} *}</p>",
        "id": 294080393,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830473
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nPeter Lammich wrote:<br>\nNo, I definitely meant the command \"term\", though from the <br>\ndocumentation, it looks as though the antiquotation \"term\" should have a <br>\nsimilar effect</p>\n<p>Regards,</p>\n<p>Jeremy</p>",
        "id": 294080518,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830510
    }
]