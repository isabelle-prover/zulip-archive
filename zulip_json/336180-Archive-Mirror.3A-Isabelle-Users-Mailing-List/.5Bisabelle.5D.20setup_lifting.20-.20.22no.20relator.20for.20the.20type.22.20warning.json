[
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;<br>\nDear Isabelle,</p>\n<p>My attempt to make a typedef for finite sets ...</p>\n<blockquote>\n<p>typedef 'a fset = \"{A :: 'a set . finite A }\"<br>\nby (rule exI[of _ \"{}\"], auto)</p>\n<p>setup_lifting type_definition_fset</p>\n</blockquote>\n<p>... results in the following warning message.</p>\n<blockquote>\n<p>Generation of a parametrized correspondence relation failed.<br>\nReason:  No relator for the type \"Set.set\" found.</p>\n</blockquote>\n<p>Could somebody kindly tell me how I can address this? Thanks.</p>\n<p>john</p>",
        "id": 294229949,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901964
    },
    {
        "content": "<p>From: Ondřej Kunčar &lt;<a href=\"mailto:kuncar@in.tum.de\">kuncar@in.tum.de</a>&gt;<br>\nThe relator for sets is defined in ~~/src/HOL/Library/Quotient_Set. <br>\nIncluding this file should remove the warning.</p>\n<p>The warning is currently not really harmful because parametrized <br>\ncorrespondence relations are not used in Isabelle2013. I didn't include <br>\nother improvements of the Lifting package that depends on them to the <br>\ncoming release. Maybe in the next release this will come into play.</p>\n<p>Ondrej</p>",
        "id": 294229963,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901971
    },
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;<br>\nThanks Ondrej. </p>\n<p>Continuing my attempt to make a typedef for finite sets, I've managed to lift definitions like \"union\" from sets to finite sets. I'm now trying to lift \"big union\" from sets of sets to finite sets of finite sets, but this turns out to be less trivial. Could somebody kindly advise on how to do this proof?</p>\n<p>Below is my complete .thy file.</p>\n<p>Thanks very much,<br>\njohn</p>\n<p>------8&lt;--------</p>\n<p>theory J_Finite_Set imports<br>\n  Main<br>\n  \"~~/src/HOL/Library/Quotient_Set\"<br>\nbegin</p>\n<p>typedef 'a fset = \"{A :: 'a set . finite A }\"<br>\nby (rule exI[of _ \"{}\"], auto)</p>\n<p>setup_lifting type_definition_fset</p>\n<p>lift_definition<br>\n  union_fset :: \"'a fset ⇒ 'a fset ⇒ 'a fset\"<br>\nis \"union :: 'a set ⇒ 'a set ⇒ 'a set\" <br>\nby simp</p>\n<p>lift_definition<br>\n  Union_fset :: \"('a fset) fset ⇒ 'a fset\"<br>\nis \"Union :: 'a set set ⇒ 'a set\" <br>\n(* not worked out how to prove this yet *)<br>\nsorry</p>\n<p>end</p>\n<p>------8&lt;--------</p>",
        "id": 294230099,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902020
    },
    {
        "content": "<p>From: Ondřej Kunčar &lt;<a href=\"mailto:kuncar@in.tum.de\">kuncar@in.tum.de</a>&gt;<br>\nYou might want to take a look to ~~/src/HOL/Quotient_Examples/Lift_DList <br>\nand ~~/src/HOL/Quotient_Examples/Lift_FSet.</p>\n<p>You can find two operations using nested types there<br>\nconcat :: \"'a dlist dlist =&gt; 'a dlist (it uses typedef)<br>\nfconcat :: \"'a fset fset =&gt; 'a fset\" (it uses quotient)<br>\nand also corresponding proofs.</p>\n<p>I think the example with 'a dlist is more suitable for what you are <br>\ndoing in your formalization because 'a dlist is defined as a typedef.</p>\n<p>Ondrej</p>",
        "id": 294230110,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902026
    },
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;<br>\nThanks again, Ondrej. </p>\n<p>I have one further question on this topic, which can be summarised as \"How can I make the transfer method work properly inside a context?\".</p>\n<p>In more detail: suppose I'm working inside a context that gives me the assumption \"P f\" for some fixed f. I write a lemma involving f, and begin the proof by applying the transfer method. The transfer method <em>generalises</em> f, and thus loses the fact that P holds for it. </p>\n<p>I find that I can survive, just about, by inserting \"P f\" <em>before</em> applying the transfer method. But this feels rather unscalable.</p>\n<p>All of this is explained in further detail in the following theory file.</p>\n<p>Best wishes,<br>\nJohn</p>\n<p>---------8&lt;----------</p>\n<p>theory Scratch imports<br>\n  Main<br>\n  \"~~/src/HOL/Library/Quotient_Set\"<br>\nbegin</p>\n<p>locale always_true =<br>\n  fixes f :: \"'a ⇒ bool\"<br>\n  assumes always_true: \"f x = True\"<br>\nbegin end</p>\n<p>typedef 'a fset = \"{A :: 'a set . finite A }\"<br>\nby (rule exI[of _ \"{}\"], auto)</p>\n<p>setup_lifting type_definition_fset</p>\n<p>lift_definition<br>\n  fset_member :: \"'a ⇒ 'a fset ⇒ bool\" (infix \"|∈|\" 50)<br>\nis \"op ∈\" by simp</p>\n<p>context always_true begin</p>\n<p>lemma \"a |∈| A ⟹ f a\"<br>\napply transfer<br>\noops</p>\n<p>lemma \"a |∈| A ⟹ f a\"<br>\napply (insert always_true)<br>\napply transfer<br>\napply auto<br>\ndone</p>\n<p>end</p>\n<p>end</p>\n<p>---------8&lt;----------</p>",
        "id": 294230116,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902032
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi John,</p>\n<p>With the option fixing, you can tell transfer not to generalize certain <br>\nvariables:</p>\n<p>apply(transfer fixing: f)</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 294230121,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902037
    },
    {
        "content": "<p>From: Ondřej Kunčar &lt;<a href=\"mailto:kuncar@in.tum.de\">kuncar@in.tum.de</a>&gt;<br>\nJust citing from The Isabelle/Isar Reference Manual:<br>\nGoals are generalized over all free variables by default; this is <br>\nnecessary for variables whose types change, but can be overridden for <br>\nspecific variables with e.g. transfer fixing: x y z.</p>\n<p>Ondrej</p>",
        "id": 294230130,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902044
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI've occasionally seen this from a distance, but did not look more closely <br>\n(and right now I am also busy with the Isabelle2013 release).</p>\n<p>Historically, the treatment of Free variables as arbitrary might stem from <br>\nthe original HOL4 version of the quotient mechanism by Peter Homeier, when <br>\nit was ported to Isabelle/HOL for the first time.  But Isabelle has a <br>\nclear notion of \"fixed variable\" within a context, which act as local <br>\nconstants by default.  So the above exception declaration via \"fixing\" <br>\nlooks more like a hot fix.</p>\n<p>A more standard way in Isabelle is to leave things as fixed as they are <br>\nalready in the context, unless the users says differenly by augmenting the <br>\n\"eigen context\" of some language element.  The \"ind_cases\" proof method is <br>\nan example for that, it uses the \"for\" syntax for that.  (The same \"for\" <br>\nnotation helped out in many conceptually difficult situations in locale <br>\nexpressions some years ago.)</p>\n<p>Makarius</p>",
        "id": 294230166,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902068
    }
]