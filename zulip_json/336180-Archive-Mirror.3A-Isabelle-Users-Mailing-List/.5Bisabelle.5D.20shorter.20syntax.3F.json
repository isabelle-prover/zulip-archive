[
    {
        "content": "<p>From: Vadim Zaliva &lt;<a href=\"mailto:vzaliva@cmu.edu\">vzaliva@cmu.edu</a>&gt;<br>\nHi!</p>\n<p>I am proving things about lists of of values which have type of instances of comm_ring_1.<br>\nI have to write a lot of constructs like this:</p>\n<p>fixes a::\"'val::{comm_ring_1} list\"</p>\n<p>If there is a way to define shorter alias for this?<br>\nFor example, before I was working with reals and I had<br>\ntype_synonym 'vec' for 'real list' and I would use:</p>\n<p>fixes a::\"vec\"</p>\n<p>Any way to do something similar here?</p>\n<p>Thanks!</p>\n<p>Sincerely,<br>\nVadim Zaliva</p>",
        "id": 294290303,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923239
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Vadim,</p>\n<blockquote>\n<p>fixes a::\"'val::{comm_ring_1} list\"</p>\n<p>If there is a way to define shorter alias for this?</p>\n</blockquote>\n<p>in short, nothing simple except to leave out the curly brackets:</p>\n<p>fixes a :: \"'a :: comm_ring list\"</p>\n<p>You could do fancy things on one of the type parsing/printing layers,<br>\nbut this is nothing I would recommend here.</p>\n<p>Florian</p>\n<blockquote>\n<p>For example, before I was working with reals and I had<br>\ntype_synonym 'vec' for 'real list' and I would use:</p>\n<p>fixes a::\"vec\"</p>\n<p>Any way to do something similar here?</p>\n<p>Thanks!</p>\n<p>Sincerely,<br>\nVadim Zaliva</p>\n<p>--<br>\nCMU ECE PhD student<br>\nMobile: +1(510)220-1060<br>\nSkype: vzaliva</p>\n<p><a href=\"/user_uploads/14278/s9GAsb7tGGbAUvD3ouIjhcpE/signature.asc\">signature.asc</a></p>\n</blockquote>",
        "id": 294308018,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924926
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Vadim</p>\n<p>Here's another thought on this. If it is just about avoiding the ubiquitous sort <br>\nconstraint for one specific type variable, you can fix the type variable locally in an <br>\nanonymous context. Here's an example:</p>\n<p>context fixes dummy :: \"'val :: comm_ring_1\" begin</p>\n<p>lemma foo<br>\n   fixes a :: \"'val\"<br>\n   assumes ...<br>\n   shows ...<br>\nsorry</p>\n<p>end</p>\n<p>Andreas</p>",
        "id": 294308083,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924950
    }
]