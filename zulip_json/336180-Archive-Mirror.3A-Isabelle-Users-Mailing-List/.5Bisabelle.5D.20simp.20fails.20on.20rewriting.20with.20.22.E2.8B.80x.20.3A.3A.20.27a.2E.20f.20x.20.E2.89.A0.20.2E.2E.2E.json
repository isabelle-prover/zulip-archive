[
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nHi everyone,</p>\n<p>today I stumbled upon some behaviour of simp I don't understand.<br>\nConsider the following simple theory</p>\n<p>theory Scratch imports Main begin</p>\n<p>consts P :: \"bool\"<br>\n    consts f :: \"'a ⇒ 'a\"</p>\n<p>notepad begin<br>\n      fix a  b :: 'a<br>\n      assume X: \"⋀x :: 'a. f x ≠ a ⟹ f x = x\"<br>\n      have \"f b ≠ a ⟹ f b = b\"<br>\n        apply (simp add: X)<br>\n        apply (subst X) apply simp_all<br>\n        done<br>\n        sorry<br>\n    end</p>\n<p>Here, \"simp add: X\" fails, even though all its premises can be solved by<br>\n\"assumption\" -- or, as the second line shows, by \"simp\". Has anyone got<br>\nan idea why this is the case?</p>\n<p>Looking at the the simp trace, one seees that the simplifier tries<br>\nrecursively to rewrite the premis \"f x ~= a\". This fails ultimately. But<br>\nI would have expected it trying to solve the premis by assumption, then.</p>\n<p>-- Lars 'simp is not simple' Noschinski</p>",
        "id": 294646681,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164389
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;<br>\nHi Lars,</p>\n<p>The rule “X” appears to violate the golden rule of thumb when using “simp”, i.e. that both the rhs and the preconditions should be simpler than the lhs (see Section 2.5.3 of Concrete Semantics). Surely, “f x ~= a” is not simpler than “f x”. That bad things happen then doesn’t surprise me so much…</p>\n<p>Cheers,</p>\n<p>Jasmin</p>",
        "id": 294646719,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164402
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nIt is only simpler insofar as that it is literally part of the<br>\nassumptions. I would not have been surprised if the simplifier had<br>\nstarted looping -- after all, it is not really simpler. But refusal to<br>\nrewrite does not yet fit into my mental model of the simplifier.</p>",
        "id": 294646738,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164408
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nYou are both right. The \"X\" violates the golden rule, and the violation is so <br>\nblatant that the simplifier ignores that rule altogether. It would take a bit of <br>\nwork to emit a warning.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/WY1AmcFDCqncpTXsywlDRYVU/smime.p7s\">smime.p7s</a></p>",
        "id": 294646749,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164416
    }
]