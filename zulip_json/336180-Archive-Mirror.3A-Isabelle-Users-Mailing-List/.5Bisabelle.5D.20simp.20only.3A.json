[
    {
        "content": "<p>From: Gergely Buday &lt;<a href=\"mailto:buday.gergely@uni-eszterhazy.hu\">buday.gergely@uni-eszterhazy.hu</a>&gt;<br>\nHi,</p>\n<p>The Isabelle/Isar Reference Manual says about simp only:</p>\n<p>Implicit solvers remain, which means that trivial rules like reflexivity or</p>\n<p>introduction of True are available to solve the simplified subgoals, but</p>\n<p>also non-trivial tools like linear arithmetic in HOL. The latter may lead</p>\n<p>to some surprise of the meaning of “only” in Isabelle/HOL compared</p>\n<p>to English!</p>\n<p>I guess print_simpset shows the simpset when using simp add:</p>\n<p>Can I somehow print the simpset when using simp only: ?</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294679156,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176070
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Gergely,</p>\n<p>There's no need to print it. \"simp only:\" clears all the simpset, so there are no rewrite <br>\nrules in there, but all the subgoalers and solvers remain as is. If you specify some <br>\nrewrite rules, then these will be the only ones in the simpset. If you want to find out <br>\nhow the simplifier preprocesses theses rules, you can look at the trace with [[simp_trace]].</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 294679307,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176119
    },
    {
        "content": "<p>From: Gergely Buday &lt;<a href=\"mailto:buday.gergely@uni-eszterhazy.hu\">buday.gergely@uni-eszterhazy.hu</a>&gt;<br>\nAndreas Lochbihler wrote:</p>\n<p>Still, I am interested in the standard subgoaler and solver. I have found a section for them at </p>\n<p>9.3.6 Configurable Simplifier strategies</p>\n<p>in the Isabelle/Isar Reference Manual.</p>\n<p>In the source, in HOL/Tools/simpdata.ML there is</p>\n<p>val HOL_basic_ss =<br>\n  empty_simpset @{context}<br>\n  setSSolver safe_solver<br>\n  setSolver unsafe_solver<br>\n  |&gt; Simplifier.set_subgoaler asm_simp_tac<br>\n  |&gt; Simplifier.set_mksimps (mksimps mksimps_pairs)<br>\n  |&gt; Simplifier.set_mkeqTrue mk_eq_True<br>\n  |&gt; Simplifier.set_mkcong mk_meta_cong<br>\n  |&gt; simpset_of;</p>\n<p>is this the basic setup for the simplifier in the HOL object logic?</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294679313,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176125
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Gergely,</p>\n<p>As the subgoalers and solvers are ML code (rather than theorems), one can only print their <br>\nnames. You have to look into the source code to see what they are doing. HOL_basic_ss is <br>\nindeed the basic setup for the simplifier, but later some more solvers are added, e.g. for <br>\nlinear arithmetic. HOL_basic_ss is the simpset that you want to start with in most cases <br>\nwhen you implement your own proof tactic that uses a carefully designed set of simp rules <br>\nwhich should not interact with other constants in the goal.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294679339,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176137
    }
]