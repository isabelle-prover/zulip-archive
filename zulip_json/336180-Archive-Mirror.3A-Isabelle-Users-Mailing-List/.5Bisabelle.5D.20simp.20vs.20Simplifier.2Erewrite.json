[
    {
        "content": "<p>From: Iulia Dragomir &lt;<a href=\"mailto:iulia.dragomir@aalto.fi\">iulia.dragomir@aalto.fi</a>&gt;<br>\nDear all,</p>\n<p>I have a question with respect to the functionalities of<br>\nSimplifier.rewrite versus simp. In the following theory:</p>\n<p>theory Test imports Main<br>\nbegin</p>\n<p>ML{*<br>\nSimplifier.rewrite @{context} @{cterm \"z = (if b then x else y)\"}<br>\n*}</p>\n<p>lemma \"z = (if b then x else y)\"<br>\n  apply simp<br>\n  sorry</p>\n<p>end</p>\n<ul>\n<li>\n<p>Simplifier.rewrite keeps the term intact, i.e. val it = \"z = (if b<br>\nthen x else y) ≡ z = (if b then x else y)\": thm</p>\n</li>\n<li>\n<p>whereas simp reduces z to (b ⟶ z = x) ∧ (¬ b ⟶ z = y).</p>\n</li>\n</ul>\n<p>It seems that simp is more powerful than Simplifier.<br>\nNow, how can the same behavior as for simp be achieved through<br>\nSimplifier? Are there certain theorems that need to be added when using<br>\nML code for simplification?</p>\n<p>Thanks.</p>\n<p>Best regards,<br>\nIulia Dragomir</p>",
        "id": 294645382,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163844
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:thomas.sewell@nicta.com.au\">thomas.sewell@nicta.com.au</a>&gt;<br>\nThere's a few components to the simplifier, and its various incarnations<br>\nenable different ones.</p>\n<p>The feature you've seen here is called the splitter. It can be run<br>\nindependently via</p>\n<p>apply (split split_if)</p>\n<p>or</p>\n<p>apply (tactic {* Splitter.split_tac @{context} [@{thm split_if}] 1 *})</p>\n<p>The simplifier uses the splitter after normal simplification when it is<br>\nin \"tactic\" form (apply simp or Simplifier.simp_tac) and never uses it<br>\nwhen it is in \"forward\" form (Simplifier.rewrite or thm<br>\nfoo[simplified]). There might be ways to change this or work around it.</p>\n<p>Cheers,<br>\n     Thomas.</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294648651,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165187
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nFor an overview of the components, one can look at the latter sections<br>\nof chapter 9.3 in the isar-ref manual.</p>",
        "id": 294648677,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165197
    }
]