[
    {
        "content": "<p>From: Tao Ma &lt;<a href=\"mailto:separable@gmail.com\">separable@gmail.com</a>&gt;<br>\nhi,<br>\nhow i can make it (like adding a rule to simp set?) so that the following<br>\nlemma<br>\n(x | xy in a ring) can be proved by one of the prover(blast, auto, etc)?<br>\nthanks<br>\ntao</p>\n<p>constdefs (structure R)<br>\n  dvd1 :: \"('a, 'm) ring_scheme =&gt; 'a =&gt; 'a =&gt; bool\"<br>\n  \"dvd1 R x y == (\\&lt;exists&gt; z. z \\&lt;in&gt; carrier R &amp; y = x \\&lt;otimes&gt; z)\"</p>\n<p>lemma (in \"domain\") x_dvd_xy: includes \"domain\" R<br>\n assumes xr: \"x \\&lt;in&gt; carrier R\"<br>\n and yr:  \"y \\&lt;in&gt; carrier R\"<br>\n shows \"dvd1 R x (x \\&lt;otimes&gt; y)\"<br>\nproof -<br>\n  from xr and yr have \"\\&lt;exists&gt; z. z \\&lt;in&gt; carrier R &amp; (x \\&lt;otimes&gt; y = x<br>\n\\&lt;otimes&gt; z)\" by blast<br>\n  from this show ?thesis by (unfold dvd1_def)<br>\nqed</p>",
        "id": 294044686,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816819
    },
    {
        "content": "<p>From: Clemens Ballarin &lt;<a href=\"mailto:ballarin@in.tum.de\">ballarin@in.tum.de</a>&gt;<br>\nDear Tao Ma,</p>\n<p>blast is usually quite good at proving simple lemmas on divisibility, <br>\nafter unfolding the definition, of course.  Here's a more concise <br>\nversion of your proof:</p>\n<p>lemma (in \"domain\")<br>\n   assumes xr: \"x \\&lt;in&gt; carrier R\"<br>\n   and yr:  \"y \\&lt;in&gt; carrier R\"<br>\n   shows \"dvd1 R x (x \\&lt;otimes&gt; y)\"<br>\nusing xr and yr<br>\nby (unfold dvd1_def) blast</p>\n<p>Clemens</p>",
        "id": 294044748,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816843
    },
    {
        "content": "<p>From: Tao Ma &lt;<a href=\"mailto:separable@gmail.com\">separable@gmail.com</a>&gt;<br>\nhi, Clemens<br>\nthank you!<br>\nif i need to use this definition a lot, is it possible to modify the prover <br>\nso that it will<br>\ndo the unfold automatically?<br>\nanother question is, if in this example suppose first i try \"by blast\" and<br>\nit says \"empty result sequence\", how can i know that i need to add<br>\n(unfold dvd1_def). is there a way to make the error message more meaningful?<br>\nbasically what i would like to know is how far the automatic prover has <br>\nreached so<br>\nthat i can add what's missing.<br>\nthanks<br>\ntao</p>",
        "id": 294044789,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816858
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>if i need to use this definition a lot, is it possible to modify the <br>\nprover so that it will<br>\ndo the unfold automatically?</p>\n</blockquote>\n<p>You can tell the simplifier to use it every time by saying</p>\n<p>declare dvd1_def [simp]</p>\n<p>(and later [simp del] if you no longer want it) but blast does no <br>\nequational reasoning and does not know about [simp].</p>\n<blockquote>\n<p>another question is, if in this example suppose first i try \"by blast\" and<br>\nit says \"empty result sequence\", how can i know that i need to add<br>\n(unfold dvd1_def). is there a way to make the error message more <br>\nmeaningful?<br>\nbasically what i would like to know is how far the automatic prover has <br>\nreached so<br>\nthat i can add what's missing.</p>\n</blockquote>\n<p>Unfortunately that is an open research problem and one of the advantages <br>\nof the simplifier: it doens't just give up silently but leaves with the <br>\nrest.</p>\n<p>Tobias</p>",
        "id": 294044809,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816864
    },
    {
        "content": "<p>From: Clemens Ballarin &lt;<a href=\"mailto:ballarin@in.tum.de\">ballarin@in.tum.de</a>&gt;<br>\nDear Tao,</p>\n<blockquote>\n<p>if i need to use this definition a lot, is it possible to modify the <br>\nprover so that it will do the unfold automatically?</p>\n</blockquote>\n<p>Well, blast is not particularly good at unfolding definitions.  You <br>\nmight use auto, clarsimp and fastsimp which are combinations of <br>\nsimplifier and classical reasoner.  In your case, you might do<br>\n   declare dvd1_def [simp]<br>\nto add the theorem to the simpset.  Note, however, that auto implements <br>\na different prover than blast, and it might not be as effective as the <br>\nunfold/blast combination.</p>\n<p>I would, however, advise against adding the definition to the simpset.  <br>\nThe effect is that definitions are unfolded all the time, and proof <br>\nstates become big, which in turn confuses automatic methods.  The more <br>\ndisciplined approach is to prove suitable lemmas and make these <br>\nintroduction, elimination and simplification rules by adding these to <br>\nthe classical and simpsets.  I admit that this is very much a craft, <br>\nand coming up with the right lemmas is may require some experimenting.</p>\n<blockquote>\n<p>another question is, if in this example suppose first i try \"by blast\" <br>\nand<br>\nit says \"empty result sequence\", how can i know that i need to add<br>\n(unfold dvd1_def). is there a way to make the error message more <br>\nmeaningful?</p>\n</blockquote>\n<p>You can use \"apply &lt;method&gt;\" to see the subgoal left behind by <br>\n&lt;method&gt;.  This doesn't work with blast, because blast fails if it <br>\ndoesn't solve the goal.  Other methods of the classical reasoner tell <br>\nyou how far the prover has reached.  These are clarify and the <br>\ncombinations clarsimp and auto.</p>\n<p>Clemens</p>",
        "id": 294044823,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816871
    }
]