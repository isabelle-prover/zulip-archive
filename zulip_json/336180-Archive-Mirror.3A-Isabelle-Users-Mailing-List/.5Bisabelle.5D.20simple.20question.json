[
    {
        "content": "<p>From: lucas cavalcante &lt;<a href=\"mailto:thesupervisar@gmail.com\">thesupervisar@gmail.com</a>&gt;<br>\nHello all,</p>\n<p>The function 'f' (above) does not work, returning the fallowing message.<br>\nI'd like to know what's wrong in this definition.</p>\n<p>typedecl sbf</p>\n<p>datatype frm = At sbf | Nt frm</p>\n<p>consts<br>\n  f :: \"frm =&gt; frm\"<br>\n  primrec<br>\n    \"f (At x) = At x\"<br>\n    \"f (Nt x) = Nt(x)\"<br>\n    \"f (Nt(Nt x)) = f (x)\"</p>\n<p>*** Primrec definition error:<br>\n*** illegal argument in pattern<br>\n*** in<br>\n*** \"f (Nt (Nt x)) = f x\"<br>\n*** At command \"primrec\".</p>\n<p>Thank you,<br>\nLucas Cavalcante</p>",
        "id": 294050738,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819342
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nPrimrec does not support nested patterns (\"Nt (Nt x)\"). Rewrite your<br>\ndefinition or use recdef. Also note that the third pattern is an<br>\ninstance of the second one, so (if you think of f as a functional<br>\nprogram like in ML), the third equation will never be used...</p>\n<p>Alex</p>",
        "id": 294051022,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819476
    },
    {
        "content": "<p>From: George Karabotsos &lt;<a href=\"mailto:g_karab@cs.concordia.ca\">g_karab@cs.concordia.ca</a>&gt;<br>\nHi Lucas,</p>\n<p>I am not sure what you are trying to do but I think you have to rethink <br>\nthe definition of your datatype.</p>\n<p>I took the liberty to modify it a bit and here is an alternative definition:</p>\n<p>datatype frm = At sbf | Nt frm | Nts frm;</p>\n<p>consts<br>\n  f :: \"frm =&gt;  frm\"<br>\nprimrec<br>\n  \"f (At x)  = At x\"<br>\n  \"f (Nt x)  = Nt x\"<br>\n  \"f (Nts x) = f x\"</p>\n<p>I hope it helps.</p>\n<p>George</p>\n<p>lucas cavalcante wrote:</p>",
        "id": 294051175,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819544
    },
    {
        "content": "<p>From: John Ridgway &lt;<a href=\"mailto:john@jacelridge.com\">john@jacelridge.com</a>&gt;<br>\nThere are several issues here.  The first is that f(Nt(Nt x)) is  <br>\nillegal.  According to the book \"Isabelle's Logics: HOL\" available on  <br>\nthe Isabelle site:<br>\n   \"reduction rules specify one or more equations of the form:<br>\n      f x1 ... xm (C y1...yk) z1...zn = r<br>\n    such that C is a constructor of the datatype, r contains only the  <br>\nfree variables on the left-hand<br>\n   side, and all the recursive calls in r are of the from f ...  <br>\nyi ... for some i.\"  (page 44 in my copy at<br>\n   least).</p>\n<p>f (Nt (Nt x)) does not match this form since the inner use of \"(Nt  <br>\nx)\" is not a variable.  The rule is that you can only \"peel off\" one  <br>\nlevel of constructor at a time.</p>\n<p>The second issue is that your third clause would never get invoked,  <br>\nsince the second would cover it anyway.</p>\n<p>Peace</p>\n<ul>\n<li>John</li>\n</ul>",
        "id": 294051350,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819612
    }
]