[
    {
        "content": "<p>From: Walther Neuper &lt;<a href=\"mailto:wneuper@ist.tugraz.at\">wneuper@ist.tugraz.at</a>&gt;<br>\nworking through Lars Hupel's paper [1] I run into a newbie's question:</p>\n<p>lemma \"(a::rat) &lt; b ⟹ 0 &lt; b ⟹ 0 &lt; c ⟹ 0 &lt; (c + c)/(b - a)\"<br>\n     by simp</p>\n<p>works, but I cannot do that with more general types:</p>\n<p>lemma \"(a::'a::{zero,ord,plus,minus,inverse}) &lt; b ⟹<br>\n         0 &lt; b ⟹ 0 &lt; c ⟹ 0 &lt; (c + c)/(b - a)\"<br>\n     by ???</p>\n<p>How is the latter done, or: why I am wrong?</p>\n<p>Walther</p>\n<p>[1] <a href=\"https://www21.in.tum.de/~hupel/pub/simp-trace.pdf\">https://www21.in.tum.de/~hupel/pub/simp-trace.pdf</a></p>",
        "id": 294329798,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929845
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nYour second lemma is just not true: the classes zero,ord,plus,minus,inverse <br>\nmerely require the existence of 0,&lt;,etc but impose no axioms on them. That's why <br>\nIsabelle tells you</p>\n<p>Auto Quickcheck found a counterexample</p>\n<p>and that's why no rewrite rules apply.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/jJ7fXl076LZLWYpOf1JF07HX/smime.p7s\">smime.p7s</a></p>",
        "id": 294329816,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929851
    },
    {
        "content": "<p>From: Walther Neuper &lt;<a href=\"mailto:wneuper@ist.tugraz.at\">wneuper@ist.tugraz.at</a>&gt;<br>\nthank you for help !</p>\n<blockquote>\n<blockquote>\n<p>working through Lars Hupel's paper [1] I run into a newbie's question:</p>\n<p>lemma \"(a::rat) &lt; b ⟹ 0 &lt; b ⟹ 0 &lt; c ⟹ 0 &lt; (c + c)/(b - a)\"<br>\n     by simp</p>\n<p>works, but I cannot do that with more general types:</p>\n<p>lemma \"(a::'a::{zero,ord,plus,minus,inverse}) &lt; b ⟹<br>\n         0 &lt; b ⟹ 0 &lt; c ⟹ 0 &lt; (c + c)/(b - a)\"<br>\n     by ???</p>\n<p>Your second lemma is just not true: the classes <br>\nzero,ord,plus,minus,inverse merely require the existence of 0,&lt;,etc <br>\nbut impose no axioms on them. </p>\n</blockquote>\n</blockquote>\n<p>More questions from playing with the wounderful simp_trace_new:</p>\n<h1>Some theorems found in the trace are known in the context, eg.</h1>\n<p>thm Fields.field_class.add_frac_eq<br>\n    but some are not known (theory imports Complex_Main), e.g<br>\n         thm Num.mult_1s_2<br>\n         thm Divides.add_0s_1<br>\n    Why is that ?</p>\n<h1>What is the best way to find out, what sequence of rule applications</h1>\n<p>forced the simplifier into<br>\nc + c = Numeral1 / Numeral1 * (c / 1) + (Numeral1 / Numeral1 * (c / 1) + 0)<br>\n    as shown in the attachment ?</p>\n<p>Thanks,<br>\nWalther</p>\n<blockquote>\n<blockquote>\n<p>[1] <a href=\"https://www21.in.tum.de/~hupel/pub/simp-trace.pdf\">https://www21.in.tum.de/~hupel/pub/simp-trace.pdf</a><br>\n<a href=\"/user_uploads/14278/o43FMVFO1XAPjS7AGDDSz3wy/Screenshot-trace-1.png\">Screenshot-trace-1.png</a></p>\n</blockquote>\n</blockquote>",
        "id": 294330027,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929931
    },
    {
        "content": "<p>From: Walther Neuper &lt;<a href=\"mailto:wneuper@ist.tugraz.at\">wneuper@ist.tugraz.at</a>&gt;<br>\njust another question: given ...</p>\n<p>... is there a way to get a trace convincing novices that<br>\nexecution of functional programs is actually rewriting ?</p>\n<p>Walther</p>",
        "id": 294330090,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929950
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<h1>Some theorems found in the trace are known in the context, eg.</h1>\n<p>thm Fields.field_class.add_frac_eq<br>\n   but some are not known (theory imports Complex_Main), e.g<br>\n        thm Num.mult_1s_2<br>\n        thm Divides.add_0s_1<br>\n   Why is that ?</p>\n</blockquote>\n<p>The theorem names printed by the simp trace are not always \"authentic\".<br>\nMy best guess here is that the above should be</p>\n<p>thm Num.mult_1s(2)<br>\n  thm Divides.add_0s(1)</p>\n<blockquote>\n<h1>What is the best way to find out, what sequence of rule applications</h1>\n<p>forced the simplifier into<br>\nc + c = Numeral1 / Numeral1 * (c / 1) + (Numeral1 / Numeral1 * (c / 1) + 0)<br>\n   as shown in the attachment ?</p>\n</blockquote>\n<p>I can't answer that question. Apparently, the \"classic\" simplifier trace<br>\ndoesn't now either.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294330728,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660930157
    }
]