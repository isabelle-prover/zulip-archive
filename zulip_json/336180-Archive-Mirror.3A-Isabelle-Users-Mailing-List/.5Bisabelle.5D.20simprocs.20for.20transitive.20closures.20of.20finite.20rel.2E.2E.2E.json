[
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear all,</p>\n<p>as part of an answer to a question on Stackoverflow</p>\n<p><a href=\"http://stackoverflow.com/questions/25622999/calculating-transitive-closures\">http://stackoverflow.com/questions/25622999/calculating-transitive-closures</a></p>\n<p>I wrote my first simproc</p>\n<p><a href=\"http://afp.sourceforge.net/browser_info/devel/AFP/Transitive-Closure/Finite_Transitive_Closure_Simprocs.html\">http://afp.sourceforge.net/browser_info/devel/AFP/Transitive-Closure/Finite_Transitive_Closure_Simprocs.html</a></p>\n<p>I would be grateful for any comments by seasoned simproc writers.</p>\n<p>And a more general question: Are methods (tactics, simprocs, ...) that <br>\nuse \"eval\" in some way or another to be avoided? (I can't quite recall <br>\nwhether \"regexp\" relies on \"eval\".)</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294308832,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925159
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nFrom my point of view, proof devices should never rely on the<br>\n(accidental) code setup at the time of their actual invocation but use a<br>\nfixed setup as present at their time of creation (»static evaluation«).<br>\n The tutorial on code generation gives some further hints.</p>\n<p>The other question is indeed how much you want your proof procedure be<br>\nhardwired against code generation.  I have no strict answer.  NBE could<br>\nbe an alternative to allow free variables also.  The simplifier would<br>\neven be LCF-style.  Depends on the kind and size of problems you want to<br>\nsolve.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/Sy1CxNcHUOLjOBwO_bu8YB7p/signature.asc\">signature.asc</a></p>",
        "id": 294309340,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925331
    }
]