[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nI just tried the new simps_of_case conversion procedure, and so far, it works great except <br>\nfor one thing: it does not preserve the names of variables that are bound in the cases, <br>\nbut invents new ones. And therefore, I would like to ask for a new feature, namely that it <br>\npreserves them as far as possible. Here's an example:</p>\n<p>datatype foo = Foo nat nat | Bar int<br>\ndefinition foo :: \"foo =&gt; foo\" where<br>\n  \"foo y = (case y of Foo n m =&gt; Bar (int n - int m) | Bar y =&gt; Foo (nat y) 0)\"<br>\nsimps_of_case foo_simps: foo_def</p>\n<p>Now, foo.simps is the following:</p>\n<p>\"foo (Foo xa x) = Bar (int xa - int x)\"<br>\n   \"foo (Bar x) = Foo (nat x) 0\"</p>\n<p>Here, n and m have been replaced by xa and x (but n and m are equally fresh) and the y by <br>\nx (y occured in the original theorem, but not in the final, so y could be resued too). I <br>\nwould prefer if the names of the bound variables can be preserves, i.e.,:</p>\n<p>\"foo (Foo n m) = Bar (int n - in m)\"<br>\n   \"foo (Bar y) = Bar (nat y) 0\"</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294257221,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912998
    }
]