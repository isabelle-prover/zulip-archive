[
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nHello,</p>\n<p>I want to make a bunch of definitions using a fairly large context, and then turn those definitions into a function of one of the parameters for use in later definitions/lemmas.</p>\n<p>Here is a sketch of what I've tried:</p>\n<p>(*</p>\n<p>Attempt to simulate lambda abstraction at the locale level.</p>\n<p>Locale L is a large context. Locale A just adds a fixed-but-arbitrary<br>\nparameter 'a' to it, then a series of definitions are made using 'a' and L,<br>\nand a lemma or two shown.</p>\n<p>We later want to use the lemmas of A in the context of L for arbitrary<br>\nvalues of 'a'. The complication is we want 'a' to be lambda-abstractable<br>\nin later terms.</p>\n<p>We need the \"for\" clause in A otherwise the type variables are renamed.</p>\n<p>*)</p>\n<p>theory t<br>\nimports Main<br>\nbegin</p>\n<p>locale L =<br>\n  fixes x :: \"'a\"<br>\n    and X :: \"'a set\"<br>\n  assumes x: \"x ∈ X\"</p>\n<p>print_locale L</p>\n<p>lemma (in L) P: \"x ∈ X ⟹ P x\"<br>\n  sorry</p>\n<p>locale A = L x X for x and X :: \"'a set\" +<br>\n  fixes a :: \"'a\"</p>\n<p>print_locale A</p>\n<p>definition (in A)<br>\n  \"f y ≡ {a}\"</p>\n<p>definition (in A)<br>\n  \"g y ≡ X - {a}\"</p>\n<p>lemma (in A) Q: \"Q (f y) (g y) x ⟹ x ∈ X\"<br>\n  sorry</p>\n<p>(* Propagate def's and Q and into locale L. Trivial as A has no axioms. *)</p>\n<p>sublocale L ⊆ A by (unfold_locales)</p>\n<p>print_locale! A<br>\nprint_locale! L</p>\n<p>(* How do we give 'a' a value here? *)</p>\n<p>lemma (in L) \"(λy. Q (f y) (g y) x) 1 ⟹ P x\"<br>\nproof -<br>\n  from Q have \"⋀y. Q (f y) (g y) x\"<br>\n    unfolding f_def g_def<br>\n      (* wheels have fallen off *)</p>\n<p>I have a feeling I'm doing it wrong. I could do this at the term level, but it gets unreadable quite quickly.</p>\n<p>BTW I saw Brian Huffman's post:</p>\n<p><a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2008-June/msg00045.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2008-June/msg00045.html</a></p>\n<p>that looked like it might be a step towards solving my problem. The ML code has rotted wrt Isabelle-2009-1, and the implementation manual has a big FIXME for the section on attributes. Any chance of a pointer or fix?</p>\n<p>cheers<br>\npeter</p>",
        "id": 294097490,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660832752
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Peter,</p>\n<blockquote>\n<p>sublocale L ⊆ A by (unfold_locales)</p>\n</blockquote>\n<p>if you want to instantiate the 'a' parameter in locale 'A', this is your<br>\n\"only chance\", e.g.</p>\n<p>sublocale L ⊆ A x X x</p>\n<p>Then you also should add a namespace prefix, e.g.</p>\n<p>sublocale L ⊆ A: A x X x</p>\n<p>If this is not what you intend to do, do not hesitate to ask further<br>\nquestions with some hints what you plan to model.  Locales are a<br>\npowerful abstraction mechanisms, but their application sometimes<br>\nrequires some care and inadvertently comes with some restrictions.</p>\n<p>Hope this helps<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/cuK7R-ChdqAGXDId9GNGqAxp/signature.asc\">signature.asc</a></p>",
        "id": 294097498,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660832756
    },
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nFlorian:</p>\n<p>Thanks for your comments.</p>\n<p>I came to understand that I was asking for too much: at the very least, Isabelle has no syntax for (lambda-) abstracting a free variable from several definitions (like what happens in the example I posted).</p>\n<p>So I gave up on these locales and went back to the tried and true record + predicate approach. I'm not so happy with that as I lose the syntactic niceties (e.g. a pleasant introduction mechanism) but it is not so bad.</p>\n<p>cheers<br>\npeter</p>",
        "id": 294097580,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660832772
    }
]