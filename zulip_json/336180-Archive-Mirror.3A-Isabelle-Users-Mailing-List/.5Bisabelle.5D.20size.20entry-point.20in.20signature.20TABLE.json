[
    {
        "content": "<p>From: Michael Norrish &lt;<a href=\"mailto:Michael.Norrish@nicta.com.au\">Michael.Norrish@nicta.com.au</a>&gt;<br>\nWow.  That’s a fascinating number.  Note of course that the obvious way to store table sizes would not affect sharing of substructure.</p>\n<p>Michael</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294639079,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161330
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 7 May 2015, Michael Norrish wrote:</p>\n<blockquote>\n<blockquote>\n<p>On 7 May 2015, at 19:23, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n</blockquote>\n<p>On Thu, 7 May 2015, Michael Norrish wrote:</p>\n<blockquote>\n<blockquote>\n<p>125000 live tables in memory.  Tables can get big (motivating the <br>\ndesire to avoid O(n) operations), but I’d be surprised if a running <br>\nIsabelle really had that many tables around.</p>\n</blockquote>\n<p>My guess is that we normally have millions of live tables around, and <br>\nit is important that their substructure is sharable as much as <br>\npossible.</p>\n</blockquote>\n<p>Wow.  That’s a fascinating number.</p>\n</blockquote>\n<p>It only gives a hint about the order of data in the main context <br>\ncontainers. Symtab.table and variants are almost as pervasively used as <br>\nplain List.list; e.g. a graph uses that for its adjacency relation.</p>\n<p>This all works well and nicely, because the 2-3 tree data structure is a <br>\nbit better than the more commonly known read-black tree.  In the Scala <br>\nlibrary they have the latter, and it causes so many problems that are <br>\nabsent in our fine ML world.</p>\n<blockquote>\n<p>Note of course that the obvious way to store table sizes would not <br>\naffect sharing of substructure.</p>\n</blockquote>\n<p>It is still a waste of resources: heap space and (equally important) <br>\nsource space in the implementation.  The size is not needed for the data <br>\nstructure, so why should it be stored.</p>\n<p>Makarius</p>",
        "id": 294639172,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161360
    },
    {
        "content": "<p>From: Michael Norrish &lt;<a href=\"mailto:Michael.Norrish@nicta.com.au\">Michael.Norrish@nicta.com.au</a>&gt;<br>\nIs there any chance the signature TABLE (from src/Pure/General/table.ML) could be extended to support a constant time</p>\n<p>size : 'a table -&gt; int</p>\n<p>operation?  At the moment, it seems as if I have to calculate this “by hand” (perhaps with fold), and with O(n) complexity.</p>\n<p>Michael</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294642564,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162740
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis is indeed the canonical way to do it:</p>\n<p>fun size tab = Symtab.fold (fn _ =&gt; fn n =&gt; n + 1) tab 0</p>\n<p>The canonical fold combinator for this (and other data structures) <br>\nsubsumes many applications, without having to saturate signatures <br>\nunnecessarily.  The above size definition could be added (probly under the <br>\nname \"lentgh\"), but in practice it is hardly ever needed, and canonical <br>\nfold expressions work well.</p>\n<p>Of course that operation is linear in the size, just like List.length. The <br>\nreasons for not storing local sizes in the data structure for constant <br>\nsize operations are the same as for lists: extra redundancy that needs to <br>\nbe maintained at run-time and requires more space in memory.</p>\n<p>Our Table implementation is almost as fundamental as List.  It is at the <br>\nbottom of large-scale data management.  Any change down there will impact <br>\nalmost everything, and many people will have to get 32 GB machines at <br>\nlast.</p>\n<p>If you need an augmented version of Table, you can look at these examples<br>\nhow it is done:</p>\n<p>~~/src/Pure/General/change_table.ML<br>\n   ~~/src/Pure/General/graph.ML</p>\n<p>Makarius</p>",
        "id": 294642671,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162777
    },
    {
        "content": "<p>From: Michael Norrish &lt;<a href=\"mailto:Michael.Norrish@nicta.com.au\">Michael.Norrish@nicta.com.au</a>&gt;<br>\nI appreciate the desire not to meddle with something fundamental, but I don’t think the concern about wasted space is justified.  Assuming an extra int is going to take 8 bytes to store, in order to waste even 1MB (which is in turn just 1/16000th of a 16GB machine), you’d have to have 125000 live tables in memory.  Tables can get big (motivating the desire to avoid O(n) operations), but I’d be surprised if a running Isabelle really had that many tables around.</p>\n<p>Thanks for the pointers to the extended table examples.</p>\n<p>Michael</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294643037,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162924
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nMy guess is that we normally have millions of live tables around, and it <br>\nis important that their substructure is sharable as much as possible.</p>\n<p>2-3 years ago when I made some measurements about the number of persistent <br>\ntheory values, it was about 0.5 million for big applications. The number <br>\nof theory data slots is at the order of 100. This may sound insane, but we <br>\nhave quite successfully violated old schemes to poke around destructively <br>\nin mutable global storage.</p>\n<p>I need to revisit this once again soon, to see if we can extend the 32bit <br>\nage a bit further.  Many users today have small mobile devices instead of <br>\nproper workstations.  So the question will again be what can be taken <br>\naway, rather than added at the very bottom.</p>\n<p>Makarius</p>",
        "id": 294643107,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162948
    }
]