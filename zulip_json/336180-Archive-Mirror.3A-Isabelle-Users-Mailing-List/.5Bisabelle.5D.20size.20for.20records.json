[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear list,</p>\n<p>I'm having a lot of troubles with records right now. They're not BNFs,<br>\nbut luckily there's the \"copy_bnf\" command. Unfortunately, it seems this<br>\ndoesn't generate a size function (at least I don't see it). Is it<br>\npossible to transfer the size function from the original BNF? Because<br>\nwithout size function, nested recursion through the record becomes tricky.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294714882,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183437
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi Jasmin,</p>\n<blockquote>\n<p>To quote from the docs: \"For each datatype t, the size plugin generates a generic size function t.size_t as well as a specific instance size :: t ⇒ nat belonging to the size type class.\"</p>\n<p>The key word is \"datatype\". In general, a BNF is not a datatype.</p>\n</blockquote>\n<p>yeah, right. I guess the general problem is that records are<br>\ninsufficiently like datatypes. But rebasing their construction on top of<br>\nnew datatypes would be a significant effort.</p>\n<blockquote>\n<p>I would presume that this should be an easy task for the Lifting package. Otherwise, you should be able to define the size function manually without too much effort.</p>\n</blockquote>\n<p>Sure, and I just went down that route (manually). But I thought I might<br>\nask if someone has done anything similar :-)</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294714963,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183461
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@inf.ethz.ch\">traytel@inf.ethz.ch</a>&gt;<br>\nHi Lars,</p>\n<blockquote>\n<p>On 11 Aug 2017, at 14:15, Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>To quote from the docs: \"For each datatype t, the size plugin generates a generic size function t.size_t as well as a specific instance size :: t ⇒ nat belonging to the size type class.\"</p>\n<p>The key word is \"datatype\". In general, a BNF is not a datatype.</p>\n</blockquote>\n<p>yeah, right. I guess the general problem is that records are<br>\ninsufficiently like datatypes. But rebasing their construction on top of<br>\nnew datatypes would be a significant effort.</p>\n</blockquote>\n<p>not only that: the record construction is much more efficient than the datatype one. So, basing record on datatype would make the seL4 people with their huge records quite unhappy.</p>\n<blockquote>\n<blockquote>\n<p>I would presume that this should be an easy task for the Lifting package. Otherwise, you should be able to define the size function manually without too much effort.</p>\n</blockquote>\n<p>Sure, and I just went down that route (manually). But I thought I might<br>\nask if someone has done anything similar :-)</p>\n</blockquote>\n<p>Ideally, there should be a plugin infrastructure and a size plugin for records. (Oh, and record should be localized. :) ) But since the workaround of a manual definition is so easy, it is hard to find a volunteer to do this.</p>\n<p>Dmitriy</p>",
        "id": 294715001,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183474
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>not only that: the record construction is much more efficient than the datatype one. So, basing record on datatype would make the seL4 people with their huge records quite unhappy.</p>\n</blockquote>\n<p>I'm aware of that, but didn't know that the difference is that large.</p>\n<blockquote>\n<p>Ideally, there should be a plugin infrastructure and a size plugin for records. (Oh, and record should be localized. :) ) But since the workaround of a manual definition is so easy, it is hard to find a volunteer to do this.</p>\n</blockquote>\n<p>A good starting point could be to decouple record syntax from record<br>\ndefinitions. There's no reason why</p>\n<p>datatype foo = Bar (x: nat) (y: nat)</p>\n<p>couldn't be treated as a record, including update functions. I'm already<br>\nworking on a plugin that produces \"*_update\" functions (this allows for<br>\nrecord update syntax, albeit not construction syntax). The next step<br>\nwould be to patch Lem to use this instead of records.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294715013,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183480
    }
]