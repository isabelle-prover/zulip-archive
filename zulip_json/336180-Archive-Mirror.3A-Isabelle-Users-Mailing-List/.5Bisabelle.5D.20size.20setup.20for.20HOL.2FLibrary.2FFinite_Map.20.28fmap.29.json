[
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nDear BNF experts,</p>\n<p>The <code>size</code> function for <code>fmap</code> in HOL/Library/Finite_Map in Isabelle2016-1 seems sub-optimal: it appears to ignore the sizes of the things in the map.</p>\n<p>I tried implementing this using the approach taken in FSet and Multiset, but the <code>fmap</code> constructor is binary and I’m not sure what shape the theorems should be (specifically the final one that composes size functions somehow).</p>\n<p>Thanks!</p>\n<p>cheers,<br>\npeter</p>",
        "id": 294714852,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183427
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Pete,</p>\n<p>You need a function size_fmap that takes a size function for every type argument, even the <br>\ndead ones. So it should have the type</p>\n<p>('a =&gt; nat) =&gt; ('b =&gt; nat) =&gt; ('a, 'b) fmap =&gt; nat</p>\n<p>Typically, the instantiation for the type class then puts \"%_. 0\" for the arguments.</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 294714862,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183431
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nThis is an oversight – I'll try to add this to the theory over the next<br>\ncouple of days.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294714904,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183443
    },
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nGreat, thanks!</p>\n<p>cheers,<br>\npeter</p>",
        "id": 294714923,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183449
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>This is an oversight – I'll try to add this to the theory over the next<br>\ncouple of days.</p>\n</blockquote>\n<p>See now &lt;<a href=\"http://isabelle.in.tum.de/repos/isabelle/rev/4d2ce596f505\">http://isabelle.in.tum.de/repos/isabelle/rev/4d2ce596f505</a>&gt;.</p>\n<p>Peter, please try it out and tell me if it works for you.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294714987,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183468
    },
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nLars, Andreas:</p>\n<p>Thanks Lars. I backported it to Isabelle2016-1 and indeed my termination proof now goes through.</p>\n<p>Another question for you and Andreas: what is the substantive difference in intent between Finite_Map and FinFun? I used Finite_Map as I needed the BNF setup, but I reached for FinFun first as I knew it was there. In the fullness of time, could they perhaps be merged?</p>\n<p>And another, but perhaps more directly for the BNF people: I’ve been tripped up on products uniformly having a constant size a few times now. Here’s a quick theorem search:</p>\n<p>Basic_BNF_LFPs.prod.size(2): size (?x1.0, ?x2.0) = Suc 0</p>\n<p>Could it too be made more useful by returning the sum of the sizes of its arguments?</p>\n<p>(These arose in termination arguments, and the fun package seems to avoid using size on products. I wonder if such a change would impact it.)</p>\n<p>cheers,<br>\npeter</p>\n<p>—<br>\n<a href=\"http://peteg.org/\">http://peteg.org/</a></p>",
        "id": 294715034,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183487
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>Another question for you and Andreas: what is the substantive difference in intent between Finite_Map and FinFun? I used Finite_Map as I needed the BNF setup, but I reached for FinFun first as I knew it was there. In the fullness of time, could they perhaps be merged?</p>\n</blockquote>\n<p>Here's a mailing list thread on that issue:<br>\n&lt;<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2016-September/msg00015.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2016-September/msg00015.html</a>&gt;.</p>\n<blockquote>\n<p>And another, but perhaps more directly for the BNF people: I’ve been tripped up on products uniformly having a constant size a few times now. Here’s a quick theorem search:</p>\n<p>Basic_BNF_LFPs.prod.size(2): size (?x1.0, ?x2.0) = Suc 0</p>\n<p>Could it too be made more useful by returning the sum of the sizes of its arguments?</p>\n</blockquote>\n<p>There is such a function: \"size_prod\". However, you have to tell the<br>\nfunction package about it.</p>\n<blockquote>\n<p>(These arose in termination arguments, and the fun package seems to avoid using size on products. I wonder if such a change would impact it.)</p>\n</blockquote>\n<p>Here's a contrived example:</p>\n<p>fun contrived :: \"('a list × 'a list) ⇒ ('a list × 'a list)\" where<br>\n\"contrived (xs, y1 # y2 # ys) = contrived (y1 # xs, ys)\" |<br>\n\"contrived (x1 # x2 # xs, ys) = contrived (xs, x1 # ys)\" |<br>\n\"contrived _ = ([], [])\"</p>\n<p>By default, the function package won't be able to derive a termination<br>\nmeasure for this. But you can add the following before the definition:</p>\n<p>lemma [measure_function]: \"is_measure (size_prod size size)\"<br>\nby (rule is_measure.intros)</p>\n<p>There's probably a good reason why this doesn't happen by default.<br>\n(Possibly time complexity of the termination prover.) If this thing<br>\nkeeps happening to you (or you need nesting), try this:</p>\n<p>lemma [measure_function]: \"is_measure f ⟹ is_measure g ⟹ is_measure<br>\n(size_prod f g)\"<br>\nby (rule is_measure.intros)</p>\n<p>This might mess up things elsewhere though, so try it at your own risk.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294715088,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183505
    },
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nLars,</p>\n<p>Thanks for the pointers. I don’t recall seeing the stuff you mentioned about [measure_function] being mentioned in the <code>functions</code> manual; perhaps it could be added?</p>\n<p>cheers,<br>\npeter</p>",
        "id": 294715109,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183511
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>Thanks for the pointers. I don’t recall seeing the stuff you mentioned about [measure_function] being mentioned in the <code>functions</code> manual; perhaps it could be added?</p>\n</blockquote>\n<p>Possibly. Though I'll have to defer to someone who actually understands<br>\nthe implications of declaring [measure_functions], in particular the<br>\nparametrized variants.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294715124,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183517
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI learned about</p>\n<p>lemma [measure_function]: \"is_measure f ⟹ is_measure g ⟹ is_measure (size_prod f g)\"<br>\nby (rule is_measure.intros)</p>\n<p>from Peter Lammich who probably uses it more often. He may have some insight as <br>\nto the dangers of using this by default.</p>\n<p>Not that the recursive function need not be tupled for this to help because <br>\ninternally the arguments are tupled anyway.</p>\n<p>It would indeed be nice if this were mention in the \"function manual\". In case <br>\nsomebody feel sufficiently au fait with this feature ...</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/WuasevzjoeeOCIJFyApCiXMh/smime.p7s\">smime.p7s</a></p>",
        "id": 294715196,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183530
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nOn Di, 2017-08-15 at 12:14 +0200, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>I learned about</p>\n<p>lemma [measure_function]: \"is_measure f ⟹ is_measure g ⟹ is_measure<br>\n(size_prod f g)\"<br>\nby (rule is_measure.intros)</p>\n<p>from Peter Lammich who probably uses it more often. He may have some<br>\ninsight as <br>\nto the dangers of using this by default.</p>\n</blockquote>\n<p>I have not used this very often, too. Only for small isolated examples,<br>\nbut not in the basis of some big developments.</p>\n<p>Nevertheless, I would be curious what would happen if one adds this<br>\nlemma by default (e.g. to Main)</p>",
        "id": 294715218,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183542
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Peter and Peter,</p>\n<p>The termination proof methods (lexicographic_order and size_change) use the <br>\n[measure_function] theorems to generate all candidate functions in a Prolog style. If this <br>\nrule for size_prod is added globally, then these methods will try many more candidates for <br>\nfunctions which use pairs. In detail, every tuple argument gets two changes, namely with <br>\n\"size\" and with \"size_prod ... ...\". In case of nested tuples, this lead to quadratically <br>\nmany candidates. Accordingly, the matrix output by a failing lexicographic order may <br>\nbecome harder to read because there are more columns and more failed goals.</p>\n<p>My feeling would be that it would not make a big difference for most function definitions, <br>\nbut some could experience a significant slow-down. AFAIK, the size plugin of the datatype <br>\npackage does not generate these [measure_function] theorems for the size_F functions, <br>\neither, probably for the same reason.</p>\n<p>Andreas</p>",
        "id": 294717709,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183824
    }
]