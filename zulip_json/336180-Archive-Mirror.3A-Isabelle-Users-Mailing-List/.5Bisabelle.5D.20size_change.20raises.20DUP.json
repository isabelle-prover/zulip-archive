[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear all,</p>\n<p>I ran into a case where size_change raises the exception DUP. As this is a low-level <br>\nexception that normally should not propagate to the user, I consider this as a bug report. <br>\nHere's the reduced example:</p>\n<p>datatype foo = A | B foo | C foo foo | D foo foo</p>\n<p>function F :: \"foo =&gt; unit set set\"<br>\nwhere<br>\n   \"F A = {{()}}\"<br>\n| \"F (C _ _) = {}\"<br>\n| \"F (D _ _) = {}\"<br>\n| \"F (B A) = {{()}}\"<br>\n| \"F (B (B f)) = F f\"<br>\n| \"F (B (D f f')) = F (C (B f) (B f'))\"<br>\n| \"F (B (C f f')) = F (B f') Un F (B f')\"<br>\nby pat_completeness simp_all<br>\ntermination apply size_change (* raises DUP *)<br>\nby(relation<br>\n   \"measure (foo_rec 0 (%_. op + 1) (%_ _ n m. n + m + 1) (%_ _ n m. 2 * n + 2 * m + 3))\")<br>\n   simp_all</p>\n<p>*** exception DUP (Const (\"Set.Collect\", \"((<a href=\"http://Scratch.foo\">Scratch.foo</a>, <a href=\"http://Scratch.foo\">Scratch.foo</a>) <a href=\"http://Product_Type.prod\">Product_Type.prod</a> =&gt; <br>\nHOL.bool) =&gt; (<a href=\"http://Scratch.foo\">Scratch.foo</a>, <a href=\"http://Scratch.foo\">Scratch.foo</a>) <a href=\"http://Product_Type.prod\">Product_Type.prod</a> Set.set\") $ Abs (\"uu_\", <br>\n\"(<a href=\"http://Scratch.foo\">Scratch.foo</a>, <a href=\"http://Scratch.foo\">Scratch.foo</a>) <a href=\"http://Product_Type.prod\">Product_Type.prod</a>\", Const (\"HOL.Ex\", \"(<a href=\"http://Scratch.foo\">Scratch.foo</a> =&gt; <br>\nHOL.bool) =&gt; HOL.bool\") $ Abs (\"f\", \"<a href=\"http://Scratch.foo\">Scratch.foo</a>\", Const (\"HOL.Ex\", \"(<a href=\"http://Scratch.foo\">Scratch.foo</a> =&gt; <br>\nHOL.bool) =&gt; HOL.bool\") $ Abs (\"f'\", \"<a href=\"http://Scratch.foo\">Scratch.foo</a>\", Const (\"HOL.conj\", \"HOL.bool =&gt; <br>\nHOL.bool =&gt; HOL.bool\") $ (Const (\"HOL.eq\", \"(<a href=\"http://Scratch.foo\">Scratch.foo</a>, <a href=\"http://Scratch.foo\">Scratch.foo</a>) <a href=\"http://Product_Type.prod\">Product_Type.prod</a> <br>\n=&gt; (<a href=\"http://Scratch.foo\">Scratch.foo</a>, <a href=\"http://Scratch.foo\">Scratch.foo</a>) <a href=\"http://Product_Type.prod\">Product_Type.prod</a> =&gt; HOL.bool\") $ Bound 2 $ (Const <br>\n(\"Product_Type.Pair\", \"<a href=\"http://Scratch.foo\">Scratch.foo</a> =&gt; <a href=\"http://Scratch.foo\">Scratch.foo</a> =&gt; (<a href=\"http://Scratch.foo\">Scratch.foo</a>, <a href=\"http://Scratch.foo\">Scratch.foo</a>) <br>\n<a href=\"http://Product_Type.prod\">Product_Type.prod</a>\") $ (Const (\"Scratch.foo.B\", \"<a href=\"http://Scratch.foo\">Scratch.foo</a> =&gt; <a href=\"http://Scratch.foo\">Scratch.foo</a>\") $ Bound 0) $ <br>\n(Const (\"Scratch.foo.B\", \"<a href=\"http://Scratch.foo\">Scratch.foo</a> =&gt; <a href=\"http://Scratch.foo\">Scratch.foo</a>\") $ (Const (\"Scratch.foo.C\", <br>\n\"<a href=\"http://Scratch.foo\">Scratch.foo</a> =&gt; <a href=\"http://Scratch.foo\">Scratch.foo</a> =&gt; <a href=\"http://Scratch.foo\">Scratch.foo</a>\") $ Bound 1 $ Bound 0)))) $ Const (\"HOL.True\", <br>\n\"HOL.bool\"))))) raised (line 261 of \"General/table.ML\")<br>\n*** At command \"apply\"</p>\n<p>Exception trace for exception - DUP raised in General/table.ML line 261</p>\n<p>Termination.mk_dgraph(2)<br>\nTermination.decompose_tac(1)(2)<br>\nTermination.CALLS(3)<br>\nTactical.THEN_ALL_NEW(4)<br>\nSeq.maps(2)(1)<br>\nSeq.append(2)copy(1)(1)<br>\nSeq.append(2)copy(1)(1)<br>\nSeq.map(2)(1)<br>\nSeq.map(2)(1)<br>\nSeq.map(2)(1)<br>\nSeq.map(2)(1)<br>\nSeq.append(2)copy(1)(1)<br>\nSeq.first_result(2)result(3)<br>\nSeq.first_result(2)<br>\nToplevel.proofs'(1)(1)(1)<br>\nEnd of trace</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294245093,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908593
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi Andreas,</p>\n<p>Thanks for the report. It seems that the graph decomposition cannot cope <br>\nwith the same recursive call occurring twice... (But the issue only <br>\noccurs when graph decomposition actually happens since the plain scnp <br>\nmethod does not succeed). Here is a more minimal example:</p>\n<p>function f :: \"nat =&gt; nat\"<br>\nwhere \"f x = f x + f x\"<br>\nby auto<br>\ntermination apply size_change</p>\n<p>I'll look for a fix...</p>\n<p>Alex</p>",
        "id": 294245225,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908628
    }
]