[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nIn Isabelle 2011-1, size_change raises the exception Option (line 81 in <br>\ngeneral/basics.ML) and Bind (line 277 of termination.ML) for the following <br>\nfunction definitions. The NOT operator seems to cause the trouble, because <br>\nsize_change (and lexicographic_order) work perfectly well when I unfold NOT i = <br>\n-i - 1.</p>\n<p>This either seems like a bug in termination or some bad setup for NOT.</p>\n<p>theory Scratch imports \"~~/src/HOL/Word/Bit_Int\" begin</p>\n<p>function bits :: \"int =&gt; nat\"<br>\nwhere<br>\n   \"bits i =<br>\n   (if i &lt; 0 then bits (NOT i)<br>\n    else if i = 0 then 0<br>\n    else bits (i div 2) + 1)\"<br>\nby(pat_completeness) auto<br>\ntermination apply(size_change) (* raises Option *)</p>\n<p>function bits :: \"int =&gt; nat\"<br>\nwhere<br>\n   \"bits i = (if i &lt; 0 then bits (NOT i) else 0)\"<br>\nby(pat_completeness) auto<br>\ntermination apply(size_change) (* raises Bind *)</p>\n<p>Andreas</p>",
        "id": 294154537,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850659
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi Andreas,</p>\n<p>Thanks for reporting this. It is a bug in size_change (more precisely, <br>\nthe dependency graph construction). Embarrasingly, the edges in the <br>\ngraph seem to have the wrong direction, which got unnoticed several <br>\nyears. This shows that size_change still isn't used/tested much.</p>\n<p>I am preparing a fix.</p>\n<p>Alex</p>",
        "id": 294154659,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850712
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nNow done, in Isabelle/2d48bf79b725.</p>\n<p>The correct behaviour is that in the first function, some progress is <br>\nmade by removing one of the calls, and in the second function, nothing <br>\ncan be done, because a priori, the termination prover knows nothing <br>\nabout NOT. So unfolding it is probably a good idea. Note that you can do <br>\nthis locally in the termination proof, e.g. by (lexicographic_order <br>\nsimp: ...).</p>\n<p>Alex</p>",
        "id": 294154804,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850776
    }
]