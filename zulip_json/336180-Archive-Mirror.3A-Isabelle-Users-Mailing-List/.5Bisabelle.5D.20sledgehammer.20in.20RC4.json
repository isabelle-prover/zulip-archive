[
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nRandy,</p>\n<p>I didn't see that anyone answered this, and it was of interest to me, <br>\nbecause of how Sledgehammer used to deal with virtual cores (# of <br>\nthreads), but things have changed to how I wanted them. It ceased to be <br>\nan issue for me because I currently use an older quad core with no <br>\nvirtual threads.</p>\n<p>I have a laptop with an i3-330m:</p>\n<p><a href=\"http://ark.intel.com/products/47663/\">http://ark.intel.com/products/47663/</a></p>\n<p>As the Intel web page shows, it has 2 hardware cores and 4 virtual <br>\nthreads. My use of \"ML {* Multithreading.max_threads_value () *}\" for <br>\nthat laptop returns \"it = 4\". For the older quad core that I use, which <br>\nhas no virtual threads, it returns \"it = 4\". For a newer i7 with 4 <br>\ncores, and 8 threads, I assume it would return \"it = 8\".</p>\n<p>For the i3-330m, when I run sledgehammer with \"e spass z3_tptp z3\", on a <br>\ntheorem it can't prove, with a 60 second timeout, I see 4 processes <br>\nstart up, SPASS.exe, eprover.exe, and two copies of z3-solver.exe, all <br>\ntaking up to about 25% of the CPU.</p>\n<p>That's good, because with Isabelle2012 (or whatever I was using at the <br>\ntime), it would only run 2 provers at a time on that laptop. So when I <br>\nget an i7, it hopefully will run 8 at a time.</p>\n<p>I guess if you get \"it = 2\", it means you have an older dual core that <br>\nhas no virtual threads.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294254637,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912122
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;<br>\nHi Randy,</p>\n<p>Sorry for the delay in answering.</p>\n<p>In Proof General, this should do the trick:</p>\n<p>ML {* Multithreading.max_threads := 4 *}</p>\n<p>In jEdit, there appears to be an option called \"threads\" that one can set (judging from the code in \"Pure/PIDE/protocol.ML\" -- I'm faster at grepping than at searching my way through GUIs).</p>\n<p>I hope this helps. And please let us (or me) know if you run into more issues with Sledgehammer.</p>\n<p>Regards,</p>\n<p>Jasmin</p>",
        "id": 294255008,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912256
    },
    {
        "content": "<p>From: Randy Pollack &lt;<a href=\"mailto:rpollack@inf.ed.ac.uk\">rpollack@inf.ed.ac.uk</a>&gt;<br>\nHi Jasmin,</p>\n<p>Thanks for your answer.  I'm not sure if it is useful or harmful to<br>\ncount the hyperthreads (double the number of real cores).  The host OS<br>\n(OSX or Windows or Linux) can see the difference between cores and<br>\nhyperthreads, and hopefully schedules accordingly (i.e. distributes<br>\nthreads to different cores before using a hyperthread on a core<br>\nalready running).</p>\n<p>The issue is complicated by the fact that I'm running Ubuntu in a VBox<br>\nvirtual machine. Probably (but I don't know, and haven't been able to<br>\nascertain from VBox documentation) VBox simply spawns guest threads<br>\nand leave it to the host OS to schedule them.  That would imply that<br>\nno harm is done by telling isabelle the number of hyperthreads rather<br>\nthan the number of cores.</p>\n<p>Unless someone on the list knows about this, experimentation is required.</p>\n<p>Best,<br>\nRandy</p>",
        "id": 294255022,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912262
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nYou probably already know this, but for others who haven't used it, the <br>\nsettings I show are useful to keep VirtualBox from hogging up all the CPUs.</p>\n<p>For a machine in VirtualBox, there is the setting <br>\n\"Setting/System/Processor\", where you can set the number of processors <br>\nfor a VirtualBox machine.</p>\n<p>I attach a screen shot for my dual core laptop. It shows I have it set <br>\nto 2, but that 4 processors are available. I don't know if I set that, <br>\nor if that's the default.</p>\n<p>Regards,<br>\nGB<br>\n<a href=\"/user_uploads/14278/sUOuUz_LtZkueh27AGwz2ulv/vBox-cpus.png\">vBox cpus.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/sUOuUz_LtZkueh27AGwz2ulv/vBox-cpus.png\" title=\"vBox cpus.png\"><img src=\"/user_uploads/14278/sUOuUz_LtZkueh27AGwz2ulv/vBox-cpus.png\"></a></div>",
        "id": 294255035,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912269
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 14 Nov 2013, Randy Pollack wrote:</p>\n<blockquote>\n<p>I'm not sure if it is useful or harmful to count the hyperthreads <br>\n(double the number of real cores).  The host OS (OSX or Windows or <br>\nLinux) can see the difference between cores and hyperthreads, and <br>\nhopefully schedules accordingly (i.e. distributes threads to different <br>\ncores before using a hyperthread on a core already running).</p>\n</blockquote>\n<p>This confusion of real cores vs. hyperthreaded virtual cores will probably <br>\nentertain the computing industry for a few more years.  My experience is <br>\nthat (1) the OSes today are smart enough to schedule threads for real <br>\ncores first and (2) the additional virtaul cores actually help a bit with <br>\nperformance.</p>\n<p>On my old 8 core Xeon * hyperthreading system (2009), I can get a true <br>\nfactor of 9.6 in the best possible situation.  That extra burning of CPU <br>\ncycles consumes quite a lot of energy, though.  Users of mobile systems <br>\nshould make sure that they don't overload the CPU unneccessary.</p>\n<p>Isabelle provides a global system option \"threads\" for that (both for <br>\nIsabelle/Scala/jEdit and in Proof General via its own elips-based <br>\nmechanism).</p>\n<p>Moreover, the Poly/ML settings can be fine-tuned in <br>\n$ISABELLE_HOME_USER/etc/settings like this:</p>\n<p>ML_OPTIONS=\"-H 500 --gcthreads 4\"</p>\n<p>Further tuning might be required to make the JVM run smoothly on a given <br>\nsystem -- this is relevant for Isabelle/Scala and the PIDE front-ends.</p>\n<p>Modern hardware requires considerable manual tuning to get the best <br>\nperformance vs. energy consumption ratio.</p>\n<p>I've heard occasionally complaints about too much burning of cycles, by <br>\npeople who did not look at any of their hardware specifications nor the <br>\nIsabelle options.</p>\n<blockquote>\n<p>The issue is complicated by the fact that I'm running Ubuntu in a VBox<br>\nvirtual machine.</p>\n</blockquote>\n<p>What is your host platform then?  Since Isabelle claims to support all <br>\nmajor OSes routinely, I am always interested to see counterexamples. <br>\n(Android will not work, though.)</p>\n<p>Makarius</p>",
        "id": 294256363,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912747
    },
    {
        "content": "<p>From: Randy Pollack &lt;<a href=\"mailto:rpollack@inf.ed.ac.uk\">rpollack@inf.ed.ac.uk</a>&gt;<br>\nI just installed Isabelle2013-1-RC4 on a fresh installation of Ubuntu<br>\n13.10, using the standard \"download for Linux\" from the Isabelle<br>\nwebpage.  I built the HOL image without any problem.</p>\n<p>Sledgehammer fails to find proofs that it found in the Isabelle2013<br>\nversion.  So I tried the simple example from the \"First Steps\" section<br>\nof \"Hammering Away\" from the Isabelle documentation.  Only e and spass<br>\nwere being called.</p>\n<p>BTW, I fixed  Z3_NON_COMMERCIAL= yes, and did not get the ususal<br>\nIsabelle warning saying to do that.</p>\n<p>What have I forgotten?</p>\n<p>Thanks for help,<br>\nRandy</p>",
        "id": 294258304,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913409
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;<br>\nHi Randy,</p>\n<p>Which default provers end up being run depend on a number of factors. The algorithm has changed between 2013 and 2013-1RC*, to avoid running e.g. 5 provers on 4 cores. I'd need a bit more information from you to debug this:</p>\n<ol>\n<li>\n<p>How many cores does your machine have?</p>\n</li>\n<li>\n<p>What is the value reported by ML {* Multithreading.max_threads_value () *} ?</p>\n</li>\n<li>\n<p>Do you use Proof General or jEdit/PIDE?</p>\n</li>\n<li>\n<p>How do you invoke Sledgehammer? Do you type \"sledgehammer\" in the editor window or use the new jEdit Sledgehammer panel?</p>\n</li>\n<li>\n<p>What is the output of the \"sledgehammer_params\" command?</p>\n</li>\n</ol>\n<p>Thank you in advance.</p>\n<p>Regards,</p>\n<p>Jasmin</p>",
        "id": 294258333,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913418
    },
    {
        "content": "<p>From: Randy Pollack &lt;<a href=\"mailto:rpollack@inf.ed.ac.uk\">rpollack@inf.ed.ac.uk</a>&gt;<br>\nHi Jasmine,</p>\n<p>I'm running in a VBox virtual machine on a MacPro that has 2 cores</p>\n<blockquote>\n<ol>\n<li>How many cores does your machine have?<br>\nThe VM is set with 2 CPUs</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>What is the value reported by ML {* Multithreading.max_threads_value () *} ?<br>\n2</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"3\">\n<li>Do you use Proof General or jEdit/PIDE?<br>\nProof General</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"4\">\n<li>How do you invoke Sledgehammer? Do you type \"sledgehammer\" in the editor window or use the new jEdit Sledgehammer panel?<br>\nI type \"sledgehammer\"</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"5\">\n<li>What is the output of the \"sledgehammer_params\" command?<br>\nDefault parameters for Sledgehammer:<br>\nblocking = false<br>\ndebug = false<br>\nfact_filter = smart<br>\nfact_thresholds = 0.45 0.85<br>\nisar_compress = 10<br>\nisar_proofs = smart<br>\nisar_try0 = true<br>\nlam_trans = smart<br>\nlearn = true<br>\nmax_facts = smart<br>\nmax_mono_iters = smart<br>\nmax_new_mono_instances = smart<br>\nminimize = smart<br>\noverlord = false<br>\npreplay_timeout = 3<br>\nprovers = e spass<br>\nslice = true<br>\nspy = false<br>\nstrict = false<br>\ntimeout = 30<br>\ntype_enc = smart<br>\nuncurried_aliases = smart<br>\nverbose = false</li>\n</ol>\n</blockquote>\n<p>Thanks,<br>\nRandy</p>",
        "id": 294258345,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913421
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;<br>\nHi Randy,</p>\n<p>OK, that explains it.</p>\n<p>Earlier versions of Sledgehammer ran at most 2 local ATPs (for a 2-CPU system) + a number of remote ATPs in that case, since remote ATPs do not put a heavy load on the local machine. However, this lead to some weird effects when using jEdit's new Sledgehammer tab, which users the thread scheduling of PIDE instead of Sledgehammer's somewhat deprecated solution. (Namely, two or three rounds of running ATPs would be necessary, doubling or trippling the effective time out and leading users to wonder what's going on.) It would be possible to have different defaults for Proof General and jEdit, but Sledgehammer already has too many modes, so I'd rather not go that way. Also, I am betting on the trend toward 4-/8-core systems and jEdit to continue.</p>\n<p>The default provers invoked can be changed in Proof General using the Isabelle menu. This is preserved across sessions, so you should need to do it only once. An alternative is to put</p>\n<p>sledgehammer_params [provers = e spass remote_vampire remote_z3]</p>\n<p>at the top of your theory (or in one of your base theories).</p>\n<p>I hope this helps.</p>\n<p>Regards,</p>\n<p>Jasmin</p>",
        "id": 294258367,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913428
    },
    {
        "content": "<p>From: Randy Pollack &lt;<a href=\"mailto:rpollack@inf.ed.ac.uk\">rpollack@inf.ed.ac.uk</a>&gt;<br>\nHi Jasmin,</p>\n<p>You gave me useful information, and I can now get sledgehammer working for me.</p>\n<p>There seems to be some problem with remote_z3:</p>\n<p>sledgehammer_params [provers = remote_z3]<br>\n   lemma \"[a] = [b] \\&lt;Longrightarrow&gt; a = b\"<br>\n   sledgehammer</p>\n<p>gets the response:</p>\n<p>Sledgehammer: \"remote_z3\" on goal<br>\n   [a] = [b] \\&lt;Longrightarrow&gt; a = b<br>\n   A prover error occurred:<br>\n   Solver \"remote_z3\" failed. [...]</p>\n<p>while:</p>\n<p>sledgehammer_params [provers = z3]<br>\n   lemma \"[a] = [b] \\&lt;Longrightarrow&gt; a = b\"<br>\n   sledgehammer</p>\n<p>gets the expected response.  Also something strange about remote_e_sine:</p>\n<p>sledgehammer_params [provers = remote_e_sine]<br>\n   lemma \"[a] = [b] \\&lt;Longrightarrow&gt; a = b\"<br>\n   sledgehammer</p>\n<p>gets the response:</p>\n<p>Sledgehammer: \"remote_e_sine\" on goal<br>\n   [a] = [b] \\&lt;Longrightarrow&gt; a = b<br>\n   Timed out.</p>\n<p>while:</p>\n<p>sledgehammer_params [provers = spass remote_e_sine]<br>\n   lemma \"[a] = [b] \\&lt;Longrightarrow&gt; a = b\"<br>\n   sledgehammer</p>\n<p>gets the expected response.  So remote_e_sine works under some<br>\ncircumstances and not under others.  This seems to be repeatable.</p>\n<p>BTW, how does Multithreading.max_threads_value get set to 2, can I<br>\nchange it, and would that do any good?  You and Makarius probably<br>\nunderstand this point better than I: a modern \"dual core\" Intel<br>\nmachine has 4 hardware threads.</p>\n<p>Thanks,<br>\nRandy</p>",
        "id": 294258382,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913434
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI don't understand the \"fixed Z3_NON_COMMERCIAL\" part.  What was broken <br>\nhere?</p>\n<p>Makarius</p>",
        "id": 294258530,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913487
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe situation is indeed at a point where it is unclear to me what really <br>\nhappens internally.  The Proof General legacy is a heavy burden, sucks up <br>\nmaintenance resources, and reduces possibilities to get it right by clear <br>\nand simple means.</p>\n<p>We have already &gt; 2 years of official stable releases of Isabelle/jEdit <br>\n(Isabelle2011-1, Isabelle2012, Isabelle2013, Isabelle2013-1).  These are <br>\nin fact 4 generations of Prover IDE implementations: the steps between <br>\neach of them are quite substantial.</p>\n<p>People who are still using Proof General should say more explicitly what <br>\nare the reasons for it, apart from old habits.</p>\n<p>Makarius</p>",
        "id": 294258588,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913509
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;<br>\nNo. The message did not show up because only two provers were run (E and SPASS). That's perfectly normal. The message is shown only if users attempt to run Z3.</p>\n<p>Jasmin</p>",
        "id": 294258609,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913520
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Makarius,</p>\n<blockquote>\n<p>People who are still using Proof General should say more explicitly what are the reasons<br>\nfor it, apart from old habits.<br>\nI use both jEdit and Proof General, but for different purposes. I see the following <br>\nadvantages of ProofGeneral 3.7.1.1 with XEmacs:</p>\n</blockquote>\n<ol>\n<li>\n<p>XEmacs/ProofGeneral can be used completely without a mouse. With jEdit, I have to <br>\nswitch to the mouse far more often, in particular for sledgehammer, find_theorems and to <br>\nnavigate from one theory file to another.</p>\n</li>\n<li>\n<p>Navigation by cursor keys is much slower. Moving a word to the left/right in XEmacs <br>\njumps to the beginning / end of the next word, where a word consists of at least one <br>\nalphanumeric character. In jEdit, Ctrl-left/-right also stops at every parenthesis, <br>\nwhite-space, operator and the like.</p>\n</li>\n</ol>\n<p>Similarly, I often want to look somewhere else in my theory file (and use PgUp/PgDn for <br>\nthat); with ProofGeneral, I just type C-c C-. to get back to where I was before, but I do <br>\nnot know an equally simple way in jEdit.</p>\n<ol start=\"2\">\n<li>\n<p>XEmacs has less spacing between the lines (this is the main reason why I still use <br>\nProofGeneral 3.7.1.1, GNU Emacs with PG 4.x has a similar spacing as jEdit), so more of <br>\nthe proof script fits on the screen at the same font size.</p>\n</li>\n<li>\n<p>The output buffers are not usable with a key board. This is particularly annoying when <br>\nI examine diagnostic output as produced by code_thms, export_code, print_classes, thm <br>\n&lt;large Named_THM collection&gt;, etc. In jEdit, I first have to open a new buffer and copy <br>\nthe output there before I can use search and friends to navigate through.</p>\n</li>\n<li>\n<p>After a few hours of work, jEdit reacts slower and slower. This gets particularly <br>\nannoying when typing fast. For example, I want that entering &lt; = TAB produces the \\&lt;le&gt; <br>\nsymbol, always. Half of the time, I am faster than the popup and I get \"&lt;=    \" instead. <br>\n(I have tried this with 2013-1-RC3 last week, but not yet with RC4).</p>\n</li>\n</ol>\n<p>And finally, there's of course habits. I write my LaTeX documents in Emacs, so using the <br>\nsame editor with the same handling is very convenient.</p>\n<p>Andreas</p>",
        "id": 294258674,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913525
    },
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nAm 11.11.2013 12:34, schrieb Makarius:</p>\n<blockquote>\n<p>People who are still using Proof General should say more explicitly what<br>\nare the reasons for it, </p>\n</blockquote>\n<p>I think, I had put it in another mail already, but well:</p>\n<ul>\n<li>\n<p>jEdit is SLOW, as in: There is a noticeable lag when moving from one<br>\nmenu to the other per mouse (rendering also consumes 50% to 100% of one<br>\nCPU).</p>\n</li>\n<li>\n<p>Fonts are not antialiased. I found that setting some obscure<br>\nenvironment variable [1] made it work, but honestly: no AA by default is<br>\na no-go.</p>\n</li>\n<li>\n<p>no switching of sessions (at least last time I checked)</p>\n</li>\n<li>\n<p>(obsolete: my WM fails to show jEdits dialogs. Just noticed that there<br>\nis a patch available for it).</p>\n</li>\n<li>\n<p>jEdit is too mouse-centric. When I have to use \"Ctrl-hover\" to get<br>\nsome information, I won't use it.</p>\n</li>\n<li>\n<p>last time I checked, the 'abbreviation to unicode' conversion that<br>\nfinally(!!) works great in PG, was somewhat unusable in jEdit.</p>\n</li>\n</ul>\n<blockquote>\n<p>apart from old habits.</p>\n</blockquote>\n<p>And this is also not to be underrated. Over the last two years, I have<br>\ncompiled a 150 lines .emacs (and I'm only using Emacs for Isabelle) plus<br>\nsome 'isabelle emacs' startup magic. Hence being urged to spend all this<br>\ntime again to get the editor in a shape one likes, does not feel good.<br>\nEspecially when there are NEWS items reading \"you have to re-do all your<br>\ncurrent jEdit keybinding customizations\".</p>\n<ul>\n<li>René</li>\n</ul>\n<p>[1] export _JAVA_OPTIONS='-Dawt.useSystemAAFontSettings=gasp<br>\n-Dswing.aatext=true'<br>\n<a href=\"/user_uploads/14278/s3E0MVWXmesAB493h03e1-oJ/smime.p7s\">smime.p7s</a></p>",
        "id": 294258779,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913567
    }
]