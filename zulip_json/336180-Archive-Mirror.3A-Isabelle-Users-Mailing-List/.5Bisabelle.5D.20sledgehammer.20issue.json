[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi Jasmin,</p>\n<p>In Isabelle2016, I get the following weird sledgehammer output.</p>\n<p>Sometimes, (I could not reproduce with small example), I also get the<br>\nmessage that e derived false from these facts, and that I should report<br>\nthis as a \"bug\" in sledgehammer.</p>\n<p>theory Scratch<br>\nimports Main <br>\n  \"$AFP/Refine_Monadic/Refine_Monadic\"<br>\nbegin</p>\n<p>lemma \"A=B\"<br>\n    using ASSERT_simps(1) inres_simps(3) pw_ASSERT(2)<br>\n    sledgehammer [provers = e]<br>\n(* Sledgehammering... <br>\n\"e\": Try this: by metis (&gt; 1.0 s, timed out).<br>\n*)<br>\n  oops</p>",
        "id": 294680056,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176389
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nSorry, what was that weird output? Do you mean this?</p>\n<blockquote>\n<p>Try this: by metis (&gt; 1.0 s, timed out).</p>\n</blockquote>\n<p>It looks normal to me. Sometimes proofs time out.</p>\n<p>You can also get a warning if sledgehammer proves the goal without referring to the goal itself (specifically, its negation). This indicates that your assumptions are themselves inconsistent. Possibly too much use of\"sorry\". We all do it.</p>\n<p>Larry</p>\n<blockquote>\n<p>On 31 Aug 2016, at 16:08, Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt; wrote:</p>\n<p>Hi Jasmin,</p>\n<p>In Isabelle2016, I get the following weird sledgehammer output.</p>\n<p>Sometimes, (I could not reproduce with small example), I also get the<br>\nmessage that e derived false from these facts, and that I should report<br>\nthis as a \"bug\" in sledgehammer.</p>\n<p>theory Scratch<br>\nimports Main <br>\n  \"$AFP/Refine_Monadic/Refine_Monadic\"<br>\nbegin</p>\n<p>lemma \"A=B\"<br>\n    using ASSERT_simps(1) inres_simps(3) pw_ASSERT(2)<br>\n    sledgehammer [provers = e]<br>\n(* Sledgehammering... <br>\n\"e\": Try this: by metis (&gt; 1.0 s, timed out).<br>\n*)<br>\n  oops    </p>\n<p>--<br>\n  Peter<br>\n</p>\n</blockquote>",
        "id": 294681859,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176990
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nOn Do, 2016-09-01 at 12:36 +0100, Lawrence Paulson wrote:</p>\n<blockquote>\n<p>Sorry, what was that weird output? Do you mean this?</p>\n<blockquote>\n<p>Try this: by metis (&gt; 1.0 s, timed out).</p>\n</blockquote>\n</blockquote>\n<p>This, in combination with the lemma \"A=B\", which is clearly not<br>\nprovable (A,B are just variables). </p>\n<p>This indicates e found a proof for something unprovable. Btw, there<br>\nshould be no \"sorry\"s in Main or \"$AFP/Refine_Monadic/Refine_Monadic\".</p>",
        "id": 294682125,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177078
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@inf.ethz.ch\">traytel@inf.ethz.ch</a>&gt;<br>\nHi Larry,</p>\n<p>I very much hope that the AFP editors have ensured that “sorry\" is not used in AFP entries (which is the only imported thing in Peter’s example next to Main).</p>\n<p>Dmitriy</p>",
        "id": 294682279,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177125
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nA bug in E then. If you are ambitious, you could try to isolate the input and see if it yields a spurious proof when running E standalone. By coincidence, a new version was released yesterday, warning of a bug:</p>\n<blockquote>\n<p>E 1.9.1 \"Sungma\" is the latest version of the successful automated<br>\ntheorem prover.</p>\n<p>Major user-visible improvements of E 1.9.1 are improved automatic<br>\nmodes, automatic detection of input format, major fixes to the<br>\nwatchlist mechanism (especially with respect to using it to provide<br>\nhints for proof search) and a bug-fix for a rarely triggered, but<br>\nnasty bug in clausification. We recommend all users of older versions<br>\nto upgrade to E 1.9.1.</p>\n<p>You can find the source distribution and additional information at<br>\nthe E website at<br>\n<a href=\"http://www.eprover.org\">http://www.eprover.org</a></p>\n</blockquote>\n<p>Larry</p>\n<blockquote>\n<p>On 1 Sep 2016, at 12:50, Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt; wrote:</p>\n<p>On Do, 2016-09-01 at 12:36 +0100, Lawrence Paulson wrote:</p>\n<blockquote>\n<p>Sorry, what was that weird output? Do you mean this?</p>\n<blockquote>\n<p>Try this: by metis (&gt; 1.0 s, timed out).</p>\n</blockquote>\n</blockquote>\n<p>This, in combination with the lemma \"A=B\", which is clearly not<br>\nprovable (A,B are just variables). </p>\n<p>This indicates e found a proof for something unprovable. Btw, there<br>\nshould be no \"sorry\"s in Main or \"$AFP/Refine_Monadic/Refine_Monadic\".</p>\n</blockquote>",
        "id": 294682490,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177192
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nOn Do, 2016-09-01 at 13:03 +0100, Lawrence Paulson wrote:</p>\n<blockquote>\n<p>A bug in E then. </p>\n</blockquote>\n<p>If I understand it correctly, the bug could also be in the translation<br>\nfrom HOL to E, which is done by sledgehammer.</p>",
        "id": 294682752,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177260
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;<br>\nDear all,</p>\n<p>I've just looked into it. As I suspected, the bug <em>is</em> in the translation from Isabelle/HOL to E. For those who are into arcane technicalities, this clause is clearly unsound:</p>\n<p>fof(help_fequal_1_1_fequal_001t__Product____Type__Ounit_T, axiom,<br>\n        ((![X, Y]: ((~ pp(aa_Product_unit_bool(fequal_Product_unit(X), Y))) | X = Y)))).</p>\n<p>There should be a predicate guarding \"X\" or \"Y\", as per the paper \"Encoding Monomorphic and Polymorphic Types\". I can repair this.</p>\n<p>Cheers,</p>\n<p>Jasmin</p>",
        "id": 294682967,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177327
    }
]