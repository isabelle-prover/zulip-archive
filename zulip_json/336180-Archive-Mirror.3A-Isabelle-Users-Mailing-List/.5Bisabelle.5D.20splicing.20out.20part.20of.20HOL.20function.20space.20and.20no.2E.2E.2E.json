[
    {
        "content": "<p>From: Dimitrios Vytiniotis &lt;<a href=\"mailto:dimitriv@cis.upenn.edu\">dimitriv@cis.upenn.edu</a>&gt;<br>\nDear all,<br>\nI have come accross the following situation. I have a formalization of<br>\nparametricity for an extension of System F in Isabelle/HOL, where types<br>\nare interpreted as relations between terms. We have:</p>\n<p>types rel  = \"(tm√ótm) set\"<br>\nconsts Interpret :: \"ty =&gt; substitution =&gt; rel\"</p>\n<p>And Interpret takes a type (ty) and an environment (substitution) and<br>\nreturns a relation (rel). Its definition is just a recdef.</p>\n<p>[Please excuse my dependent types notation below but that's the way I<br>\nstarted thinking about it.] What I want to do is the following.<br>\nGiven a type for kinds:</p>\n<p>datatype kind = Star | Fun kind kind</p>\n<p>I want to define a <em>type</em> that I call rel(k) so that:<br>\n  rel(Star)      = rel<br>\n  rel(Fun k1 k2) = rel(k1) =&gt; rel(k2)</p>\n<p>That is, I want \"rel(Fun k1 k2)\" to mean the set of all HOL functions<br>\nfrom \"rel(k1)\" to \"rel(k2)\". And finally I want Interpret to have<br>\nthe pseudo-type:</p>\n<p>Interpret :: (k:kind) =&gt; ty =&gt; substitution =&gt; rel(k)</p>\n<p>So, modulo dependent types notation, what I really really want<br>\nis temporarily go to some common type that I can give to the<br>\n\"rel(k)\" above, call it  GeneralizedRel, so that Interpret returns one<br>\nof these. So the real type of Interpret would be:<br>\n   kind =&gt; ty =&gt; substitution =&gt; GeneralizedRel<br>\nand I would hopefully be able to prove the extra dependencies with<br>\nthe help of some lemmas.</p>\n<p>Is is known how can one do something like that in Isabelle/HOL? I am not<br>\nparticularly attached to the style of definitions (recursive functions<br>\nvs. inductive relations) so any suggestions and ideas are very<br>\nwelcome.</p>\n<p>Thanks!<br>\n--dimitris</p>",
        "id": 294050216,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819109
    },
    {
        "content": "<p>From: Steven Obua &lt;<a href=\"mailto:obua@in.tum.de\">obua@in.tum.de</a>&gt;<br>\nI don't think what you want is possible in Isabelle/HOL.</p>\n<p>Nevertheless, a workaround could be to take the type GeneralizedRel as <br>\nthe type of all Zermelo-Fraenkel sets,<br>\nwhich is available in Isabelle/HOL in the theory HOL/ZF/MainZF:</p>\n<hr>\n<p>theory recty<br>\nimports \"~~/src/HOL/ZF/MainZF\"<br>\nbegin</p>\n<p>typedecl tm</p>\n<p>axioms tm_representable: \"\\&lt;exists&gt; f z. (UNIV :: tm set) = image f <br>\n(explode z)\"</p>\n<p>definition<br>\n  \"TM = (SOME z. (\\&lt;exists&gt; f. (UNIV :: tm set) = image f (explode z)))\"</p>\n<p>definition<br>\n  \"TM_rep = (SOME f. inj_on f (explode TM) \\&lt;and&gt; (UNIV :: tm set) = <br>\nimage f (explode TM))\"</p>\n<p>lemma \"inj_on TM_rep (explode TM)\"<br>\n  sorry</p>\n<p>lemma \"(UNIV :: tm set) = image TM_rep (explode TM)\"<br>\n  sorry</p>\n<p>datatype kind = Star | F kind kind</p>\n<p>fun rel :: \"kind \\&lt;Rightarrow&gt; ZF\"<br>\nwhere<br>\n  \"rel Star = CartProd TM TM\"<br>\n| \"rel (F a b) = Fun (rel a) (rel b)\"</p>\n<p>end</p>\n<hr>\n<p>Here the axiom tm_representable is something which you could probably <br>\nshow for your terms (your terms should be countable?)</p>\n<p>Of course, you would not exactly be working in pure type theory anymore :-)</p>\n<p>The above is just a rough scetch, should you consider this option don't <br>\nhesitate to contact me with any further comments/questions.</p>\n<p>Steven</p>",
        "id": 294050228,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819116
    }
]