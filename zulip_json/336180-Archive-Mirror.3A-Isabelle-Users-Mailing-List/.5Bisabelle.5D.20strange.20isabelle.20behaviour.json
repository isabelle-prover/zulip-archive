[
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:christian.sternagel@uibk.ac.at\">christian.sternagel@uibk.ac.at</a>&gt;<br>\nI experienced some strange behaviour when using Isabelle<br>\nto check natural deduction proofs for first-order logic.</p>\n<p>The following lemma is easily proved:</p>\n<p>lemma \"EX y. P(x_0, y) ==&gt; EX x. EX y. P(x, y)\" by auto</p>\n<p>Hence I thought that every formula that unifies with<br>\nthe above, would also be provable.<br>\nAs soon as negations come into play however, I get problems.</p>\n<p>lemma \"EX y. ~ x_0 = y ==&gt; EX x. EX y. ~ x = y\" by auto</p>\n<p>is not accepted. Why is this the case? As far as I'm concerned</p>\n<p>?P = %(x, y). ~ x = y</p>\n<p>unifies the two premises (and conclusions) of the two lemmas.<br>\nThus they should both be provable.</p>\n<p>cheers</p>\n<p>christian</p>",
        "id": 294052469,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660820120
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nYour second lemma is unprovable because the premise and the conclusion <br>\nare not \"linked\" and thus talk about independent types. (Comand `refute' <br>\nwould actually have spotted this.)</p>\n<p>More to the point: you cannot expect that if some proposition is proved <br>\nautomatically by method m, m will also prove any instance automaticallly </p>\n<ul>\n<li>most theorem proving methods are only complete on paper and many <br>\nimplementations explicitly give up on completeness.</li>\n</ul>\n<p>Tobias</p>\n<p>Christian Sternagel schrieb:</p>",
        "id": 294052619,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660820188
    }
]