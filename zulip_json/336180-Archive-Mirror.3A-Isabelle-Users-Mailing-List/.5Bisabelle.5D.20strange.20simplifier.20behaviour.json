[
    {
        "content": "<p>From: noam neer &lt;<a href=\"mailto:noamneer@gmail.com\">noamneer@gmail.com</a>&gt;<br>\nin the following simple (and artificial) example, the proof of lemma 'tl2'<br>\nfails at its firsy 'apply'. it seems the simplifier couldn't apply lemma<br>\n'tl1' at all, even though a proof with 'rule' instead of 'simp' does work.<br>\ncan anyone explain this to me?</p>\n<p>theory tmp_prop<br>\nimports Complex_Main<br>\nbegin</p>\n<p>definition fff :: \"real ⇒ real ⇒ real\"<br>\n      where \"fff x y = 0\"</p>\n<p>lemma tl1: \"x≠0  ==&gt;  (fff x y) = 0\"<br>\n      by (simp add: fff_def)</p>\n<p>lemma tl2: \"x≠0  ==&gt;  (fff x y) = 0\"<br>\n      using [[simp_trace]]<br>\n      apply (simp only: tl1 [of x y])<br>\n      oops</p>\n<p>(* a proof that does work -<br>\n      apply (rule tl1 [of x y])<br>\n        apply simp<br>\n*)</p>\n<p>end</p>",
        "id": 294650536,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165939
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nThe problem has to do with how the simplifier turns facts into simp rules.</p>\n<p>In your example, you have the fact \"x ≠ 0\", and the simplifier turns<br>\nthat into the simp rule \"(x = 0) = False\". In order to apply the rule<br>\ntl1[of x y] that you added as a simp rule, the simplifier has to solve<br>\nthe precondition \"x ≠ 0\".</p>\n<p>What happens is that this precondition gets rewritten with the above<br>\nsimp rule, so you end up with \"¬False\" and then the simplifier gets<br>\nstuck because you used \"simp only:\" and therefore have no simp rules for<br>\nsomething like \"¬False\".</p>\n<p>If you do \"apply (simp only: not_False_eq_True tl1[of x y])\", everything<br>\nworks out fine.</p>",
        "id": 294650538,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165941
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nManuel already gave an answer. I guess you arrived at that by<br>\ninvestigating some behaviour you did not understand. In such cases, the<br>\nuse of \"simp_thms\" with \"simp only:\" can be useful -- it contains all<br>\nthe basic logic rules you expect the simplifier to know..</p>",
        "id": 294650550,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165951
    },
    {
        "content": "<p>From: noam neer &lt;<a href=\"mailto:noamneer@gmail.com\">noamneer@gmail.com</a>&gt;<br>\nthanx for the answers. but I just tried the same proof with</p>\n<p>apply (simp (no_asm_simp) only: tl1 [of x y])</p>\n<p>if Manuel's explanation is correct this should have worked,<br>\nbecause the \"x~=0\" should have stayed unchanged.<br>\nbut this fails too. what am I missing?</p>",
        "id": 294650554,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165953
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nThe simplifier can only work with (conditional equations) of the form<br>\n\"[|_|] ==&gt; _ == _\". Anything, which does not have this form is converted<br>\nfirst. This includes steps as</p>\n<p>x = y ----&gt; x == y<br>\n   ~P    ----&gt; P == False<br>\n   P     ----&gt; P == True</p>\n<p>This behaviour is hard-coded for each logic and cannot be disabled.</p>\n<p>-- Lars</p>",
        "id": 294650604,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165973
    },
    {
        "content": "<p>From: noam neer &lt;<a href=\"mailto:noamneer@gmail.com\">noamneer@gmail.com</a>&gt;<br>\nOK. but now I tried a different condition -</p>\n<p>lemma tl3: \"x&gt;1  ==&gt;  (fff x y) = 0\"<br>\n      using [[simp_trace]]<br>\n      using [[simp_trace_depth_limit=2]]<br>\n      apply (simp (no_asm_simp) only: tl1 [of x y])<br>\n      done</p>\n<p>the proof worked though I don't understand why.<br>\nhere the simplifier has to prove \"x~=0\" from \"x&gt;1\",<br>\nand from the trace output it seems he adds many rules<br>\nthat enable him to prove this. why is he adding them?<br>\nis this the lin arith module at work?</p>\n<p>and another question - was there an attempt to add backtracking abilities<br>\nto the simplifier, like in 'blast'? seems it'd be usefull.</p>\n<p>thanx</p>",
        "id": 294650998,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166088
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:thomas.sewell@nicta.com.au\">thomas.sewell@nicta.com.au</a>&gt;<br>\nYou are right, there is something pretty strange going on here. The<br>\n'only:' mode of simp is meant to turn off anything that might surprise you.</p>\n<p>In general the simplifier trace can be quite confusing, because the<br>\nsimplifier sometimes runs simprocs and other tools which then call back<br>\nto the simplifier. The tracing mode is set globally, so you see an inner<br>\ntrace mixed into your trace which explains what happened on the<br>\nrecursive call.</p>\n<p>It looks like this is what happens here. Unfortunately the simp trace<br>\nisn't detailed enough to figure out what the tool that is working here<br>\nis, or how it got called.</p>\n<p>OK, so, from my quick reading, \"simp only:\" calls<br>\nRaw_Simplifier.clear_simpset, which drops the rules, congs, procs, etc,<br>\nbut keeps the mksimps mechanism, the term order, subgoal tactic and<br>\n\"solvers\".</p>\n<p>Indeed, lin_arith is added as a \"solver\" (see \"addSolver\" in<br>\nglobal_setup in src/HOL/Tools/lin_arith.ML). And solvers are not removed<br>\nby the \"simp only:\" command. You could do some ML work to force the<br>\nnon-default solvers out of the simpset, which would make the simplifier<br>\na bit more predictable. Or just accept that it's a bit of a headache.</p>\n<p>Cheers,<br>\n     Thomas.</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294651181,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166151
    }
]