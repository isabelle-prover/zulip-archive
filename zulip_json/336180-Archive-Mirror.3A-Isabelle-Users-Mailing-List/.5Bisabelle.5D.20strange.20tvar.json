[
    {
        "content": "<p>From: Sean McLaughlin &lt;<a href=\"mailto:seanmcl@cmu.edu\">seanmcl@cmu.edu</a>&gt;<br>\nHello,</p>\n<p>In examining the proof of HOL.less_max_iff_disj I came upon something<br>\nI found strange, which indicates I don't understand this aspect of  <br>\nthe proof term:</p>\n<p>In all the other proofs I've seen up to this point (and I've seen  <br>\nhundreds),<br>\nall the free TVars were contained in the conclusion or premises of  <br>\nthe theorem.  Moreover, all of these<br>\nTVars had index 0 (as part of the \"indexname\" type) In this case,<br>\nthere is a free TVar deep in the proof \"'t\" with index \"111\".  Now I  <br>\nhave<br>\nno idea where this came from, nor the significance of the index,  <br>\nespecially<br>\nsuch a seemingly strange one as this.</p>\n<p>Can anyone explain what is going on here?  I thought the index was  <br>\njust for some<br>\nnonlogical optimization.</p>\n<p>Thanks!</p>\n<p>Sean</p>",
        "id": 293896525,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660742879
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThe index is a variable-renaming mechanism, known as \"standardizing  <br>\napart\" in the resolution world. The TVar is present because the  <br>\nsecond step of the proof introduces it:</p>\n<p>apply (insert linorder_less_linear)</p>\n<p>You can eliminate the TVar if you make this step instantiate the type  <br>\nvariable to the one used in the theorem statement:</p>\n<p>apply (insert linorder_less_linear [where ?'a ='a])</p>\n<p>Larry Paulson</p>",
        "id": 293896529,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660742881
    },
    {
        "content": "<p>From: Stefan Berghofer &lt;<a href=\"mailto:berghofe@in.tum.de\">berghofe@in.tum.de</a>&gt;<br>\nSean McLaughlin wrote:</p>\n<blockquote>\n<p>Hello,</p>\n<p>In examining the proof of HOL.less_max_iff_disj I came upon something<br>\nI found strange, which indicates I don't understand this aspect of  the<br>\nproof term:</p>\n<p>In all the other proofs I've seen up to this point (and I've seen <br>\nhundreds),<br>\nall the free TVars were contained in the conclusion or premises of  the<br>\ntheorem.  Moreover, all of these</p>\n</blockquote>\n<p>Hello Sean,</p>\n<p>this kind of \"subformula property\" need not hold in general. In particular,<br>\nit does not hold if the proof is not in \"normal form\", i.e. contains<br>\ndetours. Due to the fact that type variables that are not contained in the<br>\nmain goal may appear during the proof of a theorem, Isabelle's theorem<br>\ndatatype also contains a list of sort hypotheses (see section 5.1.7 of the<br>\nIsabelle Reference manual).</p>\n<blockquote>\n<p>TVars had index 0 (as part of the \"indexname\" type) In this case,<br>\nthere is a free TVar deep in the proof \"'t\" with index \"111\".  Now I  have<br>\nno idea where this came from, nor the significance of the index, <br>\nespecially<br>\nsuch a seemingly strange one as this.</p>\n</blockquote>\n<p>Since type information can be reconstructed, the proof terms of theorems<br>\nstored in Isabelle's theorem database do not contain any type information.<br>\nThe type reconstruction algorithm first inserts type variables in place of<br>\nthe omitted types, which are then instantiated via unification. In order<br>\nto be able to generate fresh variables easily, the reconstruction algorithm<br>\nsimply increments the index every time it generates a variable, which may<br>\nlead to \"strange\" indices like the one you have encountered.<br>\nIf a type variable (with \"?\") remains after reconstruction, this means that<br>\nthe choice of the type does not influence the correctness of the proof.<br>\nThe index has no particular significance - one could add a postprocessing stage<br>\nto the reconstruction algorithm that replaces these \"strange\" variables<br>\nby \"nicer\" ones.</p>\n<p>Greetings,<br>\nStefan</p>",
        "id": 293896561,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660742882
    }
]