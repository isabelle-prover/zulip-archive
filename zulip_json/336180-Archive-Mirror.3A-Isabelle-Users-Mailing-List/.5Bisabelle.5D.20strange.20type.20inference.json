[
    {
        "content": "<p>From: noam neer &lt;<a href=\"mailto:noamneer@gmail.com\">noamneer@gmail.com</a>&gt;<br>\nso far in my experiments Isabelle was able to infer types correctly, and<br>\neven to place conversion functions when necessary (such as 'real' to<br>\nconvert nats and ints to reals when necessary.) but in the following<br>\nexample,</p>\n<p>declare [[show_types]]<br>\n    lemma<br>\n      \"(n::real)&gt;0 ==&gt; floor(n) = n\"<br>\n    oops</p>\n<p>instead of adding 'real' around the 'floor' I got the output</p>\n<p>goal (1 subgoal):</p>\n<p>1. (0∷real) &lt; real n ==&gt; ⌊real n⌋ = n<br>\n    variables:<br>\n      n :: int</p>\n<p>the type inference went against an explicit type constraint 'n::real'. this<br>\nwas very surprising, since I expected that if Isabelle thinks it can't<br>\nsatisfy the constraint it'd issue an error message. I was able to get what<br>\nI wanted by changing the lemma to</p>\n<p>lemma<br>\n      \"n&gt;0 ==&gt; floor(n) = (n::real)\"</p>\n<p>but I'd like to know in general at what situations can type constraints be<br>\nignored, and if there's a way to get a clear message when it happens.</p>",
        "id": 294655079,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167695
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHello,</p>\n<p>the system decidedly did not go against the explicit type constraint.<br>\nHowever, it applied the coercion _inside_ the type constraint.</p>\n<p>A type constraint inside a term can be attached to any term, not just<br>\nvariables. To illustrate the point, your annotation could also be written<br>\nas \"(n)::real\". The system is free to apply a coercion inside the<br>\nparentheses.</p>\n<p>I reckon you want the variable \"n\" to be of type \"real\". In that case, use<br>\na \"fixes\" declaration:</p>\n<p>lemma<br>\n    fixes n :: real<br>\n    shows \"n&gt;0 ==&gt; floor(n) = n\"<br>\n  oops</p>\n<p>I admit that it is somewhat unintuitive that the outer syntax \"::\" has a<br>\ndifferent meaning than the inner syntax \"::\".</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294655208,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167763
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI just want to stress this point: “fixes” is a much better way to constrain the type of a variable. It can also make your theorem statements more legible, even in cases where type inference does the right thing.</p>\n<p>Larry</p>",
        "id": 294655416,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167830
    }
]