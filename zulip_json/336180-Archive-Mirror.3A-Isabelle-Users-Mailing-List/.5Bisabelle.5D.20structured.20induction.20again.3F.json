[
    {
        "content": "<p>From: Randy Pollack &lt;<a href=\"mailto:rpollack@inf.ed.ac.uk\">rpollack@inf.ed.ac.uk</a>&gt;<br>\nI have mutually defined inductive relations on a datatype:</p>\n<p>datatype preClam =<br>\n  pcVar nat \"nat list\"<br>\n| pcLam preClam</p>\n<p>inductive  weak :: \"nat \\&lt;Rightarrow&gt; preClam \\&lt;Rightarrow&gt; preClam<br>\n\\&lt;Rightarrow&gt; bool\"<br>\n  and split :: \"preClam \\&lt;Rightarrow&gt; (nat * preClam) \\&lt;Rightarrow&gt; bool\"<br>\nwhere<br>\n  wkVar[intro!]: \"weak n (pcVar m gam) (pcVar m (Cons n gam))\"<br>\n| wkLam[intro]: \"\\&lt;lbrakk&gt;split wmM (m,M); weak n M wnM; weak m wnM<br>\nwmnM\\&lt;rbrakk&gt;\\&lt;Longrightarrow&gt;<br>\n                weak n (pcLam wmM) (pcLam wmnM)\"<br>\n| split[intro!]: \"weak n N wnN \\&lt;Longrightarrow&gt; split wnN (n,N)\"</p>\n<p>I want to prove a theorem by simultaneous induction:</p>\n<p>lemma<br>\n  shows weak_pcPN:\"weak m M wmM \\&lt;Longrightarrow&gt; P\"<br>\n  and split_pcPN:\"\\&lt;lbrakk&gt;split wnN nN; nN = (n,N)\\&lt;rbrakk&gt;<br>\n\\&lt;Longrightarrow&gt; Q\"</p>\n<p>I want to generalize n and N which appear in the second part of the<br>\nlemma.  (This is standard, as n and N were only introduced to make the<br>\nstatement of the lemma suitable for induction.)  So I expect to write<br>\nsomething like</p>\n<p>proof (induct arbitrary: n N rule: weak_split.inducts)</p>\n<p>This attempt applies the induction rule but doesn't generalize n and<br>\nN.  The relevant fact introduced by this induction is</p>\n<p>(m, M) = (n, N) \\&lt;Longrightarrow&gt; Q</p>\n<p>which is of no use at all since n and N are not generalized.</p>\n<p>How can this proof be done?</p>\n<p>Thanks for any help.<br>\nRandy</p>",
        "id": 294137704,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844897
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nHi Randy,</p>\n<p>I think you need to give arbitrary a list of lists, one for each <br>\ninductive predicate, separated by \"and\". In this case the first list <br>\nshould probably be empty:</p>\n<p>proof (induct arbitrary: and n N rule: weak_split.inducts)</p>\n<p>Tobias</p>",
        "id": 294137727,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844903
    }
]