[
    {
        "content": "<p>From: Randy Pollack &lt;<a href=\"mailto:rpollack@inf.ed.ac.uk\">rpollack@inf.ed.ac.uk</a>&gt;<br>\nConsider the following example:</p>\n<p>lemma valid_fitch:<br>\n   fixes G :: \"(par * tp) list\"<br>\n   assumes h:\"valid G\"<br>\n   shows \"\\&lt;exists&gt; a A. G \\&lt;parallel&gt;- a : A\"<br>\n   using h<br>\n proof (induct G rule: list.induct)  -- \"explicit induction rule\"<br>\n   case Nil<br>\n   ...</p>\n<p>This induction behaves as exected, i.e. induction over the list G (I<br>\nwas explicit about the induction rule to use).</p>\n<p>However consider the following:</p>\n<p>lemma valid_fitch:<br>\n   fixes G :: \"(par * tp) list\"<br>\n   assumes h:\"valid G\"<br>\n   shows \"\\&lt;exists&gt; a A. G \\&lt;parallel&gt;- a : A\"<br>\n   using h<br>\n proof (induct G)  -- \"let Isar decide which induction rule\"<br>\n   case Nil</p>\n<p>*** Unknown case: \"Nil\"<br>\n *** At command \"case\".</p>\n<p>Isar did induction over the judgement \"valid G\" instead of over the<br>\nlist G.  This seems unintended.</p>\n<p>Am I missing something about the syntax?  (BTW, this example is in<br>\nnominal Isabelle, but I guess that doesn't play any role in the<br>\nsituation.)</p>\n<p>Thanks,<br>\nRandy</p>",
        "id": 294059735,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823113
    },
    {
        "content": "<p>From: Clemens Ballarin &lt;<a href=\"mailto:ballarin@in.tum.de\">ballarin@in.tum.de</a>&gt;<br>\nBy \"using h\" the fact \"valid G\" is chained into the proof and the  <br>\ninduct method uses the first chained fact to choose the induction  <br>\nrule.  (The Isar Ref manual contains useful table detailing what  <br>\ninduct and cases do in which situations.)</p>\n<p>Clemens</p>",
        "id": 294059819,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823138
    },
    {
        "content": "<p>From: Randy Pollack &lt;<a href=\"mailto:rpollack@inf.ed.ac.uk\">rpollack@inf.ed.ac.uk</a>&gt;<br>\nI love Isar structured induction.  Here are two questions.</p>\n<p>Consider:</p>\n<p>lemma<br>\n   assumes h:\"R M\"         --\"R is an inductively defined relation\"<br>\n   shows \"P M = {}\" \"Q M\"  --\"P and Q are any properties\"<br>\n using h proof (induct)<br>\n   case (constr1 X)        --\"constr1 is a single argument constructor of R\"<br>\n  show ?case</p>\n<p>The last line will fail:</p>\n<p>*** Unbound schematic variable: ?case</p>\n<p>The ProofGeneral drop down for cases shows something about <br>\n\"subcases: 1 2\"  How do I get ?case to work in this setting?</p>\n<p>Question 2: Please give pointers to some examples of well-founded<br>\ninduction over a measure function in Isabelle 2008.  I know of<br>\nMakarius' note \"Structured Induction Proofs ...\", but I still can't<br>\nget things to work in the structured way (as opposed to using the<br>\nobject language to give an explicit induction predicate ...).</p>\n<p>Thanks<br>\nRandy</p>",
        "id": 294065325,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825229
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 5 Aug 2008, Randy Pollack wrote:</p>\n<blockquote>\n<p>lemma<br>\n   assumes h:\"R M\"         --\"R is an inductively defined relation\"<br>\n   shows \"P M = {}\" \"Q M\"  --\"P and Q are any properties\"<br>\n using h proof (induct)<br>\n   case (constr1 X)        --\"constr1 is a single argument constructor of R\"<br>\n  show ?case</p>\n<p>The last line will fail:</p>\n<p>*** Unbound schematic variable: ?case</p>\n<p>The ProofGeneral drop down for cases shows something about <br>\n\"subcases: 1 2\"  How do I get ?case to work in this setting?</p>\n</blockquote>\n<p>You first need to enter the particular sub cases before the ?case binding <br>\nshow up.  See the end of src/HOL/Induct/Common_Patterns.thy for examples <br>\nfor induction with multiple goals.</p>\n<blockquote>\n<p>Please give pointers to some examples of well-founded induction over a <br>\nmeasure function in Isabelle 2008.  I know of Makarius' note \"Structured <br>\nInduction Proofs ...\", but I still can't get things to work in the <br>\nstructured way (as opposed to using the object language to give an <br>\nexplicit induction predicate ...).</p>\n</blockquote>\n<p>Maybe you did not use the proper rule, which is wf_induct_rule as opposed <br>\nto the old wf_induct (the correct rule is already declared as canonical <br>\ninduction scheme for <code>wf r</code> facts).  Here is an example pattern involving <br>\nboth an extra parameter x and premise \"A x a\", apart from the induction <br>\nargument a:</p>\n<p>lemma<br>\n  fixes a :: 'a<br>\n    and r :: \"('a * 'a) set\"<br>\n    and x :: 'b<br>\n  assumes \"wf r\"<br>\n    and \"A x a\"<br>\n  shows \"B x a\"<br>\nusing assms<br>\nproof (induct a arbitrary: x)<br>\n  case (less a)<br>\n  note prem = <code>A x a</code><br>\n    -- {* cf. @{thm less.prems} *}<br>\n  note hyp = <code>!!x y. (y, a) : r ==&gt; A x y ==&gt; B x y</code><br>\n    -- {* cf. @{thm less.hyps} *}<br>\n  show ?case sorry<br>\nqed</p>\n<p>The example from the \"Structured Induction Proofs ...\" paper is in <br>\nsrc/HOL/Isar_examples/Puzzle.thy (it uses the less_induct rule).</p>\n<p>Makarius</p>",
        "id": 294065371,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825248
    },
    {
        "content": "<p>From: Randy Pollack &lt;<a href=\"mailto:rpollack@inf.ed.ac.uk\">rpollack@inf.ed.ac.uk</a>&gt;<br>\nIn the following example (taken from<br>\n~~/src/HOL/Induct/Common_Patterns.thy) there is apparently unnecessary<br>\nduplication.</p>\n<p>lemma<br>\n  fixes n :: nat<br>\n  shows \"P n\" and \"Q n\"<br>\nproof (induct n)<br>\n  case 0 case 1<br>\n  show \"P 0\" sorry<br>\nnext<br>\n  case 0 case 2<br>\n  show \"Q 0\" sorry<br>\nnext<br>\n  case (Suc n) case 1<br>\n  note hyps = <code>P n</code> <code>Q n</code>              (<strong>** this line ... </strong>**)<br>\n  show \"P (Suc n)\" sorry<br>\nnext<br>\n  case (Suc n) case 2<br>\n  note hyps = <code>P n</code> <code>Q n</code>              (<strong>** ... duplicated </strong>*)<br>\n  show \"Q (Suc n)\" sorry<br>\nqed</p>\n<p>I want to know how to avoid this duplication.  Even more, I have the<br>\ncommon example</p>\n<p>lemma<br>\nassumes h:\"inductiveR x\"<br>\nand</p>",
        "id": 294136530,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844507
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nOn Sun, May 15, 2011 at 2:56 PM, Randy Pollack &lt;<a href=\"mailto:rpollack@inf.ed.ac.uk\">rpollack@inf.ed.ac.uk</a>&gt; wrote:</p>\n<blockquote>\n<p>In the following example (taken from<br>\n~~/src/HOL/Induct/Common_Patterns.thy) there is apparently unnecessary<br>\nduplication.</p>\n<p>lemma<br>\n fixes n :: nat<br>\n shows \"P n\" and \"Q n\"<br>\nproof (induct n)<br>\n case 0 case 1<br>\n show \"P 0\" sorry<br>\nnext<br>\n case 0 case 2<br>\n show \"Q 0\" sorry<br>\nnext<br>\n case (Suc n) case 1<br>\n note hyps = <code>P n</code> <code>Q n</code>              (<strong>** this line ... </strong>**)<br>\n show \"P (Suc n)\" sorry<br>\nnext<br>\n case (Suc n) case 2<br>\n note hyps = <code>P n</code> <code>Q n</code>              (<strong>** ... duplicated </strong>*)<br>\n show \"Q (Suc n)\" sorry<br>\nqed</p>\n</blockquote>\n<p>Hi Randy,</p>\n<p>It is the \"next\" command that removes the local definition of \"hyps\"<br>\nfrom scope. Maybe you could try something like this:</p>\n<p>lemma<br>\n fixes n :: nat<br>\n shows \"P n\" and \"Q n\"<br>\nproof (induct n)<br>\n  case 0<br>\n    case 1<br>\n    show \"P 0\" sorry<br>\n    case 2<br>\n    show \"Q 0\" sorry<br>\nnext<br>\n  case (Suc n)<br>\n    note hyps = <code>P n</code> <code>Q n</code><br>\n    case 1<br>\n    show \"P (Suc n)\" using hyps sorry<br>\n    case 2<br>\n    show \"Q (Suc n)\" using hyps sorry<br>\nqed</p>\n<blockquote>\n<p>I want to know how to avoid this duplication.  Even more, I have the<br>\ncommon example</p>\n<p>lemma<br>\nassumes h:\"inductiveR x\"<br>\nand</p>\n</blockquote>\n<p>It looks like the rest of your question was cut off. Could you resend it?</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294136547,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844513
    }
]