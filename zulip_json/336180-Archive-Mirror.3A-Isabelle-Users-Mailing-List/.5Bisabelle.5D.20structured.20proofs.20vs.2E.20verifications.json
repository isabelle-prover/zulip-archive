[
    {
        "content": "<p>From: Gergely Buday &lt;<a href=\"mailto:gbuday@gmail.com\">gbuday@gmail.com</a>&gt;<br>\nHi,</p>\n<p>upon trying to verify some easy theorems I get the response that why I<br>\ndon't solve them by simp_all or some other automatic method. I do this<br>\nas I want to learn how to do a rigorous, step-by-step structured Isar<br>\nproof.</p>\n<p>But it is clear that for larger theories and more diffcult lemmas one<br>\nhas to combine structured proofs with automatic methods. It is also<br>\nmore economic if the goal is not a research paper but a verification<br>\nper se.</p>\n<p>Is it written down somewhere which kind of proofs can be solved<br>\nautomatically, and which need more user interaction? What I have seen<br>\ntells me that e.g. induction should be explicit as Isabelle does not<br>\nfigure out which variable is worth doing induction upon.</p>\n<p>If there is no explicit writing on this, which afp entry or regular<br>\ntheory would you recommend to read?</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294281781,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660920600
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThe proofs that are most likely to be done by a simple induction followed by auto are properties of recursively defined functions. Once you have existential quantifiers in your assumptions, forward reasoning using other lemmas, or tricky calculations involving arithmetic formulas, then you find yourself needing a structured proof.</p>\n<p>Often it easiest simply to try induction and auto, to see what is left over. Sometimes these leftover subgoals suggest lemmas to prove first. You can even prove these locally in “nested blocks” (admittedly, an advanced technique); by proving these lemmas first, you may find that induction and auto will now do the job.</p>\n<p>Larry</p>",
        "id": 294281993,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660920667
    }
]