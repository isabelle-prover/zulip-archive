[
    {
        "content": "<p>From: Randy Pollack &lt;<a href=\"mailto:rpollack@inf.ed.ac.uk\">rpollack@inf.ed.ac.uk</a>&gt;<br>\nWhere can I find documentation about sublocales?  The Isabelle/Isar<br>\nReference Manual (2009) apparently does not contain the string<br>\n\"sublocale\".  The Tutorial to Locales and Locale Interpretation (2009)<br>\ndoes not include the syntax that Andreas suggested to me:</p>\n<blockquote>\n<p>sublocale HEv0 &lt; F0HE : HE \"%X. if ... then v0 else F X\"<br>\nunfolding F0_def[symmetric]</p>\n</blockquote>\n<p>Thanks,<br>\nRandy<br>\n--<br>\nAndreas Lochbihler writes:</p>\n<blockquote>\n<p>Hi Randy,</p>\n<blockquote>\n<p>Is there a locale expression (?) that when interpreted with with FF<br>\nand vv, gives the context of HE interpreted with<br>\n(%X. if ... then vv else FF X)?  (Maybe using a \"where\" clause?)<br>\nIf I understand you correctly, you want to have an interpretation of HE <br>\nfor F0 (with the F0's definition unfolded) whenever you interpret HEv0. <br>\nYou can do this by making HEv0 a sublocale of HE with F instantiated to F0:</p>\n</blockquote>\n<p>sublocale HEv0 &lt; F0HE : HE \"%X. if ... then v0 else F X\"<br>\nunfolding F0_def[symmetric]<br>\nby(unfold_locales)(rule HEF0)</p>\n<p>where HEF0 refers to your lemma that shows \"fixF.HE F0\".</p>\n<p>Now, whenever you interpret HEv0, this also interprets HE with F0 <br>\nunfolded. The constants and lemmas generated by this process are <br>\nprefixed by F0HE to distinguish them from those that obtained directly <br>\nfrom HE. Also, already inside the HEv0 locale, you can access the HE <br>\ncontext for F0.</p>\n<p>Is that what you wanted?</p>\n<p>Regards,<br>\nAndreas</p>\n<p>Randy Pollack schrieb:</p>\n<blockquote>\n<p>I'm reasoning about a properties of a fixed hypothetical function.  I<br>\nwant to say \"if F has some specified properties then some given<br>\nvariant, F0 of F, has the same properties\".</p>\n<p>First, \"F has property HE\":</p>\n<p>locale fixF = fixes F :: sometype<br>\n  begin<br>\n  abbreviation HE :: \"bool\" where \"HE == ...<br>\n  ...<br>\n  end<br>\n  locale HE = fixF + assumes HE[rule_format]: HE</p>\n<p>If some F has property HE then some variant, F0, of F depending on an<br>\narbitrary constant, v0, also has that property.  I can say:</p>\n<p>locale HEv0 = HE + fixes v0 :: sometype =<br>\n  definition F0 :: Ftyp where \"F0 X = (if ... then v0 else F X)\"<br>\n  lemma shows \"fixF.HE F0\"<br>\n    proof (... using HE ...) qed</p>\n<p>If we interpret locale HEv0 with some actual FF and vv, we get a<br>\ncontext where F is interpreted by FF, v is interpreted by vv, and</p>\n<p>\"fixF.HE (%X. if ... then vv else FF X)\"</p>\n<p>is a theorem.  This is as expected.  But we have proved that given FF<br>\n(with property HE) and vv then (%X. if ... then vv else FF X)<br>\nis a good interpretation of locale HE.</p>\n<p>Is there a locale expression (?) that when interpreted with with FF<br>\nand vv, gives the context of HE interpreted with <br>\n(%X. if ... then vv else FF X)?  (Maybe using a \"where\" clause?)</p>\n<p>Thanks,<br>\nRandy<br>\n</p>\n</blockquote>\n</blockquote>\n<p>-- <br>\nThe University of Edinburgh is a charitable body, registered in<br>\nScotland, with registration number SC005336.</p>",
        "id": 294081469,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830829
    },
    {
        "content": "<p>From: Clemens Ballarin &lt;<a href=\"mailto:ballarin@in.tum.de\">ballarin@in.tum.de</a>&gt;<br>\nQuoting Randy Pollack &lt;<a href=\"mailto:rpollack@inf.ed.ac.uk\">rpollack@inf.ed.ac.uk</a>&gt;:</p>\n<blockquote>\n<p>Where can I find documentation about sublocales?  The Isabelle/Isar<br>\nReference Manual (2009) apparently does not contain the string<br>\n\"sublocale\".  The Tutorial to Locales and Locale Interpretation (2009)<br>\ndoes not include the syntax that Andreas suggested to me:</p>\n<blockquote>\n<p>sublocale HEv0 &lt; F0HE : HE \"%X. if ... then v0 else F X\"<br>\nunfolding F0_def[symmetric]</p>\n</blockquote>\n</blockquote>\n<p>The tutorial is currently the only documentation for this feature.</p>\n<p>F0HE : HE \"%X. if ... then v0 else F X\"</p>\n<p>is a correct expression according to the grammar given in the tutorial  <br>\non page 16.  It consists of a single instance with qualifier F0HE,  <br>\nqualified name HE and term \"%X. if ... then v0 else F X\".  The effect  <br>\nof the command is an interpretation of the specified instance of HE  <br>\nrelative to HEv0.  Note that the scope of the parameters of HEv0  <br>\nextends over the expression.</p>\n<p>Clemens</p>\n<blockquote>\n<p>--<br>\nAndreas Lochbihler writes:</p>\n<blockquote>\n<p>Hi Randy,</p>\n<blockquote>\n<p>Is there a locale expression (?) that when interpreted with with FF<br>\nand vv, gives the context of HE interpreted with<br>\n(%X. if ... then vv else FF X)?  (Maybe using a \"where\" clause?)<br>\nIf I understand you correctly, you want to have an interpretation of HE<br>\nfor F0 (with the F0's definition unfolded) whenever you interpret HEv0.<br>\nYou can do this by making HEv0 a sublocale of HE with F   <br>\ninstantiated to F0:</p>\n</blockquote>\n<p>sublocale HEv0 &lt; F0HE : HE \"%X. if ... then v0 else F X\"<br>\nunfolding F0_def[symmetric]<br>\nby(unfold_locales)(rule HEF0)</p>\n<p>where HEF0 refers to your lemma that shows \"fixF.HE F0\".</p>\n<p>Now, whenever you interpret HEv0, this also interprets HE with F0<br>\nunfolded. The constants and lemmas generated by this process are<br>\nprefixed by F0HE to distinguish them from those that obtained directly<br>\nfrom HE. Also, already inside the HEv0 locale, you can access the HE<br>\ncontext for F0.</p>\n<p>Is that what you wanted?</p>\n<p>Regards,<br>\nAndreas</p>\n<p>Randy Pollack schrieb:</p>\n<blockquote>\n<p>I'm reasoning about a properties of a fixed hypothetical function.  I<br>\nwant to say \"if F has some specified properties then some given<br>\nvariant, F0 of F, has the same properties\".</p>\n<p>First, \"F has property HE\":</p>\n<p>locale fixF = fixes F :: sometype<br>\n  begin<br>\n  abbreviation HE :: \"bool\" where \"HE == ...<br>\n  ...<br>\n  end<br>\n  locale HE = fixF + assumes HE[rule_format]: HE</p>\n<p>If some F has property HE then some variant, F0, of F depending on an<br>\narbitrary constant, v0, also has that property.  I can say:</p>\n<p>locale HEv0 = HE + fixes v0 :: sometype =<br>\n  definition F0 :: Ftyp where \"F0 X = (if ... then v0 else F X)\"<br>\n  lemma shows \"fixF.HE F0\"<br>\n    proof (... using HE ...) qed</p>\n<p>If we interpret locale HEv0 with some actual FF and vv, we get a<br>\ncontext where F is interpreted by FF, v is interpreted by vv, and</p>\n<p>\"fixF.HE (%X. if ... then vv else FF X)\"</p>\n<p>is a theorem.  This is as expected.  But we have proved that given FF<br>\n(with property HE) and vv then (%X. if ... then vv else FF X)<br>\nis a good interpretation of locale HE.</p>\n<p>Is there a locale expression (?) that when interpreted with with FF<br>\nand vv, gives the context of HE interpreted with<br>\n(%X. if ... then vv else FF X)?  (Maybe using a \"where\" clause?)</p>\n<p>Thanks,<br>\nRandy<br>\n</p>\n</blockquote>\n</blockquote>\n<p>--<br>\nThe University of Edinburgh is a charitable body, registered in<br>\nScotland, with registration number SC005336.</p>\n</blockquote>",
        "id": 294081506,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830842
    }
]