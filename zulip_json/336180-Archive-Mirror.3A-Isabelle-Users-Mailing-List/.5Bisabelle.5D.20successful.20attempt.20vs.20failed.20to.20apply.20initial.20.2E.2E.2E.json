[
    {
        "content": "<p>From: Buday Gergely &lt;<a href=\"mailto:gbuday@karolyrobert.hu\">gbuday@karolyrobert.hu</a>&gt;<br>\nHi,</p>\n<p>sometimes I get</p>\n<p>Successful attempt to solve goal by exported rule:</p>\n<p>and</p>\n<p>goal:<br>\n  No subgoals!</p>\n<p>but with</p>\n<p>Failed to apply initial proof method</p>\n<p>and Isabelle/Jedit does not accept the proof. Where does it get the formula referred as \"exported rule\" from </p>\n<p>and why the system says No subgoals! when despite of this it does not accept the proof?</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294670436,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173236
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 17 Mar 2016, Buday Gergely wrote:</p>\n<blockquote>\n<p>sometimes I get</p>\n<p>Successful attempt to solve goal by exported rule:</p>\n<p>and</p>\n<p>goal:<br>\n No subgoals!</p>\n</blockquote>\n<p>This means a certain fix-assume-show refinement has worked out.</p>\n<blockquote>\n<p>but with</p>\n<p>Failed to apply initial proof method</p>\n<p>and Isabelle/Jedit does not accept the proof.</p>\n</blockquote>\n<p>This means that proof method application has failed, e.g. a \"by method\" <br>\nstep for the proof of \"show\" above.</p>\n<blockquote>\n<p>and why the system says No subgoals! when despite of this it does not <br>\naccept the proof?</p>\n</blockquote>\n<p>The message stems from really ancient time where there was a linear, <br>\nunstructured goal state.</p>\n<p>In Isabelle2016 the default split into Output vs. State panel should make <br>\nthe situation a bit clearer.  Did you use that default? Or did you switch <br>\nback to the old way?</p>\n<p>Makarius</p>",
        "id": 294670450,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173242
    },
    {
        "content": "<p>From: Buday Gergely &lt;<a href=\"mailto:gbuday@karolyrobert.hu\">gbuday@karolyrobert.hu</a>&gt;<br>\nI used Proof state, yes. Switching it off I see</p>\n<p>show ∃Ys::form list.    Ys    cf⇒ (A::form) → (C::form)      <br>\nSuccessful attempt to solve goal by exported rule:<br>\n  (   (?A2::form) # (?Xsa2::form list)     ⇒  (?C2::form)    ) ⟹<br>\n  (∃Ys::form list.    Ys    cf⇒ ?C2     ) ⟹ ∃Ys::form list.    Ys    cf⇒ ?A2 → ?C2      <br>\nFailed to apply initial proof method⌂:<br>\nusing this:<br>\n  ∃Ys::form list.    Ys    cf⇒ (C::form)     <br>\ngoal (1 subgoal):</p>\n<ol>\n<li>∃Ys::form list.    Ys    cf⇒ A → C     <br>\nvariables:<br>\n  A, C :: form</li>\n</ol>\n<p>Is the above \"exported rule\" a fact, and, where does it come from? Can I use it to prove the goal, or it is a hypothetical fact that would prove the goal?</p>\n<p>And, is there a reference of Output and State messages? The Isabelle/jEdit manual does not seem to contain one.</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294670493,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173254
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>Is the above \"exported rule\" a fact, and, where does it come from? Can I use it to prove the goal, or it is a hypothetical fact that would prove the goal?</p>\n</blockquote>\n<p>Let's say you need to show a HOL implication \"A --&gt; B\".</p>\n<p>lemma \"A ⟶ B\"<br>\nproof<br>\n (* The proof command applies a standard rule. As a result,<br>\n    the state panel shows an unstructured goal state A ⟹ B. *)</p>\n<p>assume A<br>\n  show B<br>\n    sorry<br>\nqed</p>\n<p>Do you agree that this is a syntactically correct proof \"template\"? This<br>\nis what the system tells you:</p>\n<blockquote>\n<p>Successful attempt to solve goal by exported rule</p>\n</blockquote>\n<p>It could use the locally fixed variables, assumptions, and shown<br>\npropositions to (partly) discharge a subgoal in the goal state.</p>\n<p>When you replace the \"sorry\" with a subproof which doesn't work, the<br>\nouter proof is still syntactically correct. But the system also tells<br>\nyou that the subproof itself is incorrect (\"Failed to apply ...\").</p>\n<p>It may help to think of Isar as a compiler with error recovery. Even if<br>\na part of a program (= proof) does not type check, the compiler<br>\n\"assumes\" correctness and lets you go on with the rest. It'll only<br>\nreport the error where it actually occurred.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294670553,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173273
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe GUI panels merely display what certain prover commands produce, so the <br>\nplace to look is the isar-ref manual. For command 'show' it says:</p>\n<p>➧ @{command \"show\"}~‹a: φ› is like @{command \"have\"}~‹a: φ› plus a second<br>\n   stage to refine some pending sub-goal for each one of the finished result,<br>\n   after having been exported into the corresponding context (at the head of<br>\n   the sub-proof of this @{command \"show\"} command).</p>\n<p>To accommodate interactive debugging, resulting rules are printed before<br>\n   being applied internally. Even more, interactive execution of @{command<br>\n   \"show\"} predicts potential failure and displays the resulting error as a<br>\n   warning beforehand. Watch out for the following message:<br>\n   @{verbatim [display] ‹Local statement fails to refine any pending goal›}</p>\n<p>Makarius</p>",
        "id": 294670580,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173285
    }
]