[
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nHi,</p>\n<p>Is anyone interested in a common syntax for point-free operations? By this I mean, for example:</p>\n<p>abbreviation (input)<br>\n  pred_conj :: \"('a \\&lt;Rightarrow&gt; bool) \\&lt;Rightarrow&gt; ('a \\&lt;Rightarrow&gt; bool) \\&lt;Rightarrow&gt; 'a \\&lt;Rightarrow&gt; bool\" (infixr \"\\&lt;^bold&gt;\\&lt;and&gt;\" 35) where<br>\n  \"a \\&lt;^bold&gt;\\&lt;and&gt; b \\&lt;equiv&gt; \\&lt;lambda&gt;s. a s \\&lt;and&gt; b s\"</p>\n<p>i.e., working in the reader monad.</p>\n<p>Makarius suggested using \\&lt;^bold&gt;. See the attached for the operations I’ve used thus far.</p>\n<p>I’m not so ambitious as to attempt to make list and set comprehensions work, etc.</p>\n<p>If there is such interest, and this is a reasonable starting point, can someone add this file to HOL/Library? There are similar operations already defined in Linear_Temporal_Logic_on_Streams, btw.</p>\n<p>One limitation is that \\&lt;^bold&gt; does not work so well for multi-character tokens, such as:</p>\n<p>abbreviation (input)<br>\n  pred_If :: \"('a \\&lt;Rightarrow&gt; bool) \\&lt;Rightarrow&gt; ('a \\&lt;Rightarrow&gt; 'b) \\&lt;Rightarrow&gt; ('a \\&lt;Rightarrow&gt; 'b) \\&lt;Rightarrow&gt; 'a \\&lt;Rightarrow&gt; 'b\" (\"(\\&lt;^bold&gt;if (_)/ \\&lt;^bold&gt;then (_)/ \\&lt;^bold&gt;else (_))\" [0, 0, 10] 10) where<br>\n  “\\&lt;^bold&gt;if P \\&lt;^bold&gt;then x \\&lt;^bold&gt;else y \\&lt;equiv&gt; \\&lt;lambda&gt;s. if P s then x s else y s”</p>\n<p>thanks,<br>\npeter<br>\n<a href=\"/user_uploads/14278/9dS3SEjORPbmIzS0nCFR_mDk/PointFree.thy\">PointFree.thy</a></p>",
        "id": 294659550,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169411
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\n\\&lt;^bold&gt; is a control symbol, it operates on the subsequent symbol. <br>\nTokens are not involved here.</p>\n<p>Multi-symbol control symbols are managed by Isabelle/jEdit: selecting a <br>\nblock and applying certain actions adds or removes control symbols for<br>\neach symbol in the text.</p>\n<p>Quotation from the \"jedit\" manual:</p>\n<p>\\paragraph{Control symbols.} There are some special control symbols<br>\n   to modify the display style of a single symbol (without<br>\n   nesting). Control symbols may be applied to a region of selected<br>\n   text, either using the \\emph{Symbols} panel or keyboard shortcuts or<br>\n   jEdit actions.  These editor operations produce a separate control<br>\n   symbol for each symbol in the text, in order to make the whole text<br>\n   appear in a certain style.</p>\n<p>The manual tells more about these actions and default keyboard shortcuts.</p>\n<p>Makarius</p>",
        "id": 294659945,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169541
    }
]