[
    {
        "content": "<p>From: Gergely Buday &lt;<a href=\"mailto:gbuday@gmail.com\">gbuday@gmail.com</a>&gt;<br>\nHi,</p>\n<p>in Nominal/Ex/Lambda.thy a proof command refers to path.induct . Now I<br>\ncannot use</p>\n<p>@{term path.induct}</p>\n<p>in a proof document as it fails, but</p>\n<p>@{term path_induct}</p>\n<p>which works but I wonder as it does not exist as a valid term.</p>\n<p>Do I not understand something important about terms and antiquotations?</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294322548,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927397
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>In my Isabelle2014, I did not find the file, so I tried to reproduce a<br>\nminimal example for you.</p>\n<p>theory Scratch<br>\nimports Main<br>\nbegin</p>\n<p>fun test :: \"nat â‡’ nat\" where<br>\n  \"test 0 = 0\" |<br>\n  \"test (Suc n) = test n\"</p>\n<p>text{<em>Undefined constant: @{term test.induct}.</em>} (*Isabelle2014<br>\nhighlights the error in jEdit, without running latex*)<br>\ntext{*You can use the term antiquotation to display terms: @{term<br>\n\"test 0 = 0\"} *}<br>\ntext{*The term antiquotation checks for errors: @{term \"test 0 = -1\"}<br>\n<em>} (</em>Type unification failed: No type arity nat :: uminus*)<br>\ntext{*You can use the text antiquotation to do things without checks:<br>\n@{text \"test 0 = -1\"}*}<br>\nthm test.induct<br>\ntext{*If you want to reference facts (things you can also view with<br>\nthe thm command in Isabelle), use the thm antiquotation: @{thm<br>\ntest.induct}*}</p>\n<p>end</p>\n<p>Happy New Year<br>\n  Cornelius</p>",
        "id": 294322566,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927407
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear Gergely,</p>\n<p>maybe you wanted to type</p>\n<p>@{thm path.induct}</p>\n<p>which would work, since \"path.induct\" is the name of a theorem (from the <br>\nnominal2 repository, which I'm just guessing you are referring to).</p>\n<p>The reason why @{term path_induct} works (even though, no constant of <br>\nthis name exists), is that it fits the \"ident\" token category (see <br>\nisar-ref, ~ page 51) and is just interpreted as some variable, while <br>\n\"path.induct\" is of category \"longident\" (which is not allowed for <br>\nvariables, I think) and thus interpreted as constant name.</p>\n<p>This difference is also visible in Isabelle/jEdit, where in</p>\n<p>@{term path_induct}</p>\n<p>\"path_induct\" is blue (and identified as \"free variable\" by C-hover) and in</p>\n<p>@{term path.induct}</p>\n<p>\"path.induct\" is black (and identified as belonging to the term language <br>\nby C-hover).</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294322572,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927412
    },
    {
        "content": "<p>From: Gergely Buday &lt;<a href=\"mailto:gbuday@gmail.com\">gbuday@gmail.com</a>&gt;<br>\nChristian Sternagel wrote:</p>\n<p>Sorry I did not include a rationale for this. My aim is a list that<br>\ncontains theorem names and the theorems itself. First I used plain<br>\ntext but the underscores in theorem names break latex typesetting as<br>\nit thinks as if it were some subscript and missing the math mode $.<br>\nReplacing underscores with backslash-underscore is tedious by hand. So<br>\nI tried the following scheme:</p>\n<p>\\item @{term alpha_lst} @{thm alpha_lst}</p>\n<p>Should I use another antiquotation keyword for such theorem names as<br>\npath.induct? It would be nice if Isabelle checked its validity.</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294322587,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927417
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nI think @{thm [source] some_theorem_name} might work (i.e., print the <br>\nname instead of the theorem statement; but it has been a while since I <br>\nused this and I haven't had time to check).</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294322597,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927422
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nYes, @{thm [source] name} is the way to do it.</p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294322617,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927434
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSuch manual LaTeX-ing is indeed pointless in the Isabelle document <br>\npreparation system.  If you need unchecked text that looks like formal <br>\ntext, the @{text} antiquotation can do that.</p>\n<p>Makarius</p>\n<hr>\n<p><a href=\"http://stop-ttip.org\">http://stop-ttip.org</a>  1,236,823 Participants</p>\n<hr>",
        "id": 294322627,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927440
    }
]