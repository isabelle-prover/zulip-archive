[
    {
        "content": "<p>From: Viorel Preoteasa &lt;<a href=\"mailto:viorel.preoteasa@abo.fi\">viorel.preoteasa@abo.fi</a>&gt;<br>\nHello,</p>\n<p>I have a programming construct  construct of the following form:</p>\n<p>update (% (x::'a, y::'b, z::'c): {(x'::', y'::'b, z::'c) . x' = x+1 /\\ <br>\ny'=y / 2 /\\ z' = z + x + y})</p>\n<p>Is it possible to introduce the syntax:</p>\n<p>[: x::'a, y::'b, z::'c := x'::'a, y'::'b, z::'c . x' = x+1 /\\ y'=y / 2 <br>\n/\\ z' = z + x + y :]</p>\n<p>or</p>\n<p>[: x, y, z := x', y', z . (x'::'a) = x+1 /\\ (y'::'b)=y / 2 /\\ (z'::'c) = <br>\nz + x + y :]</p>\n<p>Best regards,</p>\n<p>Viorel</p>",
        "id": 294149158,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848653
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman@in.tum.de\">huffman@in.tum.de</a>&gt;<br>\nHere's something that's close to what you want. It does require<br>\nparentheses around the tuples of variable bindings, though. (The<br>\nnonterminal \"pttrn\" is what is used for the binders in lambda<br>\nabstractions and set comprehensions.)</p>\n<p>syntax \"_foo\" :: \"pttrn =&gt; pttrn =&gt; logic =&gt; logic\" (\"[: _ := _ . _:]\")<br>\ntranslations \"_foo x y t\" == \"CONST update (_abs x (_Coll y t))\"<br>\nterm \"[: (x::'a, y::'b) := (x'::'a, y'::'b) . P x y x' y' :]\"</p>\n<p>And here's another variant where the parentheses are not required.<br>\nIt's a little more awkward to define because the syntax translation<br>\nneeds to convert from nonterminal \"patterns\" (defined in<br>\nHOL/Product_Type.thy, used for tuple binders) to nonterminal \"pttrn\".</p>\n<p>syntax \"_foo\" :: \"patterns =&gt; patterns =&gt; logic =&gt; logic\" (\"[: _ := _ . _:]\")<br>\ntranslations<br>\n  \"_foo (_patterns x xs) (_patterns y ys) t\" == \"CONST update (_abs<br>\n(_pattern x xs) (_Coll (_pattern y ys) t))\"<br>\n  \"_foo x y t\" == \"CONST update (_abs x (_Coll y t))\"</p>\n<p>term \"[: x::'a, y::'b := x'::'a, y'::'b . P x y x' y' :]\"</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294149174,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848659
    },
    {
        "content": "<p>From: Viorel Preoteasa &lt;<a href=\"mailto:viorel.preoteasa@abo.fi\">viorel.preoteasa@abo.fi</a>&gt;<br>\nHello Brian,</p>\n<p>Thank you very much. It works nicely. It seems<br>\nthat the syntax [: x, y := x', y' . ... :] works together<br>\nwith the syntax [: R :] = update R when R has the<br>\ntype 'a =&gt; ('a set).</p>\n<p>Viorel</p>",
        "id": 294149190,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848665
    }
]