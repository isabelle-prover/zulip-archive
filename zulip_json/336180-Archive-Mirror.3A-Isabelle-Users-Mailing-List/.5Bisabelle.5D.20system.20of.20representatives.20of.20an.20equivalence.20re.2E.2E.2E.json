[
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear fellow Isabellers,</p>\n<p>I am wondering whether there is already a way in the Isabelle/HOL <br>\nlibrary (or the AFP, for that matter) to obtain a system of <br>\nrepresentatives (I'm not sure whether this is the correct term, in <br>\nGerman it is called \"Repräsentantensystem\") for a given equivalence <br>\nrelation, i.e., a set containing one representative of each equivalence <br>\nclass?</p>\n<p>thanks in advance and cheers</p>\n<p>chris</p>",
        "id": 294275369,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918599
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@in.tum.de\">traytel@in.tum.de</a>&gt;<br>\nHi Chris,</p>\n<p>Something like this: \"(λX. SOME x. x ∈ X) <code> Equiv_Relations.proj r </code> <br>\nField r\"</p>\n<p>The function Equiv_Relations.proj gives you the (non-empty) equivalence <br>\nclass of an element.</p>\n<p>Dmitriy</p>",
        "id": 294275391,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918606
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nThanks Dimitriy,</p>\n<p>That looks similar to the construction I'm currently using ;), i.e.,</p>\n<p>\"repsys A R = {(SOME x. x ∈ X) | X. X ∈ A // R}\"</p>\n<p>I was hoping that some properties are already proved about it. E.g., <br>\nthat two non-equal elements of \"repsys A R\" are not in relation w.r.t. <br>\n\"R\", \"repsys A R\" is a subset of \"A\", ...</p>\n<p>But it should be easy to do anyway. Would this be interesting for <br>\nanybody else?</p>\n<p>cheers</p>\n<p>chris</p>\n<p>btw: I could not find the constant \"proj\" in Equiv_Relations.</p>",
        "id": 294275401,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918612
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@in.tum.de\">traytel@in.tum.de</a>&gt;<br>\nAm 11.04.2014 10:16, schrieb Christian Sternagel:</p>\n<blockquote>\n<p>Thanks Dimitriy,</p>\n<p>That looks similar to the construction I'm currently using ;), i.e.,</p>\n<p>\"repsys A R = {(SOME x. x ∈ X) | X. X ∈ A // R}\"</p>\n<p>I was hoping that some properties are already proved about it. E.g., <br>\nthat two non-equal elements of \"repsys A R\" are not in relation w.r.t. <br>\n\"R\", \"repsys A R\" is a subset of \"A\", ...</p>\n<p>But it should be easy to do anyway.<br>\nIndeed.</p>\n</blockquote>\n<blockquote>\n<p>btw: I could not find the constant \"proj\" in Equiv_Relations.<br>\nOops, accidentally my answer referred to a development version (e.g. <br>\naff193f53a64), sorry for that. In Isabelle2013-2 this constant is in <br>\nsrc/HOL/BNF/Equiv_Relations_More.</p>\n</blockquote>\n<p>Dmitriy</p>",
        "id": 294275416,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918618
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nAre specific representatives actually needed? It might be better to use the equivalence classes themselves. That is the point of this construction.</p>\n<p>--lcp</p>",
        "id": 294275520,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918648
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear Larry,</p>\n<p>at least I'm under the impression that the representatives are needed ;).</p>\n<p>Let me elaborate: I am formalizing a proof as part of IsaFoR (mainly <br>\nfirst-order term rewriting). In the remainder of IsaFoR (which is <br>\nalready quite huge) term rewrite systems (TRS) are just represented as <br>\nsets of pairs of terms. This is a well-supported type and easy to use.</p>\n<p>But in the new proof a crucial property is that at a certain point a TRS <br>\ndoes not contain variants (i.e., variable renamed versions of rules). <br>\nSince I want to reuse all the existing lemmas about TRSs but for the <br>\ncurrent proof I need a TRS without variants, I defined the operation of <br>\nremoving variants from TRSs (via first building the equivalence classes <br>\nw.r.t. variable renaming and then projecting, using SOME, to a system of <br>\nrepresentatives).</p>\n<p>Please let me know what you think about this setup or if you have any <br>\nsuggestions for improvements.</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294275556,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918661
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nA general suggestion that might work in this type of situation is to prove your theorems in a context that assumes that you have an element of an equivalence class. In your case, perhaps you need the additional assumption that this element contains no variants. Then it may be enough to show that every equivalence class contains at least one such element.</p>\n<p>Larry Paulson</p>",
        "id": 294275578,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918667
    }
]