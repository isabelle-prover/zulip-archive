[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Eisbach experts,</p>\n<p>I would like to use the tactic method inside a method definition with Eisbach.<br>\nHere is a minimal example:</p>\n<p>method foo = (tactic {* Transfer.transfer_step_tac @{context} 1 *})</p>\n<p>Obviously, this does not work, because the proof tactic requires a context and using <br>\n@{context} gives the compile-time context, while I should rather use the context at the <br>\ninvocation site. Is there a way to access the dynamic context from within an Eisbach <br>\nmethod definition? Or do I have to wrap the tactic expression in a method definition first?</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294653942,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167235
    },
    {
        "content": "<p>From: Daniel Matichuk &lt;<a href=\"mailto:daniel.matichuk@nicta.com.au\">daniel.matichuk@nicta.com.au</a>&gt;<br>\nCurrently there is no standard way to directly access the run-time context inside of an Eisbach method. In general the use of the \"tactic\" method in Eisbach is not well supported, mostly<br>\ndue to not handling ML antiquotations as one might expect. The usual approach here is indeed to first lift your underlying tactic into a method with method_setup.</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294654039,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167278
    }
]