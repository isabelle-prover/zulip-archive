[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nDear all,</p>\n<p>when I declare syntax for a constant that coincides with the name of a type <br>\nconstructor, Isabelle afterwards cannot parse the type name any more. Here's an <br>\nexample:</p>\n<p>typedecl mytype<br>\nconsts foo :: \"nat =&gt; nat\"<br>\nnotation foo (\"mytype\")<br>\ntyp \"mytype\" (* fails with:</p>\n<p>*** Inner syntax error at \"mytype\"<br>\n*** Failed to parse type<br>\n*** At command \"typ\"<br>\n*)</p>\n<p>Why is this? I would have expected term and type syntax to be strictly separated <br>\nsyntactic categories. Is there a mode on which I can restrict notation such that <br>\nit does not mess up type parsing?</p>\n<p>Surprisingly, parsing works again if I add the following type_notation:</p>\n<p>type_notation mytype (\"mytype\")<br>\ntyp \"mytype\"<br>\nterm \"mytype\"</p>\n<p>Can I avoid the extra syntax notation for the type?</p>\n<p>By the way, I used the RC1 of Isabelle2011-1.</p>\n<p>Thanks for any help in advance,<br>\nAndreas</p>",
        "id": 294143703,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846755
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Fri, 30 Sep 2011, Andreas Lochbihler wrote:</p>\n<blockquote>\n<p>when I declare syntax for a constant that coincides with the name of a type <br>\nconstructor, Isabelle afterwards cannot parse the type name any more. Here's <br>\nan example:</p>\n<p>typedecl mytype<br>\nconsts foo :: \"nat =&gt; nat\"<br>\nnotation foo (\"mytype\")<br>\ntyp \"mytype\" (* fails with:</p>\n<p>*** Inner syntax error at \"mytype\"<br>\n*** Failed to parse type<br>\n*** At command \"typ\"<br>\n*)</p>\n<p>Why is this? I would have expected term and type syntax to be strictly <br>\nseparated syntactic categories. Is there a mode on which I can restrict <br>\nnotation such that it does not mess up type parsing?</p>\n<p>Surprisingly, parsing works again if I add the following type_notation:</p>\n<p>type_notation mytype (\"mytype\")<br>\ntyp \"mytype\"<br>\nterm \"mytype\"</p>\n<p>Can I avoid the extra syntax notation for the type?</p>\n</blockquote>\n<p>The syntactic categories of \"logic\" (for the term language) and \"type\" <br>\n(for the type language) are separate in the grammer, but they share the <br>\nsame syntactic framework with a single lexical syntax. So \"mytype\" is <br>\nsubtracted from the identifier category and cannot be used for plain type <br>\nnames later on.</p>\n<blockquote>\n<p>By the way, I used the RC1 of Isabelle2011-1.</p>\n</blockquote>\n<p>Using the new Prover IDE (based on jEdit) in that version makes the <br>\nsituation a bit more clear.  The Term notation introduces a keyword <br>\n\"mytype\", and this is indicated by the colour scheme in the editor buffer <br>\nwhen writing typ \"mytype\".</p>\n<p>Makarius</p>",
        "id": 294143728,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846764
    }
]