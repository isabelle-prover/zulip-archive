[
    {
        "content": "<p>From: Julian Brunner &lt;<a href=\"mailto:julianbrunner@gmail.com\">julianbrunner@gmail.com</a>&gt;<br>\nHello,</p>\n<p>I've run into a situation where the last uncheck phase returns<br>\nabbreviations folded differently than what's shown in the final<br>\noutput. An example:</p>\n<p>setup<br>\n{*<br>\n  let fun out l x = let val _ = writeln (l ^ \": \" ^ (@{make_string} x)) in x end<br>\n  in Context.theory_map (Syntax_Phases.term_uncheck 100 \"test\" (fn _\n=&gt; map (out \"uncheck\"))) end<br>\n*}</p>\n<p>ML {* Syntax_Phases.print_checks @{context} *}</p>\n<p>term \"surj f\"<br>\nterm \"~ surj f\"</p>\n<p>Thet print_checks command shows that the 'test' uncheck phase is the<br>\nlast one to happen. The first term command displays \"uncheck: Const<br>\n(\"Fun.surj\", \"('b ⇒ 'a) ⇒ HOL.bool\") $ Free (\"f\", \"'b ⇒ 'a\")\", showing<br>\nthat the surj abbreviation was successfully folded by the last uncheck<br>\nphase that wasn't 'test'. The second term command, however, outputs<br>\n\"uncheck: Const (\"HOL.not_equal\", \"'a Set.set ⇒ 'a Set.set ⇒<br>\nHOL.bool\") $ (Const (\"Set.range\", \"('b ⇒ 'a) ⇒ 'a Set.set\") $ Free<br>\n(\"f\", \"'b ⇒ 'a\")) $ Const (\"Set.UNIV\", \"'a Set.set\")\". It appears that<br>\ninstead of folding the surj abbreviation, it decided to fold the<br>\nnot_equal abbreviation, which then prevented it from folding surj. Of<br>\ncourse, that's just guesswork on my part. What remains is that<br>\nsomething does successfully fold the surj abbreviation, as the final<br>\nresult in the output panel is \"~ surj f\", but that transformation<br>\nappears to happen after the last uncheck phase.</p>\n<p>So my questions are:</p>\n<ol>\n<li>Is this the way it's intended to work?</li>\n<li>\n<p>If it is, is there any way to do transformations (like<br>\ncheck/uncheck) on the final terms as they appear in the output?</p>\n</li>\n<li>\n<p>As an aside, which abbreviation takes priority when there a<br>\nconflict as in the case of surj? I haven't been able to find anything<br>\nabout it in the reference manual.</p>\n</li>\n</ol>\n<p>Thanks in advance,<br>\n Julian</p>",
        "id": 294274300,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918239
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@in.tum.de\">traytel@in.tum.de</a>&gt;<br>\nHi Julian,</p>\n<p>I assume, abbreviations are resolved in a first-come-first-served manner <br>\nw.r.t. to the used traversal of the term (looks like top-down when <br>\nconsidering your example).</p>\n<p>The output is still \"¬ surj f\" because of the explicit print translation <br>\nin Fun.thy:</p>\n<p>translations<br>\n\"¬ CONST surj f\" &lt;= \"CONST range f ≠ CONST UNIV\"</p>\n<p>Such print/parse translation happen before/after the check/uncheck <br>\nphases (cf. isar-ref Sect. 7.5 Syntax transformations).</p>\n<p>Dmitriy</p>",
        "id": 294274352,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918256
    },
    {
        "content": "<p>From: Julian Brunner &lt;<a href=\"mailto:julianbrunner@gmail.com\">julianbrunner@gmail.com</a>&gt;<br>\nAh, I never noticed that translation, thanks for pointing this out, it<br>\nall makes sense now.</p>",
        "id": 294274370,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918262
    }
]