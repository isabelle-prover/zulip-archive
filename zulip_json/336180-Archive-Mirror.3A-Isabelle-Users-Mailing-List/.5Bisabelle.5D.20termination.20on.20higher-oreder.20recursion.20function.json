[
    {
        "content": "<p>From: li yongjian &lt;<a href=\"mailto:lyj238@gmail.com\">lyj238@gmail.com</a>&gt;<br>\nDear all:<br>\n  I meet a problem on  termination of a higher-oreder recursion<br>\nfunction as follows:<br>\nDespite my efforts of reading the material on function definition<br>\nproblems in the<br>\ndoc directory of Isabelle,  I still cannot prove the following goals<br>\non the termination of the<br>\nfunction evalf .<br>\n Who can help me?</p>\n<p>theory bdd imports \"Main\"<br>\nbegin<br>\ndatatype form =  Var nat | AndList \"form list\" | Xnor form form | BNot form</p>\n<p>definition xnor :: \"bool \\&lt;Rightarrow&gt;bool \\&lt;Rightarrow&gt; bool\" where<br>\n  \"xnor x y \\&lt;equiv&gt; (x \\&lt;and&gt;  y) \\&lt;or&gt; ( ~ x \\&lt;and&gt;~ y)\"</p>\n<p>fun evalf :: \"(nat \\&lt;Rightarrow&gt; bool) \\&lt;Rightarrow&gt; form<br>\n\\&lt;Rightarrow&gt; bool\" where<br>\n  \"evalf e (Var i) = e i\"<br>\n| \"evalf e (AndList L) = foldl conj True (map (evalf e)  L)\"<br>\n| \"evalf e (Xnor f1 f2) = xnor (evalf e f1) (evalf e f2)\"<br>\n|\"evalf e (BNot f) = (~ (evalf e f)) \"<br>\ntermination proof</p>",
        "id": 294163036,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660853873
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c-sterna@jaist.ac.jp\">c-sterna@jaist.ac.jp</a>&gt;<br>\nDear Li Yongjian,</p>\n<p>your function was already proved terminating (automatically) by <br>\nIsabelle/HOL's function package. Note, your usage of the \"fun\" command, <br>\nwhich tries an automatic termination proof, as compared to the <br>\n\"function\" command for manual termination proofs. Your usage of <br>\n\"termination proof\" is superfluous, just remove that line.</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294163045,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660853879
    }
]