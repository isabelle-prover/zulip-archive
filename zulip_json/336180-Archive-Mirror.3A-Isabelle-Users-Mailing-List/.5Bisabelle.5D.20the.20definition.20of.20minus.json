[
    {
        "content": "<p>From: Lucas Dixon &lt;<a href=\"mailto:ldixon@inf.ed.ac.uk\">ldixon@inf.ed.ac.uk</a>&gt;<br>\nHello,<br>\nI noticed the definition to minus today (Isabelle2008):</p>\n<p>primrec minus_nat<br>\nwhere<br>\n  diff_0:     \"m - 0 = (m::nat)\"<br>\n| diff_Suc: \"m - Suc n = (case m - n of 0 =&gt; 0 | Suc k =&gt; k)\"</p>\n<p>I was expecting it to be:</p>\n<p>primrec<br>\n  diff_0:     \"0 - m = 0\"<br>\n| diff_Suc: \"(Suc m) - n = (case n of 0 =&gt; (Suc m) | Suc k =&gt; m - k)\"</p>\n<p>which I think would produce better code and seems more \"natural\" to<br>\nme... so I thought I was probably missing some subtlety... I'd be<br>\ninterested in any reasons for the Isabelle definition.</p>\n<p>thanks,<br>\nlucas</p>",
        "id": 294073779,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828100
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nWe use the traditional definition, which embodies the principle that  <br>\nsubtraction consists of repeated application of the predecessor  <br>\nfunction. Yours does have advantages, however. For example, it is tail  <br>\nrecursive. When this work was done, code generation was not even  <br>\nenvisaged.<br>\nLarry</p>",
        "id": 294073797,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828106
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi all,</p>\n<p>it is important to note that specifications are mainly for *definitional<br>\nconstruction* of things;  rules for generic tools (simplifier, code<br>\ngenerator) can be proven arbitrarily, which happens in this case abundantly.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/TMqUKmv0M8b6t8IM2VaEbSo_/signature.asc\">signature.asc</a></p>",
        "id": 294073814,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828113
    }
]