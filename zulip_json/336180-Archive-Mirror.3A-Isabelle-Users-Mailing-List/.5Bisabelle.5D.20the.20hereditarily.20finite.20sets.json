[
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nIs anybody aware of a formalisation of the hereditarily finite sets in Isabelle/HOL?</p>\n<p>This would be a type hf along with constructors<br>\n    empty   :: hf<br>\n    insert  :: hf =&gt; hf =&gt; hf<br>\nwith a membership relation defined by<br>\n    member x (insert y z) == x=y | member x z<br>\nand also satisfying extensionality:<br>\n    x=y  &lt;-&gt;  (ALL z. member z x = member z y)</p>\n<p>(In Isabelle/ZF, the hereditarily finite sets are precisely the elements of Vset(nat).)</p>\n<p>Larry</p>",
        "id": 294154105,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850479
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nHi Larry,</p>\n<p>The FinFun formalisation in the AFP contains until Isabelle2011-1 defines such a type in theory FinFunSet. Adapting it to the pred/set-distinction, I recently (ID b7aa87989f3a) changed it from sets to predicates, so it is called FinFunPred in the development branch of the AFP.</p>\n<p>Actually, it specialises the more general type 'a =&gt;f 'b with constructors<br>\n    finfun_const :: 'b =&gt; ('a =&gt;f 'b)<br>\n    finfun_update :: ('a =&gt;f 'b) =&gt; 'a =&gt; 'b =&gt; ('a =&gt;f 'b)<br>\nand an application operator finfun_apply :: ('a =&gt;f 'b) =&gt; 'a =&gt; 'b<br>\n    finfun_apply (finfun_update f x y) z = (if z = x then y else finfun_apply f z<br>\n    f = g &lt;--&gt; (ALL x. finfun_apply f x = finfun_apply g x)<br>\nholds. FinFunSet (or FinFunPred) specialise 'b to bool and thus yield hereditarily finite sets or predicates.</p>\n<p>Andreas</p>",
        "id": 294154114,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850482
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThanks, but I believe that you are describing finite sets rather than hereditarily finite sets. I should have mentioned, the membership function should have the following type:</p>\n<p>member  :: hf =&gt; hf =&gt; bool</p>\n<p>That is, we have one single type rather than separate types of sets and elements.</p>\n<p>It sounds like this hasn't been formalised before...?</p>\n<p>Larry</p>",
        "id": 294154124,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850487
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nHi Larry,</p>\n<p>You are right, FinFun sets are ordinary finite sets or predicates.</p>\n<p>Andreas</p>",
        "id": 294154133,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850493
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman@in.tum.de\">huffman@in.tum.de</a>&gt;<br>\nI don't know of a pre-existing formalization, but I couldn't resist<br>\nlooking for a way to formalize this myself. I found an approach that<br>\nlooks promising:</p>\n<p>Start with a \"raw\" tree datatype using lists instead of finite sets:</p>\n<p>datatype hf0 = Node \"hf0 list\"<br>\n(or equivalently, datatype hf0 = Empty | Insert hf0 hf0)</p>\n<p>Define a linear order on type hf0 using a lexicographic order on the<br>\nlists. Then define a predicate \"normal :: hf0 =&gt; bool\" asserting that<br>\nall lists in the whole tree are in strict sorted order. Finally,<br>\ndefine type hf as a subtype:</p>\n<p>typedef hf = \"{a. normal a}\"</p>\n<p>I got as far as defining insert and member on type hf, but I didn't<br>\nprove extensionality. For this, I guess you would need a lemma stating<br>\nthat \"set xs = set ys ==&gt; xs = ys\" for strictly sorted lists xs and<br>\nys. There might be some relevant stuff in List.thy already, but I'm<br>\nnot sure.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294154154,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850505
    },
    {
        "content": "<p>From: Andrei Popescu &lt;<a href=\"mailto:uuomul@yahoo.com\">uuomul@yahoo.com</a>&gt;<br>\nDear Larry, <br>\nWe (Dmitriy Traytel, Jasmin Blanchette and myself) are prototyping a new (co)datatype package for Isabelle/HOL allowing for nonfree type constructors.  With this package, hereditarily finite sets can simply be defined as <br>\ndatatype hfset = Fold hfset fset<br>\nwhere 'a fset is the type of finite sets, as defined, e.g., in HOL/Quotient_Examples/FSet.  <br>\nThe package proves the expected distinctness, cases, induction and recursion theorems. However, it is currently in a rather raw form.   I have used the package to define the type \"hfset\".  To avoid any dependency on our files, I have extracted the relevant types, constants and theorems in the attached theory HFSET.thy that only depends on HOL/Quotient_Examples/FSet.  If you are interested, we can also send you the proved version including its prerequisites.    <br>\nThe package can also be used to define things like finite possibly non-well-founded sets, as <br>\ncodatatype hfset = Fold hfset fset<br>\nor heredinarily k-sets, where k is a fixed cardinal.  <br>\nAll the best,    Andrei <br>\nPS: The attached paper describes the new package.<br>\n<a href=\"/user_uploads/14278/8cMuZ8H-IaJhRbRgoZEmB0x-/HFSET.thy\">HFSET.thy</a><br>\n<a href=\"/user_uploads/14278/yYxMSP8ZJDkp8siA2Ey6ZuPZ/codat.pdf\">codat.pdf</a></p>",
        "id": 294154301,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850564
    }
]