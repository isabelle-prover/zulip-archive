[
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Sean,</p>\n<blockquote>\n<p>Is there a way to find out which types/constants/axioms are  defined<br>\n<em>just</em> within<br>\na particular theory?  My (partial) understanding is as follows,<br>\nSign.req_sg, Type.rep_tsig, etc gives you full information<br>\nabout the types etc. that are currently in scope.  So, the info<br>\nfrom, say,<br>\nSign.rep_sg (theory \"HOL\")<br>\nare a subset of those of<br>\nSign.rep_sg (theory \"Set\")</p>\n</blockquote>\n<p>This understanding is sufficently right (the term \"scope\" is misleading<br>\nin this context, but that does not matter for the particular problem).</p>\n<blockquote>\n<p>Is there an easy way, without looking at the theory file itself, to get<br>\njust the types etc. defined in, say, Set.thy?</p>\n</blockquote>\n<p>Not a direct way, but you can achieve that by enumerating all constants<br>\n (type constructors, ...) in the current theory and from that set taking<br>\naway all constants  (type constructors, ...) present in the ancestor<br>\ntheories (see Theory.parents_of).</p>\n<p>To get an idea how this may work, have a look at src/Pure/codegen.ML,<br>\nfunctions theory_of_const and thyname_of_const which show how this could<br>\nwork in principle.</p>\n<p>Hope this helps<br>\nFlorian<br>\n<a href=\"/user_uploads/14278/XbP2onIOsiY3Db20mz3gjSWk/signature.asc\">signature.asc</a></p>",
        "id": 293899842,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660744010
    }
]