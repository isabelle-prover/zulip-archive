[
    {
        "content": "<p>From: Sean McLaughlin &lt;<a href=\"mailto:seanmcl@cmu.edu\">seanmcl@cmu.edu</a>&gt;<br>\nHello,</p>\n<p>I'd like a way to extract the theorem dependencies of a theorem.<br>\nI know Isabelle has a great facility for plotting these deps with<br>\n\"thm_deps\", but is there a way to just extract a tree of dependencies<br>\n(that could be topologically sorted, say).</p>\n<p>Same question for entire theories: there is the command<br>\nML {* print_theory (theory \"Set\") *}<br>\nwhich prints the theorems in alphabetical order.  Is there a way<br>\nto print them, say, in the order of definition?<br>\nI looked in theory.ML, but the type theory doesn't have<br>\nany reference to type term.thm.</p>\n<p>Thanks, for this an my previous questions!</p>\n<p>Sean</p>",
        "id": 293896508,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660742874
    },
    {
        "content": "<p>From: John Matthews &lt;<a href=\"mailto:matthews@galois.com\">matthews@galois.com</a>&gt;<br>\nI am also interested in this question. Similarly, how to I extract the <br>\nlist of external oracles used in the proof of a tagged theorem, when <br>\ntheorem dependencies are turned off?</p>\n<p>Thanks,<br>\n-john</p>",
        "id": 293896512,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660742875
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 25 Oct 2005, John Matthews wrote:</p>\n<blockquote>\n<p>Similarly, how to I extract the list of external oracles used in the<br>\nproof of a tagged theorem, when theorem dependencies are turned off?</p>\n</blockquote>\n<p>See Pure/proofterm.ML for some operations on proof terms as stored within<br>\nthe \"der\" field of a thm.</p>\n<blockquote>\n<p>On Oct 24, 2005, at 5:52 PM, Sean McLaughlin wrote:</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>I'd like a way to extract the theorem dependencies of a theorem. I<br>\nknow Isabelle has a great facility for plotting these deps with<br>\n\"thm_deps\", but is there a way to just extract a tree of dependencies<br>\n(that could be topologically sorted, say).</p>\n</blockquote>\n</blockquote>\n<p>See Pure/Thy/thm_deps.ML.  You may build a Graph.T (cf. <br>\nPure/General/graph.ML) and get a toplogically sorted list of entries like <br>\nthis:</p>\n<p>fn G =&gt; Graph.all_succs G (Graph.minimals G)</p>\n<p>Makarius</p>",
        "id": 293896514,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660742875
    },
    {
        "content": "<p>From: John Matthews &lt;<a href=\"mailto:matthews@galois.com\">matthews@galois.com</a>&gt;<br>\nThanks, Makarius. Here is the SML code I wrote to extract the list of <br>\nexternal oracle tags used in the proof of a theorem. Am I using any <br>\ndeprecated functions?</p>\n<p>text {* Extract the abstract syntax of a theorem's oracle tags. *}</p>\n<p>ML {*<br>\nfun oracle_terms_of_thm thm<br>\n   = Proofterm.oracles_of_proof [] (proof_of thm)<br>\n*}</p>\n<p>text {* This will let us view the tagged oracles using surface syntax. <br>\n*}</p>\n<p>ML {*<br>\nfun oracle_strings_of_thm thm<br>\n= let val thy = theory_of_thm thm<br>\n   in map (fn (oracle,formula) =&gt; (oracle, Sign.string_of_term thy <br>\nformula))<br>\n          (oracles_of_thm thm)<br>\n   end<br>\n*}</p>\n<p>-john</p>",
        "id": 293896516,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660742875
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 25 Oct 2005, John Matthews wrote:</p>\n<blockquote>\n<p>Here is the SML code I wrote to extract the list of external oracle tags<br>\nused in the proof of a theorem. Am I using any deprecated functions?</p>\n</blockquote>\n<p>This looks fine.</p>\n<blockquote>\n<p>text {* This will let us view the tagged oracles using surface syntax. <br>\n*}<br>\n   in map (fn (oracle,formula) =&gt; (oracle, Sign.string_of_term thy </p>\n</blockquote>\n<p>Just a minor point concerning ``surface syntax'': using the theory context<br>\nof a theorem is a fair approximation if this is just for diagnostics.  <br>\nFor realistic output of formal entities one should usually use the static<br>\nproof context of the invoking command, with ProofContext.string_of_term<br>\netc.  There is also an abstract Pretty.pp concept for passing aroung<br>\nsyntactic context for pretty printing output.</p>\n<p>Makarius</p>",
        "id": 293896517,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660742876
    }
]