[
    {
        "content": "<p>From: José Manuel Rodriguez Caballero &lt;<a href=\"mailto:josephcmac@gmail.com\">josephcmac@gmail.com</a>&gt;<br>\nDear Eisbach/Isabelle/ML experts,</p>\n<p>In his paper</p>\n<p>Eckert, Ernest J. \"The group of primitive Pythagorean triangles.\" *Mathematics</p>\n<blockquote>\n<p>Magazine* 57.1 (1984): 22-27.</p>\n</blockquote>\n<p>Eckert defined the function</p>\n<p>fun preSumPythTwo :: \"(nat * nat) ⇒ (nat * nat) ⇒ (nat * nat)\" where<br>\n\"preSumPythTwo (a, b) (A, B) = (if a<em>A &gt; b</em>B<br>\nthen (a<em>A - b</em>B, b<em>A + a</em>B)<br>\nelse (b<em>A + a</em>B, b<em>B - a</em>A) )\"</p>\n<p>and claimed that it is associative, i.e.,</p>\n<p>lemma SumPythIsAssocLemTwo :<br>\n  fixes a b u v x y :: nat<br>\n  shows \"preSumPythTwo (a, b) ( preSumPythTwo (u, v) (x, y) ) =<br>\npreSumPythTwo  ( preSumPythTwo (a, b) (u, v) ) (x, y)\"</p>\n<p>In order to verify his claim, I divided the problem into 16 lemmas with<br>\nrelatively easy proofs, corresponding to all the possible cases, e.g.,</p>\n<p>lemma SumPythIsAssocLemTwoId0000:<br>\n  fixes a b u v x y :: nat<br>\n  assumes \"a<em>u &gt; b</em>v\"<br>\n    and \"( fst ( preSumPythTwo (a, b) (u, v) ) ) * x &gt; ( snd (<br>\npreSumPythTwo (a, b) (u, v) ) ) * y\"<br>\n    and \"u<em>x &gt; v</em>y\"<br>\nand \"a * (fst ( preSumPythTwo (u, v) (x, y) )) &gt; b * (snd ( preSumPythTwo<br>\n(u, v) (x, y) ))\"<br>\nshows \"preSumPythTwo (a, b) ( preSumPythTwo (u, v) (x, y) ) =<br>\npreSumPythTwo  ( preSumPythTwo (a, b) (u, v) ) (x, y)\"</p>\n<p>I wonder if there is a tactic in Isabelle HOL in order to automatically<br>\ngenerate all the 16 lemmas corresponding to all the possible cases just<br>\nfrom the definition of the function. I ask this question because I want to<br>\ngeneralize Eckert's result from dimension 2 (complex numbers) to dimension<br>\n8 (octonions) and this goal can not be done without a good automation.</p>\n<p>Sincerely yours,<br>\nJosé M.</p>",
        "id": 294734719,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189393
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi,  </p>\n<p>Could you simply split on the ifs in your definition of presum? Isabelles<br>\nsimplifier will do this with split: if_splits, or, to get more control, you<br>\nmight call the split method.  </p>\n<p>As first attempt, you might try to make presum a definition, ie do the pattern<br>\nmatching in the pairs in the rhs, then unfold presum_def, and then auto split:<br>\nif_splits prod.splits  </p>\n<p>Hope that helps  <br>\nPeter</p>",
        "id": 294734761,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189402
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi José,</p>\n<p>here is an Eisbach version to generate 16 cases. I changed the<br>\ndefinition of preSumPythTwo to manual case splitting isntead of pattern<br>\nmatching,<br>\nin order to split all products in a first step ... may be this can be<br>\nmodified to the original definition.</p>",
        "id": 294734819,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189415
    },
    {
        "content": "<p>From: José Manuel Rodriguez Caballero &lt;<a href=\"mailto:josephcmac@gmail.com\">josephcmac@gmail.com</a>&gt;<br>\nHi Peter</p>\n<p>Thanks for your help, it was my first time with Eisbach. I feel that it is<br>\nreally practical for mathematicians.</p>\n<p>José M.</p>",
        "id": 294734844,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189421
    }
]