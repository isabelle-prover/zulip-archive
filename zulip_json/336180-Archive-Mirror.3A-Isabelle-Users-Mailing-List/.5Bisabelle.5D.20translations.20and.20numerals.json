[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn 21/01/2014 15:18, Christian Sternagel wrote:</p>\n<blockquote>\n<p>Well, what I wrote in my previous mail does not work for \"int\"s and \"nat\"s. The<br>\nfollowing does</p>\n<p>translations<br>\n  \"i\" &lt;= \"CONST Fin (i::'a::numeral)\"<br>\n  \"i\" &lt;= \"CONST Fin (i::int)\"</p>\n</blockquote>\n<p>But this causes \"Fin x\" to be reduced to \"x\", no matter what \"x\" is, as long as<br>\nit is of type int. That's not what I want.</p>\n<p>Tobias</p>\n<blockquote>\n<p>\"i\" &lt;= \"CONST Fin (i::nat)\"<br>\n  \"0\" &lt;= \"CONST Fin (0::'a::zero)\"<br>\n  \"1\" &lt;= \"CONST Fin (1::'a::one)\"</p>\n<p>But I should mention that I have no clue why ;)... I was just doing trial and<br>\nerror.</p>\n<p>cheers</p>\n<p>chris</p>\n<p>On 01/21/2014 03:07 PM, Christian Sternagel wrote:</p>\n<blockquote>\n<p>Dear Tobias,</p>\n<p>how about (I used \"datatype 'a fin = Fin 'a\"),</p>\n<p>translations<br>\n   \"_Numeral i\" &lt;= \"CONST Fin (i::'a::numeral)\"<br>\n   \"0\" &lt;= \"CONST Fin (0::'a::zero)\"<br>\n   \"1\" &lt;= \"CONST Fin (1::'a::one)\"</p>\n<p>then for</p>\n<p>term \"(Fin 0, Fin 1, Fin 10, Fin x)\"</p>\n<p>I get</p>\n<p>\"(0, 1, 10, Fin x)\"<br>\n   :: \"'a fin × 'b fin × 'c fin × 'd fin\"</p>\n<p>Note that when leaving of \"zero\" and \"one I get \"Fin 0\" and \"Fin 1\" as<br>\noutput.<br>\n</p>\n</blockquote>\n<p>On 01/21/2014 02:41 PM, Tobias Nipkow wrote:</p>\n<blockquote>\n<blockquote>\n<p>I am using Library/Extended that defines a datatype with a unary<br>\nconstructor<br>\nFin. I want to print terms like \"Fin 5\" as \"5\" and am using the following<br>\ntranslations:</p>\n<p>translations<br>\n\"_Numeral i\" &lt;= \"CONST Fin(_Numeral i)\"<br>\n\"0\" &lt;= \"CONST Fin 0\"<br>\n\"1\" &lt;= \"CONST Fin 1\"</p>\n<p>When I generate latex from</p>\n<p>text{* @{term \"Fin(5::int)\"} *}</p>\n<p>this works fine, I get \"5\".</p>\n<p>But when I write</p>\n<p>term \"Fin(5::int)\"</p>\n<p>in a theory, the output is \"Fin 5\". Why is that? And what can I do to<br>\nobtain the<br>\noutput \"5\" always, not just from an antiquotation in a text block.</p>\n<p>Note that when I use this translation</p>\n<p>translations<br>\n\"x\" &lt;= \"CONST Fin(x)\"</p>\n<p>then \"Fin\" disappears for good, but that is not what I want.</p>\n<p>Thanks<br>\nTobias<br>\n</p>\n</blockquote>\n</blockquote>\n</blockquote>",
        "id": 294263057,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915085
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Tobias,</p>\n<p>here's just another data point. In Isabelle2013-2, your original translation works fine <br>\nwith ProofGeneral 3.7.1.1, but not with jEdit. I haven't tried PG 4.x.</p>\n<p>Andreas</p>",
        "id": 294263078,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915096
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThank you, that explains why the translations worked for me when I wrote them -<br>\nI used PG then.</p>\n<p>Tobias</p>",
        "id": 294263085,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915102
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nPrinting is a black art, especially when using the AST representation of <br>\n'translations', which can contain additional annotations unexpectedly.</p>\n<p>The configuration option syntax_ast_trace generally helps to see what <br>\nhappens to happen in a particular situation, and it shows additional <br>\nconstraints and markup in the rich document output of Isabelle/PIDE.</p>\n<p>In other print modes, there can be different add-ons.</p>\n<p>Instead of these fragile and complicated syntax translations, the usual <br>\nway to modify term output systematically is via the \"uncheck\" phase. It <br>\nhas the advantage that it operates on regular type-correct lambda terms: <br>\nthat requires a few more cases to cover (in Isabelle/ML), but there is no <br>\nblack magic.</p>\n<p>The included theory No_Fin demonstrates that.  Note that I am using a <br>\nfully official constant no_Fin here, which is not printed in the end due <br>\nto its special notation.</p>\n<p>Makarius<br>\n<a href=\"/user_uploads/14278/OeWpYw_qSLwLy3UuTNYjdwgp/No_Fin.thy\">No_Fin.thy</a></p>",
        "id": 294263134,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915120
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nWorks like a charm, thanks!</p>\n<p>Tobias</p>",
        "id": 294263235,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915151
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI am using Library/Extended that defines a datatype with a unary constructor<br>\nFin. I want to print terms like \"Fin 5\" as \"5\" and am using the following<br>\ntranslations:</p>\n<p>translations<br>\n\"_Numeral i\" &lt;= \"CONST Fin(_Numeral i)\"<br>\n\"0\" &lt;= \"CONST Fin 0\"<br>\n\"1\" &lt;= \"CONST Fin 1\"</p>\n<p>When I generate latex from</p>\n<p>text{* @{term \"Fin(5::int)\"} *}</p>\n<p>this works fine, I get \"5\".</p>\n<p>But when I write</p>\n<p>term \"Fin(5::int)\"</p>\n<p>in a theory, the output is \"Fin 5\". Why is that? And what can I do to obtain the<br>\noutput \"5\" always, not just from an antiquotation in a text block.</p>\n<p>Note that when I use this translation</p>\n<p>translations<br>\n\"x\" &lt;= \"CONST Fin(x)\"</p>\n<p>then \"Fin\" disappears for good, but that is not what I want.</p>\n<p>Thanks<br>\nTobias</p>",
        "id": 294267586,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916090
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear Tobias,</p>\n<p>how about (I used \"datatype 'a fin = Fin 'a\"),</p>\n<p>translations<br>\n   \"_Numeral i\" &lt;= \"CONST Fin (i::'a::numeral)\"<br>\n   \"0\" &lt;= \"CONST Fin (0::'a::zero)\"<br>\n   \"1\" &lt;= \"CONST Fin (1::'a::one)\"</p>\n<p>then for</p>\n<p>term \"(Fin 0, Fin 1, Fin 10, Fin x)\"</p>\n<p>I get</p>\n<p>\"(0, 1, 10, Fin x)\"<br>\n   :: \"'a fin × 'b fin × 'c fin × 'd fin\"</p>\n<p>Note that when leaving of \"zero\" and \"one I get \"Fin 0\" and \"Fin 1\" as <br>\noutput.</p>",
        "id": 294267600,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916096
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nWell, what I wrote in my previous mail does not work for \"int\"s and <br>\n\"nat\"s. The following does</p>\n<p>translations<br>\n   \"i\" &lt;= \"CONST Fin (i::'a::numeral)\"<br>\n   \"i\" &lt;= \"CONST Fin (i::int)\"<br>\n   \"i\" &lt;= \"CONST Fin (i::nat)\"<br>\n   \"0\" &lt;= \"CONST Fin (0::'a::zero)\"<br>\n   \"1\" &lt;= \"CONST Fin (1::'a::one)\"</p>\n<p>But I should mention that I have no clue why ;)... I was just doing <br>\ntrial and error.</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294267618,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916102
    }
]