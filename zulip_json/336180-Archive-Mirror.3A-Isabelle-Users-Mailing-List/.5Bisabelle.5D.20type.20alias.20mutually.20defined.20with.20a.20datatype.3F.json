[
    {
        "content": "<p>From: Randy Pollack &lt;<a href=\"mailto:rpollack@inf.ed.ac.uk\">rpollack@inf.ed.ac.uk</a>&gt;<br>\nThe following is accepted:</p>\n<p>datatype exp =<br>\n   Evar nat<br>\n | Esbst exp sbst<br>\n and sbst = \"nat =&gt; exp\"</p>\n<p>but what is the meaning of \"sbst\" after this definition?  E.g. the<br>\nfollowing is not accepted:</p>\n<p>constdefs<br>\n   sbstid :: \"sbst\"<br>\n   \"sbstid == %x. Evar x\"</p>\n<p>What is the story?</p>\n<p>Thanks,<br>\nRandy</p>",
        "id": 294056935,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821955
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nRandy,</p>\n<p>... but it is not what one would expect. You have defined a unit <br>\ndatatype with the single constructor called \"nat =&gt; exp\". :-)</p>\n<p>I am not sure if there is a way to refer to the constructor later, but <br>\nyou can see that it exists:</p>\n<p>lemma \"(x::sbst) = y)\"<br>\napply (cases x)</p>\n<p>goal (1 subgoal):</p>\n<p>1. x = nat =&gt; exp ==&gt; x = y</p>\n<p>However, such definitions should probably not be allowed...</p>\n<p>Alex</p>",
        "id": 294056944,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821960
    }
]