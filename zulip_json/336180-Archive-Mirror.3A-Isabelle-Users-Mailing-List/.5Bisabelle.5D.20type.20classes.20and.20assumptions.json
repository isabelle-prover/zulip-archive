[
    {
        "content": "<p>From: Jose Manuel Rodriguez Caballero &lt;<a href=\"mailto:jose.manuel.rodriguez.caballero@ut.ee\">jose.manuel.rodriguez.caballero@ut.ee</a>&gt;<br>\nHi,<br>\n  I am using the type class</p>\n<p>class not_singleton =<br>\n  assumes not_singleton_card: \"∃x. ∃y. x ≠ y\"</p>\n<p>I have proved the following result</p>\n<p>lemma onorm_open_ball_scaled_not_singleton:<br>\n  fixes f :: ‹'a::{real_normed_vector, not_singleton} ⇒ 'b::real_normed_vector›<br>\n    and  r :: real<br>\n  assumes ‹r &gt; 0› and ‹bounded_linear f›<br>\n  shows  ‹onorm f  = (1/r) * Sup {norm (f x) | x. norm x &lt; r}›</p>\n<p>Now, I would like to use onorm_open_ball_scaled_not_singleton in order to deduce the following result</p>\n<p>lemma onorm_open_ball_scaled_not_singleton2:<br>\n  fixes f :: ‹'a::real_normed_vector ⇒ 'b::real_normed_vector›<br>\n    and  r :: real<br>\n  assumes ‹r &gt; 0› and ‹bounded_linear f› and ‹∃ x::'a. ∃ y::'a. x ≠ y›<br>\n  shows  ‹onorm f  = (1/r) * Sup {norm (f x) | x. norm x &lt; r}›<br>\n  using assms<br>\n    onorm_open_ball_scaled_not_singleton</p>\n<p>Nevertheless, there is a problem, because</p>\n<p>'a is of type real_normed_vector and not of type  {real_normed_vector, not_singleton}</p>\n<p>From a purely mathematical point of view, this question is never asked (just abuse the notation), but it is relevant for the formalization in Isabelle/HOL.</p>\n<p>Thank you in advance for any suggestions.<br>\nJosé M.</p>",
        "id": 294767966,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661202837
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi Jose,</p>\n<p>a</p>\n<p>subclass (in real_normed_vector) not_singleton </p>\n<p>might help.</p>",
        "id": 294768003,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661202843
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nHi,</p>\n<blockquote>\n<p>subclass (in real_normed_vector) not_singleton</p>\n</blockquote>\n<p>That will not work because a real_normed_vector can have cardinality 1. <br>\n(The zero space.)</p>\n<p>I believe the only way to get from onorm_open_ball_scaled_not_singleton <br>\nto onorm_open_ball_scaled_not_singleton2 is to use the Types_To_Sets <br>\nextension of Isabelle/HOL.</p>\n<p>Then *onorm_open_ball_scaled_not_singleton[internalize_sort <br>\n\"'a::{real_normed_vector, not_singleton}\"] *gives you a theorem that is <br>\nlogically sufficient for showing onorm_open_ball_scaled_not_singleton2.</p>\n<p>(Try *thm * *onorm_open_ball_scaled_not_singleton[internalize_sort <br>\n\"'a::{real_normed_vector, not_singleton}\"] *to see it.)</p>\n<p>Best wishes,<br>\nDominique.</p>\n<p>**</p>\n<blockquote>\n<p>might help.</p>\n<p>--<br>\n   Peter</p>\n<p>On Tue, 2020-01-14 at 03:06 +0000, Jose Manuel Rodriguez Caballero<br>\nwrote:</p>\n<blockquote>\n<p>Hi,<br>\n   I am using the type class</p>\n<p>class not_singleton =<br>\n   assumes not_singleton_card: \"∃x. ∃y. x ≠ y\"</p>\n<p>I have proved the following result</p>\n<p>lemma onorm_open_ball_scaled_not_singleton:<br>\n   fixes f :: ‹'a::{real_normed_vector, not_singleton} ⇒<br>\n'b::real_normed_vector›<br>\n     and  r :: real<br>\n   assumes ‹r &gt; 0› and ‹bounded_linear f›<br>\n   shows  ‹onorm f  = (1/r) * Sup {norm (f x) | x. norm x &lt; r}›</p>\n<p>Now, I would like to use onorm_open_ball_scaled_not_singleton in<br>\norder to deduce the following result</p>\n<p>lemma onorm_open_ball_scaled_not_singleton2:<br>\n   fixes f :: ‹'a::real_normed_vector ⇒ 'b::real_normed_vector›<br>\n     and  r :: real<br>\n   assumes ‹r &gt; 0› and ‹bounded_linear f› and ‹∃ x::'a. ∃ y::'a. x ≠<br>\ny›<br>\n   shows  ‹onorm f  = (1/r) * Sup {norm (f x) | x. norm x &lt; r}›<br>\n   using assms<br>\n     onorm_open_ball_scaled_not_singleton</p>\n<p>Nevertheless, there is a problem, because</p>\n<p>'a is of type real_normed_vector and not of<br>\ntype  {real_normed_vector, not_singleton}</p>\n<p>From a purely mathematical point of view, this question is never<br>\nasked (just abuse the notation), but it is relevant for the<br>\nformalization in Isabelle/HOL.</p>\n<p>Thank you in advance for any suggestions.<br>\nJosé M.</p>\n<p>--</p>\n<p>José Manuel Rodríguez Caballero</p>\n<p>arvutiteaduse instituut / Institute of Computer Science<br>\nTartu Ülikool / University of Tartu</p>\n<p>Personal Research Page: <a href=\"https://josephcmac.github.io/\">https://josephcmac.github.io/</a></p>\n</blockquote>\n</blockquote>",
        "id": 294768046,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661202858
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nAh, OK.</p>\n<p>You will have to decide where to use type-classes or explicit<br>\nassumptions:</p>\n<p>getting an explicit assumption from a type-class is easy, <br>\nbut getting a type-class from an explicit assumption is not possible<br>\n(or maybe requires the type-to-sets extension, as indicated by<br>\nDominique).</p>",
        "id": 294768052,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661202861
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nHi,</p>\n<blockquote>\n<p>but getting a type-class from an explicit assumption is not possible <br>\n(or maybe requires the type-to-sets extension, as indicated by Dominique).</p>\n</blockquote>\n<p>As an additional clarification: To my understanding, Types_To_Sets is a <br>\ntrue extension of HOL in the sense that it introduces additional proof <br>\nrules (that are, I hope, conservative extensions).</p>\n<p>However, the specific attribute \"internalize_sort\" is (that replaces <br>\ntype-classes by explicit premises stating the properties of those type <br>\nclasses), as far as I can tell, not an extension. There is <br>\nThm.unconstrainT in the Isabelle kernel that does more or less the same <br>\nthing (but in a less user-friendly way). And the internalize_sort <br>\nattribute is just a more convenient wrapper around the existing <br>\nlow-level functionality.</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 294768063,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661202867
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nYou’ve done these in the wrong order. First prove onorm_open_ball_scaled_not_singleton2 (your old proof should work with only tiny changes) and then onorm_open_ball_scaled_not_singleton should be a trivial corollary.</p>\n<p>Larry Paulson</p>",
        "id": 294768086,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661202892
    }
]