[
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@rsise.anu.edu.au\">Jeremy.Dawson@rsise.anu.edu.au</a>&gt;<br>\nIt seems to me that one ought to be able to prove</p>\n<p>Goal \"OFCLASS ('b :: ord, order_class) ==&gt;<br>\n  ((x :: 'b) &lt;= y) = (x &lt; y | x = y)\" ;</p>\n<p>(where the consequent is just a theorem of the order class, in this case</p>\n<p>([\"Orderings.order_le_less\"], \"(?x &lt;= ?y) = (?x &lt; ?y | ?x = ?y)\"),</p>\n<p>How can one use the theorem order_le_less to prove this goal?</p>\n<p>Regards,</p>\n<p>Jeremy Dawson</p>",
        "id": 294040830,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815195
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIn Isabelle2005 (and before) there is no explicit way to move backwards <br>\nfrom syntactic class constraints to the above logical representation (the <br>\nother direction is provided by Thm.class_triv).</p>\n<p>In recent development snapshots you can do it like this:</p>\n<p>fun unconstrain_tvars th =<br>\n  let<br>\n    val certT = Thm.ctyp_of (Thm.theory_of_thm th);<br>\n    val tvars = Drule.fold_terms Term.add_tvars th [];<br>\n  in fold (Thm.unconstrainT o certT o TVar) tvars th end;</p>\n<p>For example:</p>\n<p>ML&gt; unconstrain_tvars order_le_less<br>\n  val it = \"OFCLASS(?'a, order_class) ==&gt; (?x &lt;= ?y) = (?x &lt; ?y | ?x = ?y)\": thm</p>\n<p>Makarius</p>",
        "id": 294040855,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815208
    }
]