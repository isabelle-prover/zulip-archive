[
    {
        "content": "<p>From: <a href=\"mailto:paolot@informatik.uni-bremen.de\">paolot@informatik.uni-bremen.de</a><br>\nThe following left me puzzled:</p>\n<p>consts<br>\nlftsnd  :: \"('a =&gt; ('b*'c)) =&gt; ('a =&gt; 'c)\"<br>\nfunA    :: \"'a =&gt; (('c =&gt; 'e)*('d =&gt; 'f))\"<br>\nfunB    :: \"'a =&gt; 'h =&gt; 'k\"</p>\n<p>defs<br>\nlftsnd_def : \"lftsnd f x == snd (f x)\"<br>\nfunB_def   : \"funB == lftsnd funA\"</p>\n<p>ô*** Extra type variables on rhs: \"'d\", \"'e\"<br>\n*** The error(s) above occurred in definition \"funC_def\":<br>\n***   \"funC == funB funA\"<br>\n*** At command \"defs\".õ</p>\n<p>Can anybody spot the problem?</p>\n<p>Regards,</p>\n<p>Paolo Torrini</p>",
        "id": 294040893,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815230
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nDear Paolo,</p>\n<p>consts<br>\n  lftsnd :: \"('a =&gt; 'b * 'c) =&gt; 'a =&gt; 'c\"<br>\n  funA   :: \"'a =&gt; ('b =&gt; 'c) * ('d =&gt; 'e)\"<br>\n  funB   :: \"'a =&gt; 'b =&gt; 'c\"</p>\n<p>defs<br>\n  lftsnd_def : \"lftsnd f x == snd (f x)\"<br>\n  funB_def   : \"funB == lftsnd funA\"</p>\n<p>The point is that you don't state anything about the type parameters 'b<br>\nand 'c of funA in funB_def since they do not occur on the left hand side<br>\nof funB_def; you have to instantiate them:</p>\n<p>defs<br>\n  funB_def   : \"funB == lftsnd (funA :: 'a =&gt; (unit =&gt; unit) * ('d =&gt; 'e))\"</p>\n<p>will work.</p>\n<p>Hope this helps<br>\nFlorian<br>\n<a href=\"/user_uploads/14278/MlZMn2rt5xfjCSAcdaWowEdX/florian.haftmann.vcf\">florian.haftmann.vcf</a><br>\n<a href=\"/user_uploads/14278/njBU3S-TBFWrcE5WacFncS_j/signature.asc\">signature.asc</a></p>",
        "id": 294040896,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815233
    },
    {
        "content": "<p>From: Christian Urban &lt;<a href=\"mailto:urbanc@in.tum.de\">urbanc@in.tum.de</a>&gt;<br>\nFlorian Haftmann writes:</p>\n<blockquote>\n<p>The point is that you don't state anything about the type parameters 'b<br>\nand 'c of funA in funB_def since they do not occur on the left hand side<br>\nof funB_def; you have to instantiate them:</p>\n<p>defs<br>\n  funB_def   : \"funB == lftsnd (funA :: 'a =&gt; (unit =&gt; unit) * ('d =&gt; 'e))\"</p>\n</blockquote>\n<p>An alternative is to parametrise funB with the types not mentioned.<br>\nFor example</p>\n<p>consts<br>\n    lftsnd :: \"('a =&gt; 'b * 'c) =&gt; 'a =&gt; 'c\"<br>\n    funA   :: \"'a =&gt; ('b =&gt; 'c) * ('d =&gt; 'e)\"</p>\n<p>defs<br>\n    lftsnd_def : \"lftsnd f x == snd (f x)\"</p>\n<p>constdefs<br>\n    funB_def: \"funB TYPE('b) TYPE('c) == lftsnd (funA::'a=&gt;('b=&gt;'c)*('d=&gt;'e))\"</p>\n<p>The reason why all type-variables of a right-hand side<br>\nof a definition have to occur on the left-hand side as<br>\nwell is that otherwise one can write down definitions<br>\nthat lead to inconsistencies.</p>\n<p>Best wishes,<br>\nChristian</p>",
        "id": 294040912,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815240
    },
    {
        "content": "<p>From: <a href=\"mailto:paolot@informatik.uni-bremen.de\">paolot@informatik.uni-bremen.de</a><br>\nQuoting Christian Urban &lt;<a href=\"mailto:urbanc@in.tum.de\">urbanc@in.tum.de</a>&gt;:</p>\n<blockquote>\n<p>Florian Haftmann writes:</p>\n<blockquote>\n<p>The point is that you don't state anything about the type parameters 'b<br>\nand 'c of funA in funB_def since they do not occur on the left hand side<br>\nof funB_def; you have to instantiate them:</p>\n<p>defs<br>\n  funB_def   : \"funB == lftsnd (funA :: 'a =&gt; (unit =&gt; unit) *   <br>\n('d =&gt; 'e))\"</p>\n</blockquote>\n<p>An alternative is to parametrise funB with the types not mentioned.<br>\nFor example</p>\n<p>consts<br>\n    lftsnd :: \"('a =&gt; 'b * 'c) =&gt; 'a =&gt; 'c\"<br>\n    funA   :: \"'a =&gt; ('b =&gt; 'c) * ('d =&gt; 'e)\"</p>\n<p>defs<br>\n    lftsnd_def : \"lftsnd f x == snd (f x)\"</p>\n<p>constdefs<br>\n    funB_def: \"funB TYPE('b) TYPE('c) == lftsnd   <br>\n(funA::'a=&gt;('b=&gt;'c)*('d=&gt;'e))\"<br>\n</p>\n</blockquote>\n<p>If I parametrise the function, may I instantiate the type parameters  <br>\nlater on, or do I have to bring them with me explicitly all along?  <br>\nanything in the documentation?</p>\n<blockquote>\n<p>The reason why all type-variables of a right-hand side<br>\nof a definition have to occur on the left-hand side as<br>\nwell is that otherwise one can write down definitions<br>\nthat lead to inconsistencies.</p>\n</blockquote>\n<p>Do you know if it is generally the case that unistantiated variables lead to<br>\ninconsistencies? I mean, take something like</p>\n<p>consts<br>\nconsA :: \"('a*bool)\"</p>\n<p>constdefs<br>\nconsB_def : \"consB == snd consA\"</p>\n<p>I was just wondering how one may get an inconsistency from there.</p>\n<p>Cheers,<br>\nPaolo</p>",
        "id": 294040961,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815245
    },
    {
        "content": "<p>From: Stefan Berghofer &lt;<a href=\"mailto:berghofe@in.tum.de\">berghofe@in.tum.de</a>&gt;<br>\n<a href=\"mailto:paolot@informatik.uni-bremen.de\">paolot@informatik.uni-bremen.de</a> wrote:</p>\n<blockquote>\n<p>Do you know if it is generally the case that unistantiated variables <br>\nlead to inconsistencies?</p>\n</blockquote>\n<p>If you were allowed to make the following definition</p>\n<p>singleton :: bool<br>\n   \"singleton == (ALL (x::'a) (y::'a). x = y)\"</p>\n<p>which has an extra type variable 'a on the right-hand<br>\nside, you could derive</p>\n<p>True =<br>\n   (ALL (x::unit) (y::unit). x = y) =<br>\n   singleton =<br>\n   (ALL (x::bool) (y::bool). x = y) =<br>\n   False</p>\n<p>which is an inconsistency.</p>\n<p>Greetings,<br>\nStefan</p>",
        "id": 294040974,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815251
    },
    {
        "content": "<p>From: Stefan Berghofer &lt;<a href=\"mailto:berghofe@in.tum.de\">berghofe@in.tum.de</a>&gt;<br>\n<a href=\"mailto:paolot@informatik.uni-bremen.de\">paolot@informatik.uni-bremen.de</a> wrote:<br>\nIf you define consA as follows</p>\n<p>consA == (arbitrary::'a, ALL (x::'a) (y::'a). x = y)</p>\n<p>which is a perfectly legal definition, since 'a occurs<br>\nboth on the left-hand and on the right-hand side, you<br>\ncould still derive an inconsistency in a similar way<br>\nby using the (illegal) definition of consB.</p>\n<p>Greetings,<br>\nStefan<br>\n<a href=\"/user_uploads/14278/bnltzstRnNBLVSNa3Bev65ND/Inconsistency.thy\">Inconsistency.thy</a></p>",
        "id": 294040985,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815257
    },
    {
        "content": "<p>From: <a href=\"mailto:paolot@informatik.uni-bremen.de\">paolot@informatik.uni-bremen.de</a><br>\nQuoting Stefan Berghofer &lt;<a href=\"mailto:berghofe@in.tum.de\">berghofe@in.tum.de</a>&gt;:</p>\n<p>ok, thanks. Still, the example I had in mind was:</p>\n<p>consts<br>\n  consA :: \"('a*bool)\"</p>\n<p>constdefs<br>\n  consB_def : \"consB == snd consA\"</p>\n<p>I'd expect the following is logically safe:</p>\n<p>ALL x::singleton. snd (x,y) = ALL x::bool. snd (x,y)</p>\n<p>The extra type variable is there, but it is simply not used.</p>\n<p>Best,<br>\nPaolo</p>",
        "id": 294040992,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815263
    }
]