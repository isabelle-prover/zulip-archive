[
    {
        "content": "<p>From: Sean McLaughlin &lt;<a href=\"mailto:seanmcl@cmu.edu\">seanmcl@cmu.edu</a>&gt;<br>\nHello,</p>\n<p>Is there a way to determine, eg.<br>\nthat the \"*\" type constructor corresponds to \"Prod\",<br>\nas in</p>\n<p>typedef (Prod)<br>\n   ('a, 'b) \"*\"    (infixr 20)<br>\n     = \"{f. EX a b. f = Pair_Rep (a::'a) (b::'b)}\"</p>\n<p>?</p>\n<p>Thanks,</p>\n<p>Sean</p>",
        "id": 293899768,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660743993
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@csee.ogi.edu\">brianh@csee.ogi.edu</a>&gt;<br>\nOne way to find such a set is to search for theorems that use the <br>\n\"type_definition\" predicate. For example, the typedef you mentioned causes <br>\nIsabelle to generate the following theorem (a similar theorem is axiomatized <br>\nfor every typedef):</p>\n<p>type_definition_Prod: \"type_definition Rep_Prod Abs_Prod Prod\"</p>\n<p>\"type_definition\" has type \"('a =&gt; 'b) =&gt; ('b =&gt; 'a) =&gt; 'b set =&gt; bool\" where <br>\n'a stands for the new type you are defining. So a theorem search with the <br>\npattern \"type_definition :: (_ * _ =&gt; _) =&gt; _ =&gt; _ =&gt; _\" will give you just <br>\nthe theorem you want.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 293899789,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660743997
    }
]