[
    {
        "content": "<p>From: \"A.L. Hicks\" &lt;<a href=\"mailto:alh70@cam.ac.uk\">alh70@cam.ac.uk</a>&gt;<br>\nHi,</p>\n<p>Sorry in advance if this is some trivial error on my part.<br>\nI'd like to use the lemma has_vector_derivative_mult in the HOL library <br>\nwhich reads:</p>\n<p>\"lemma has_vector_derivative_mult[derivative_intros]:<br>\n   \"(f has_vector_derivative f') (at x within s) ⟹ (g <br>\nhas_vector_derivative g') (at x within s) ⟹<br>\n     ((λx. f x * g x) has_vector_derivative (f x * g' + f' * g x :: 'a :: <br>\nreal_normed_algebra)) (at x within s)\"<br>\n   by (rule bounded_bilinear.has_vector_derivative[OF <br>\nbounded_bilinear_mult])\"</p>\n<p>However it seems that using a statement such as</p>\n<p>have \"((λx. f x * g x) has_vector_derivative (f x * g' + f' * g x :: 'a <br>\n:: real_normed_algebra))  (at x within {a .. b})\"</p>\n<p>leads to a standard type unification error:</p>\n<p>Type unification failed: Clash of types \"_ ⇒ _\" and \"real\"<br>\nType error in application: incompatible operand type<br>\nOperator:  op * (f x) :: real ⇒ real<br>\nOperand:   g' :: real ⇒ real<br>\nCoercion Inference:<br>\nLocal coercion insertion on the operand failed:<br>\nNo coercion known for type constructors: \"fun\" and \"real\"</p>\n<p>Am I missing something or is the lemma itself flawed?</p>\n<p>As an aside, there is a similar lemma for the has_derivative operator: <br>\nhas_derivative_mult<br>\nwhich works for statements like<br>\nhave \"((%x. f x * g x) has_derivative (%y.  f x * g' y + f' y * g x)) <br>\n(at x within {a .. b})\"<br>\nSay I have h=(%x. f x * g x), I can obtain h' such that h has_derivative <br>\nh but can't seem to define h' explicitly.</p>\n<p>Thanks,<br>\nAlex Hicks</p>",
        "id": 294680649,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176591
    },
    {
        "content": "<p>From: Mark Wassell &lt;<a href=\"mailto:mpwassell@gmail.com\">mpwassell@gmail.com</a>&gt;<br>\nHi,</p>\n<p>Something before your line</p>\n<p>have \"((λx. f x * g x) has_vector_derivative (f x * g' + f' * g x :: 'a ::<br>\nreal_normed_algebra))  (at x within {a .. b})\"</p>\n<p>has \"given\" g' the type real ⇒ real</p>\n<p>Have you perhaps said</p>\n<p>(g has_derivative g') rather than (g has_vector_derivative g') ?</p>\n<p>Mark</p>",
        "id": 294680677,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176603
    }
]