[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi, consider the following definition</p>\n<p>definition finite_rel :: \"_ rel ⇒ bool\" where \"finite_rel ≡ finite\"</p>\n<p>I would expect to define a constant that is restricted to relations,<br>\ni.e., ('a*'a) set, as suggested by </p>\n<p>type_synonym 'a rel = \"('a × 'a) set\"</p>\n<p>However, the expansion of type_synonym seems to take place before<br>\nexpansion of underscores, such that I actually get</p>\n<p>consts<br>\n  finite_rel :: \"('a × 'b) set ⇒ bool\"</p>\n<p>i.e., a constant that is more general than expected.</p>\n<p>Is this just a random feature, or is their some rationale behind?</p>",
        "id": 294746600,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193722
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:mail@andreas-lochbihler.de\">mail@andreas-lochbihler.de</a>&gt;<br>\nHi Peter,</p>\n<p>I'd say that this is a random feature from user perspective, but I <br>\nbelieve that there is some rationale in terms of implementation <br>\ncomplexitz behind that. As you've observed, dummy types are instantiated <br>\nwith fresh variables only after type abbreviations have been expanded. <br>\nThe expansion mechanism would have to be more complicated if it had to <br>\ntrack which dummy types variables are derived from the same syntactic <br>\ninput term.</p>\n<p>By the way, IIRC I noticed this behaviour many years ago when we worked <br>\ntogether on our first joint formalisation and you had used dummy types <br>\nin there. Since then, I've tried to avoid dummy types unless for <br>\nexperiments.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294746634,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193728
    }
]