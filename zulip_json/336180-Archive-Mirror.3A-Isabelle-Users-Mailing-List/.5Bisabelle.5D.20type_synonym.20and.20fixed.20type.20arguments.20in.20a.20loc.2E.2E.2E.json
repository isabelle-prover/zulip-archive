[
    {
        "content": "<p>From: Randy Pollack &lt;<a href=\"mailto:rpollack@inf.ed.ac.uk\">rpollack@inf.ed.ac.uk</a>&gt;<br>\nHi,</p>\n<p>Consider the cut-down locale definition:</p>\n<p>locale step =<br>\n  label:lattice where sup = lblsup<br>\n  for lblsup::\"'a =&gt; 'a =&gt; 'a\"</p>\n<p>In the context of this locale want a type synonym:</p>\n<p>type_synonym 'a atm = \"int * 'a\"</p>\n<p>This is rejected:</p>\n<p>*** Locally fixed type arguments \"'a\" in type declaration \"atm\"</p>\n<p>OK, but the following is also rejected:</p>\n<p>type_synonym atm = \"int * 'a\"<br>\n*** Extra variables on rhs: \"'a\"</p>\n<p>Is it possible to make such a type synonym in a locale?</p>\n<p>Thanks,<br>\nRandy</p>",
        "id": 294241400,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907138
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear all,</p>\n<p>sorry, no answer. Just a related question (I think). For those who <br>\nprefer stackoverflow, it can also be found here:</p>\n<p><a href=\"http://stackoverflow.com/q/16556633/476803\">http://stackoverflow.com/q/16556633/476803</a></p>\n<p>In NEWS I found</p>\n<p>* Command 'typedef' now works within a local theory context -- without<br>\n   introducing dependencies on parameters or assumptions, which is not<br>\n   possible in Isabelle/Pure/HOL.  Note that the logical environment may<br>\n   contain multiple interpretations of local typedefs (with different<br>\n   non-emptiness proofs), even in a global theory context.</p>\n<p>(which dates back to Isabelle2009-2). Is this the latest news with <br>\nrespect to typedef and local theory contexts? Further, what does the <br>\nrestriction \"without introducing dependencies on parameters or <br>\nassumptions\" actually mean?</p>\n<p>If it would mean that I cannot use locale parameters in the defining set <br>\nof a typedef, then I would not consider 'typedef' to be localized at all <br>\n(since the only allowed instances can easily be moved outside the local <br>\ncontext, or am I missing something?).</p>\n<p>Related to Randy's question: is it (or should it, or will it ever be) <br>\npossible to do the following?</p>\n<p>locale term_algebra =<br>\n     fixes F :: \"'a set\"<br>\n     fixes V :: \"'b set\"<br>\n   begin</p>\n<p>definition \"domain α = {x ∈ V. α x ≠ Var x}\"</p>\n<p>typedef ('a, 'b) subst =<br>\n     \"{α :: 'b =&gt; ('a, 'b) term. finite (domain α)}\"<br>\n   end</p>\n<p>for which I currently obtain:</p>\n<p>Locally fixed type arguments \"'a\", \"'b\" in type declaration \"subst\"</p>\n<p>which sounds similar to what Randy is experiencing.</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294241412,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907144
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;<br>\nHi Randy,</p>\n<p>The above looks like a bug. However, there's an easy workaround:</p>\n<p>type_synonym 'b atm = \"int * 'b\"</p>\n<p>Cheers,</p>\n<p>Jasmin</p>",
        "id": 294241425,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907150
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 14 May 2013, Randy Pollack wrote:</p>\n<blockquote>\n<p>Consider the cut-down locale definition:</p>\n<p>locale step =<br>\n label:lattice where sup = lblsup<br>\n for lblsup::\"'a =&gt; 'a =&gt; 'a\"</p>\n<p>In the context of this locale want a type synonym:</p>\n<p>type_synonym 'a atm = \"int * 'a\"</p>\n<p>This is rejected:</p>\n<p>*** Locally fixed type arguments \"'a\" in type declaration \"atm\"</p>\n</blockquote>\n<p>Witin the locale context type 'a is locally fixed, i.e. a local type <br>\nconstant.  Thus it cannot be used again as parameter for the type_synonym. <br>\nYou have to avoid the clash of scope manually like this:</p>\n<p>type_synonym 'b atm = \"int * 'b\"</p>\n<blockquote>\n<p>OK, but the following is also rejected:</p>\n<p>type_synonym atm = \"int * 'a\"<br>\n*** Extra variables on rhs: \"'a\"</p>\n<p>Is it possible to make such a type synonym in a locale?</p>\n</blockquote>\n<p>It is in principle possible to support that, but adding even more <br>\ninfrastructure to local context.  The localized version of type_synonym in <br>\nIsabelle2013 is still a bit crude in that respect.  I did not push this <br>\nfurther so far, because so many other tools that introduce types are not <br>\nfully localized yet and need to catch up with the advances from 2009/2010.</p>\n<p>Makarius</p>",
        "id": 294241438,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907156
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Wed, 15 May 2013, Christian Sternagel wrote:</p>\n<blockquote>\n<ul>\n<li>Command 'typedef' now works within a local theory context -- without<br>\n introducing dependencies on parameters or assumptions, which is not<br>\n possible in Isabelle/Pure/HOL.</li>\n</ul>\n</blockquote>\n<p>It means you cannot refer to the fixes / assumes of context in the type <br>\nspecification -- this is logically impossible in Isabelle/Pure/HOL. Only <br>\nthe non-emptyness proof lives within the context, and the resulting <br>\ntheorems are local.  (Actual dependence of the proof on logical content of <br>\nthe context is hard to get in practice, though.)</p>\n<blockquote>\n<p>If it would mean that I cannot use locale parameters in the defining set <br>\nof a typedef, then I would not consider 'typedef' to be localized at all <br>\n(since the only allowed instances can easily be moved outside the local <br>\ncontext, or am I missing something?).</p>\n</blockquote>\n<p>'typedef' is formally localized within the range of what is possible. <br>\nLocalization means to work with the local theory infrastructure and the <br>\ncontext in the usual ways.  For typedef this means extra-logical things <br>\nlike name spaces, syntax, derived declarations etc.</p>\n<p>Historically, due to the impossibility to make typedef depend on the <br>\nlogical part of the context, it was not localized at all, and many tool <br>\nimplementations suffer from that until today.</p>\n<blockquote>\n<p>Related to Randy's question: is it (or should it, or will it ever be) <br>\npossible to do the following?</p>\n<p>locale term_algebra =<br>\n   fixes F :: \"'a set\"<br>\n   fixes V :: \"'b set\"<br>\n begin</p>\n<p>definition \"domain α = {x ∈ V. α x ≠ Var x}\"</p>\n<p>typedef ('a, 'b) subst =<br>\n   \"{α :: 'b =&gt; ('a, 'b) term. finite (domain α)}\"<br>\n end</p>\n<p>for which I currently obtain:</p>\n<p>Locally fixed type arguments \"'a\", \"'b\" in type declaration \"subst\"</p>\n</blockquote>\n<p>You would have to evade the scope clash as for type_synonym, by using <br>\ndifferent names for the parameters of type subst.</p>\n<p>Nonetheless, this does not work from a logical standpoint: the dependency <br>\non term parameter V cannot be used in HOL typedef. The local theory <br>\nconcept does not provide magic ways to augment the logic -- it is merely <br>\ninfrastructure for an existing logical framework.</p>\n<p>Makarius</p>",
        "id": 294241479,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907162
    }
]