[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\ntype_synonym 'a t = \"'a :: field\"</p>\n<p>yields</p>\n<p>Ignoring sort constraints in type variables(s): \"'a\"<br>\nin type abbreviation \"t\"</p>\n<p>Why that? It would be very nice not to lose them.</p>\n<p>Tobias</p>",
        "id": 294219721,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896797
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nCan you explain what you are trying to achieve? Do you want the system to <br>\nreject type expressions if the argument types of synonyms do not observe <br>\nthe sort constraint?</p>\n<p>Type classes never restrict the domain of type constructors, they are <br>\nalways defined.  Type synonyms are not even type constructors, just some <br>\nabstract syntax for existing types.</p>\n<p>Makarius</p>",
        "id": 294219724,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896799
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI figured it out myself: because in an application to some type T, \"T t = T ::<br>\nfield\", but the rhs is only legal if T is a type variable, not a compound type.<br>\nHence my type synonym would only make sense if we allowed types of the form \"T<br>\n:: C\" (just like we allow terms of the form \"e :: T\"). I had not thought this<br>\nthrough, but by analogy with the term level, I guess \"T::C\" should be rejected<br>\nif T is not of class C.</p>\n<p>Although I had not originally thought of this generalization, I must say that I<br>\nhave occasionally wished I could write \"T :: C\" to check if some type is in some<br>\nclass. But maybe there is alternative way to check this?</p>\n<p>Tobias</p>",
        "id": 294219751,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896825
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Fri, 10 Aug 2012, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>I figured it out myself: because in an application to some type T, \"T t <br>\n= T :: field\", but the rhs is only legal if T is a type variable, not a <br>\ncompound type. Hence my type synonym would only make sense if we allowed <br>\ntypes of the form \"T :: C\" (just like we allow terms of the form \"e :: <br>\nT\"). I had not thought this through, but by analogy with the term level, <br>\nI guess \"T::C\" should be rejected if T is not of class C.</p>\n</blockquote>\n<p>Correct.  The term language as full type constraint solving, but the type <br>\nlanguage not.  Sort constraints are limited to type variables, and there <br>\nis no \"sort inference\".</p>\n<p>In the past 2 decades I have occasionally observed the difference as a <br>\nmatter of fact.  I don't think it would be feasible to change this.</p>\n<blockquote>\n<p>Although I had not originally thought of this generalization, I must say <br>\nthat I have occasionally wished I could write \"T :: C\" to check if some <br>\ntype is in some class. But maybe there is alternative way to check this?</p>\n</blockquote>\n<p>Once you write down T as expression, its type variables have already some <br>\nsort assignment, so it is all settled.</p>\n<p>What exactly means \"to check\"?  What is the application context?</p>\n<p>Makarius</p>",
        "id": 294219976,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896940
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAm 10/08/2012 16:37, schrieb Makarius:</p>\n<blockquote>\n<p>On Fri, 10 Aug 2012, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>I figured it out myself: because in an application to some type T, \"T t = T ::<br>\nfield\", but the rhs is only legal if T is a type variable, not a compound<br>\ntype. Hence my type synonym would only make sense if we allowed types of the<br>\nform \"T :: C\" (just like we allow terms of the form \"e :: T\"). I had not<br>\nthought this through, but by analogy with the term level, I guess \"T::C\"<br>\nshould be rejected if T is not of class C.</p>\n</blockquote>\n<p>Correct.  The term language as full type constraint solving, but the type<br>\nlanguage not.  Sort constraints are limited to type variables, and there is no<br>\n\"sort inference\".</p>\n<p>In the past 2 decades I have occasionally observed the difference as a matter of<br>\nfact.  I don't think it would be feasible to change this.</p>\n</blockquote>\n<p>And it would not buy us very much, except:</p>\n<blockquote>\n<blockquote>\n<p>Although I had not originally thought of this generalization, I must say that<br>\nI have occasionally wished I could write \"T :: C\" to check if some type is in<br>\nsome class. But maybe there is alternative way to check this?</p>\n</blockquote>\n<p>Once you write down T as expression, its type variables have already some sort<br>\nassignment, so it is all settled.</p>\n<p>What exactly means \"to check\"?  What is the application context?</p>\n</blockquote>\n<p>Check in the sense of ascertain, test, verify. Writing T down and having it<br>\nparsed settles only that it (T) is a legal type, but not if it is, for example,<br>\na field.</p>\n<p>Tobias</p>",
        "id": 294219987,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896952
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOf course, one can do this in ML. So far I was under the implicit <br>\nassumption that we talk about type inference for the surface syntax that <br>\nis usually exposed to end-users.</p>\n<p>Here is an example:</p>\n<p>ML {*<br>\n   val T = @{typ \"'a::finite * 'b::finite * bool\"};<br>\n   val S = @{sort finite};<br>\n   @{assert} (Sign.of_sort @{theory} (T, S))<br>\n*}</p>\n<p>So T is first produced by going through the whole syntax + check layers of <br>\nIsabelle.  Later we test if it belongs to a certain sort.</p>\n<p>Once could wrap something like this into a document antiquotation for <br>\nexample.  Note that it can <em>not</em> be done inside an ML syntax translation <br>\n-- that is too early in the many syntax layers and the information is not <br>\nthere yet.</p>\n<p>Makarius</p>",
        "id": 294220049,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896964
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI meant on the Isabelle top level. Like command \"typ\". But with class.</p>\n<p>Tobias</p>",
        "id": 294220059,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896971
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nHere are some variants with terms, using the regular type-inference to <br>\nensure a certain sort membership in the end:</p>\n<p>term \"TYPE('a::finite * 'b::finite * bool) :: _::finite itself\"</p>\n<p>notepad<br>\nbegin<br>\n   let \"_ :: _::finite itself\" = \"TYPE('a::finite * 'b::finite * bool)\"<br>\nend</p>\n<p>This works because \"_::finite\" is a type-inference parameter that can be <br>\ninstantiated.</p>\n<p>In principle, one could cook up something like SORT_CONSTRAINT for the <br>\nabove, although that is not that elegant.</p>\n<p>This is just type-inference, not sort-inference.  And without the term <br>\ncontext, there would not even be type-inference.</p>\n<p>Makarius</p>",
        "id": 294220082,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896990
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThere would probably not be that many uses of such a document antiquotation but<br>\nsurely one could also wrap that code up into a top level command?</p>\n<p>Tobias</p>",
        "id": 294220086,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896996
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI would rather make it a variant of the existing 'typ' command like this:</p>\n<p>typ T  -- \"as before\"<br>\n   typ T :: S  -- \"with sort check\"</p>\n<p>I'll study the situation of the sources soon ...</p>\n<p>Makarius</p>",
        "id": 294220171,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660897057
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAm 12/08/2012 22:03, schrieb Makarius:</p>\n<blockquote>\n<p>On Sat, 11 Aug 2012, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>surely one could also wrap that code up into a top level command?</p>\n</blockquote>\n<p>I would rather make it a variant of the existing 'typ' command like this:</p>\n<p>typ T  -- \"as before\"<br>\n  typ T :: S  -- \"with sort check\"</p>\n</blockquote>\n<p>Great minds think alike ;-)<br>\nI hadn't suggested it myself because I thought you might object that this gives<br>\nthe impression that \"T :: S\" is legal syntax for types in general.<br>\nBut I am all for it!</p>\n<p>Tobias</p>\n<blockquote>\n<p>I'll study the situation of the sources soon ...</p>\n<p>Makarius</p>\n</blockquote>",
        "id": 294220189,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660897069
    }
]