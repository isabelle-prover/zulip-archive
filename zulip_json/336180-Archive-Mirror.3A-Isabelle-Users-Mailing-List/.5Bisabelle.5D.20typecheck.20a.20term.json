[
    {
        "content": "<p>From: Sean McLaughlin &lt;<a href=\"mailto:seanmcl@cmu.edu\">seanmcl@cmu.edu</a>&gt;<br>\nHi,</p>\n<p>I needed to create some Isabelle terms by hand, and would like to  <br>\nmake<br>\nsure they typecheck as a sanity check.  So, eg.</p>\n<p>Const (\"==\", \"bool =&gt; bool =&gt; bool\") $ Free (\"a\", \"bool\") $<br>\n       Free (\"b\", \"prop\") : Term.term</p>\n<p>Doesn't typecheck.  What function do I call?</p>\n<p>Thanks,</p>\n<p>Sean</p>",
        "id": 293899824,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660744006
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nOne way is to call the function cterm_of, which converts a raw term  <br>\nto a \"certified term\". Note that typechecking only makes sense in the  <br>\ncontext of a theory. The most basic theory is ProtoPure.thy, which  <br>\nonly knows about the meta-logic connectives. Or HOL.thy (for the  <br>\nbasic HOL types) or Main.thy (for everything).</p>\n<p>Larry</p>",
        "id": 293899828,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660744006
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@rsise.anu.edu.au\">Jeremy.Dawson@rsise.anu.edu.au</a>&gt;<br>\nSean McLaughlin wrote:<br>\nIf I understand you correctly, you have entered the code</p>\n<p>Const (\"==\", \"bool =&gt; bool =&gt; bool\") $ Free (\"a\", \"bool\") $</p>\n<blockquote>\n<p>Free (\"b\", \"prop\") : Term.term</p>\n</blockquote>\n<p>by hand - is that right?</p>\n<p>If so you have the problem that the type which is printed as<br>\n\"bool =&gt; bool =&gt; bool\" isn't actually a string, to create it you<br>\nhave to do something like</p>\n<p>fun ctyp str = Type (str, []) ;<br>\nval charT = ctyp \"List.char\" ; (* was \"Main.char\" *)<br>\nval nibbleT = ctyp \"List.nibble\" ; (* was \"Main.nibble\" *)<br>\nval boolT = ctyp \"bool\" ;<br>\nfun listT ty = Type (\"List.list\", [ty]) ;<br>\nfun setT ty = Type (\"set\", [ty]) ;<br>\nfun pairT (t1, t2) = Type (\"*\", [t1, t2]) ;<br>\nfun funT (t1, t2) = Type (\"fun\", [t1, t2]) ;<br>\nfun ifunT [] t2 = t2<br>\n   | ifunT (t :: ts) t2 = funT (t, ifunT ts t2) ;</p>\n<p>ifunT [boolT, boolT] boolT ;<br>\nval it = \"bool =&gt; bool =&gt; bool\" : Term.typ</p>\n<p>Then you can do</p>\n<p>val t = Free (\"==\",  ifunT [boolT, boolT] boolT) $ Free (\"a\", boolT) $<br>\n        Free (\"b\", boolT) : Term.term ;</p>\n<p>cterm_of (the_context ()) t ;</p>\n<p>Is this the sort of thing you wanted to do?</p>\n<p>Note that you can't use Const except for an already exsiting Const of <br>\nthe right type,<br>\nand \"prop\" and \"bool\" are different types.</p>\n<p>Jeremy</p>",
        "id": 293899829,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660744007
    }
]