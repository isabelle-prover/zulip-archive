[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:lochbihl@ipd.info.uni-karlsruhe.de\">lochbihl@ipd.info.uni-karlsruhe.de</a>&gt;<br>\nThe Isabelle tutorial mentions typedecl as a simple way to say that a <br>\ntype is actually a parameter to some theory development. In particular, <br>\nexplicit type parameters for constants, datatypes etc. do not clutter <br>\nthe definitions and proofs.</p>\n<p>But what if later on, I want to instantiate such a type to a concrete <br>\ntype in some application that uses the theory? Can this be done? If so, <br>\ncan different theories instantiate the type differently? What happens <br>\nthen at a theory merge?</p>\n<p>Are there other ways to fix type parameters such that I don't have to <br>\nwrite them everywhere?</p>\n<p>Andreas</p>",
        "id": 294079523,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830191
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Wed, 29 Jul 2009, Andreas Lochbihler wrote:</p>\n<blockquote>\n<p>The Isabelle tutorial mentions typedecl as a simple way to say that a <br>\ntype is actually a parameter to some theory development. In particular, <br>\nexplicit type parameters for constants, datatypes etc. do not clutter <br>\nthe definitions and proofs.</p>\n<p>But what if later on, I want to instantiate such a type to a concrete <br>\ntype in some application that uses the theory? Can this be done?</p>\n</blockquote>\n<p>You would have to produce a post-hoc axiomatic specification of the type. <br>\nE.g. by postulating \"type_definition rep abs A\" and maybe reinitializing <br>\nsome declarations in imitation of the 'typedef' package.</p>\n<p>A slightly more disciplined way would be to reinterpret the whole theory <br>\nin the manner of the AWE tool from Bremen.</p>\n<blockquote>\n<p>If so, can different theories instantiate the type differently? What <br>\nhappens then at a theory merge?</p>\n</blockquote>\n<p>With raw axiomatizations you would just get an inconsistent theory.</p>\n<blockquote>\n<p>Are there other ways to fix type parameters such that I don't have to <br>\nwrite them everywhere?</p>\n</blockquote>\n<p>A locale context can abstract over simple types, but not type constructors <br>\n(this is a fundamental limitation of the logical framework, which lacks <br>\ntrue polymorphism).  See Isabelle2009/src/HOL/ex/Abstract_NAT.thy for an <br>\nexample.  We are still working on \"localizing\" more definitional packages, <br>\nto allow them within such a local context (record, datatype in <br>\nparticular).</p>\n<p>The \"target\" mechanism behind this idea is fully generic in terms of <br>\nlogical interpretation.  So one could even think of wrapping up AWE as a <br>\nlocal theory target, and then allow users to interpret polymorphic type <br>\nand term constants in a disciplined way.</p>\n<p>Makarius</p>",
        "id": 294079543,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830197
    }
]