[
    {
        "content": "<p>From: Walther Neuper &lt;<a href=\"mailto:wneuper@ist.tugraz.at\">wneuper@ist.tugraz.at</a>&gt;<br>\nI want to re-use an elaborated \"typedef\" (with identifier \"ttt\")</p>\n<p>definition ppp :: \"'a ⇒ bool\" where \"ppp p = True\"<br>\ntypedef 'a ttt = \"{p::'a. ppp p}\" unfolding ppp_def by auto</p>\n<p>in a recursive datatype</p>\n<p>datatype 'a ddd = C0 'a | Cn \"('a ddd) ttt\"</p>\n<p>and get the understandable error message</p>\n<p>Non-admissible type expression<br>\n'a ddd ttt<br>\n\"Test.ttt\" is not a datatype - can't use it in nested recursion</p>\n<p>What is the best way to re-use \"ttt\" in \"ddd\" ?<br>\nWalther</p>",
        "id": 294270740,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917123
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Walther,</p>\n<p>The old datatype package supports recursion only through datatypes created by the old <br>\ndatatype package (or registered with rep_datatype). The new datatype package <br>\n(~~/src/HOL/BNF/BNF) supports recursion through arbitrary bounded natural functors (BNFs). <br>\nHowever, typedefs are in general not bounded natural function. If your typedef is a BNF, <br>\nyou can register it with the bnf command. Examples for registration can be found in <br>\n~~/src/HOL/BNF/More_BNFs.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294270770,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917133
    },
    {
        "content": "<p>From: Walther Neuper &lt;<a href=\"mailto:wneuper@ist.tugraz.at\">wneuper@ist.tugraz.at</a>&gt;<br>\nOn 03/27/2014 09:35 AM, Andreas Lochbihler wrote:</p>\n<blockquote>\n<p>Hi Walther,</p>\n<p>The old datatype package supports recursion only through datatypes <br>\ncreated by the old datatype package (or registered with rep_datatype). <br>\nThe new datatype package (~~/src/HOL/BNF/BNF) supports recursion <br>\nthrough arbitrary bounded natural functors (BNFs). However, typedefs <br>\nare in general not bounded natural function. If your typedef is a BNF, <br>\nyou can register it with the bnf command.</p>\n</blockquote>\n<p>Thank you very much!</p>\n<p>Since our typedef is not a BNF, we would need a workaround, which I'll <br>\nshortcut by a simpler way (just a list) now.</p>\n<blockquote>\n<p>Examples for registration can be found in ~~/src/HOL/BNF/More_BNFs.</p>\n<p>Best,<br>\nAndreas</p>\n<p>On 27/03/14 09:02, Walther Neuper wrote:</p>\n<blockquote>\n<p>I want to re-use an elaborated \"typedef\" (with identifier \"ttt\")</p>\n<p>definition ppp :: \"'a ⇒ bool\" where \"ppp p = True\"<br>\ntypedef 'a ttt = \"{p::'a. ppp p}\" unfolding ppp_def by auto</p>\n<p>in a recursive datatype</p>\n<p>datatype 'a ddd = C0 'a | Cn \"('a ddd) ttt\"</p>\n<p>and get the understandable error message</p>\n<p>Non-admissible type expression<br>\n'a ddd ttt<br>\n\"Test.ttt\" is not a datatype - can't use it in nested recursion</p>\n<p>What is the best way to re-use \"ttt\" in \"ddd\" ?<br>\nWalther</p>\n</blockquote>\n</blockquote>",
        "id": 294270799,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917146
    }
]