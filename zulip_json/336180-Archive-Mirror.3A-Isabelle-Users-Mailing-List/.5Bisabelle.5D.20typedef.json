[
    {
        "content": "<p>From: \"Roger H.\" &lt;<a href=\"mailto:s57076@hotmail.com\">s57076@hotmail.com</a>&gt;<br>\nHi,</p>\n<p>i want to create a datatype</p>\n<p>typedef less_three = {n€N. n&lt;3}</p>\n<p>Now, when we write</p>\n<p>definition my_number  :: nat, where \"my_number = 0.5\"</p>\n<p>then we get an error \"0.5 is not a nat\"</p>\n<p>Now i want to get the same error with the type above less_three, meaning if i write</p>\n<p>definition other_number :: three, where \"other_number = 4\"      (*)</p>\n<p>then i want to get an error that \"4 is not a less_three\"  (cause its larger)</p>\n<p>so basically an automatic type warning.</p>\n<p>What bothers me is that the equation (*) above is just accepted by isabelle although its bad typed.</p>\n<p>I have an idea what Rep and Abs do from the tutorial so i kinda understand, but still do you think u can give me an idea how to make the equation (*) produce an error?</p>\n<p>Thank you!</p>",
        "id": 294264558,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915657
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nHi Roger,</p>\n<p>Am Mittwoch, den 08.01.2014, 12:10 +0200 schrieb Roger H.:</p>\n<blockquote>\n<p>i want to create a datatype</p>\n<p>typedef less_three = {n€N. n&lt;3}</p>\n</blockquote>\n<p>(Small note: It is easier to read if you directly copy&amp;paste the Isar<br>\nsources from jEdit. \"€\" looks very strange, and your examples don't<br>\nmatch HOL syntax nor your own definitions. )</p>\n<blockquote>\n<p>Now, when we write</p>\n<p>definition my_number  :: nat, where \"my_number = 0.5\"</p>\n<p>then we get an error \"0.5 is not a nat\"</p>\n</blockquote>\n<p>Which Isabelle version are you using? </p>\n<p>theory Scratch<br>\n    imports Complex_Main<br>\n  begin</p>\n<p>definition n :: nat where \"n = 0.5\"</p>\n<p>Results into:</p>\n<p>Bad head of lhs: existing constant \"real\"<br>\n  The error(s) above occurred in definition:<br>\n  \"real n ≡ 5 / 10\"</p>\n<p>This is a little strange: what happens is that Isabelle sees that<br>\nn as a natural number does not support division \"5 / 10\", so it<br>\ntranslates it into a real number. But this does result into a term not<br>\nsuitable for definitions.</p>\n<blockquote>\n<p>Now i want to get the same error with the type above less_three, meaning if i write</p>\n<p>definition other_number :: three, where \"other_number = 4\"      (*)</p>\n<p>then i want to get an error that \"4 is not a less_three\"  (cause its larger)</p>\n<p>so basically an automatic type warning.</p>\n</blockquote>\n<p>Actually it produces an error:</p>\n<p>theory Scratch imports Complex_Main begin</p>\n<p>typedef three = \"{n::nat. n &lt;= 3}\" <br>\n    sorry</p>\n<p>definition x :: three where \"x = 4\"</p>\n<p>gives</p>\n<p>Type unification failed: No type arity three :: numeral</p>\n<p>(there is a longer text from type coercion which we can ignore)</p>\n<p>To support this you need to instantiate less_three with numerals. When<br>\nyou add this your definition works.</p>\n<p>What you want to do is not possible with the existing infrastructure.<br>\nEither your type allows numerals, then you need to convert each number<br>\ninto your type (of course you can use module arithmetic to fit it into a<br>\nfinite range). You can however avoid negative numerals and decimal point<br>\nnumerals by not supporting  unary minus or division.</p>\n<blockquote>\n<p>What bothers me is that the equation (*) above is just accepted by isabelle although its bad typed.</p>\n</blockquote>\n<p>No the typing is correct. The semantics are strange, but this is exactly<br>\nwhat Isabelle is for. You can proof:</p>\n<p>nat_of_three x ~= 4</p>\n<p>(assuming a translation function nat_of_three :: three =&gt; nat)</p>\n<blockquote>\n<p>I have an idea what Rep and Abs do from the tutorial so i kinda understand, but still do you<br>\nthink u can give me an idea how to make the equation (*) produce an error?</p>\n</blockquote>\n<p>Use the logic, not the type system! Otherwise you may need dependent<br>\ntypes.</p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294264609,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915679
    }
]