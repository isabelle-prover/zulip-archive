[
    {
        "content": "<p>From: Erich Kummerfeld &lt;<a href=\"mailto:ekummerfeld@gmail.com\">ekummerfeld@gmail.com</a>&gt;<br>\nHi,</p>\n<p>I'm having a problem of types, I believe, and their interaction with<br>\nplaceholder functions.  I've been able to reduce it to this example:</p>\n<p>consts<br>\nP :: \"'a =&gt; bool\"</p>\n<p>theorem \"P x ==&gt; P (?x21 x)\"</p>\n<p>If I apply assumption here I get an empty result sequence error.  It works<br>\njust fine if P is defined as a function from a bool to a bool or a nat to a<br>\nbool, as I'd expect it to.  I'm not sure why it doesn't work for type 'a<br>\nalso.  Is there another way I can solve proofs of this form if I'm defining<br>\nP the way that I am?</p>\n<p>Thanks in advance,<br>\nErich Kummerfeld</p>",
        "id": 294063182,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824500
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nYour P is polymorphic. Hence two occurrences of P need not have the same <br>\ntype. Hence Isabelle gave your two P's the most general type, ie one is <br>\nof type 'a =&gt; bool and the other of type 'b =&gt; bool.</p>\n<p>Many problems are typing problems. General advice: always switch on<br>\nIsabelle -&gt; Settings -&gt; Show types<br>\nwhen you have a problem.</p>\n<p>You can fix it with explicit annotations, eg</p>\n<p>theorem \"P(x::'a) ==&gt; P(?x21 x :: 'a)\"</p>\n<p>Tobias</p>\n<p>PS I don't recommend theorems with unknowns in them, but that's a matter <br>\nof taste.</p>\n<p>Erich Kummerfeld wrote:</p>",
        "id": 294063204,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824512
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nTobias Nipkow wrote:<br>\nPart of the problem is also that the types are also fixed.  You can also <br>\nspecify unknown types, thus</p>\n<p>\"P (x :: 'a) ==&gt; P (?x21 x :: ?'x)\" ;</p>\n<p>Then also it will work.  (Not that there is normally any good reason to <br>\ndo this)</p>\n<p>Jeremy</p>",
        "id": 294063391,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824555
    }
]