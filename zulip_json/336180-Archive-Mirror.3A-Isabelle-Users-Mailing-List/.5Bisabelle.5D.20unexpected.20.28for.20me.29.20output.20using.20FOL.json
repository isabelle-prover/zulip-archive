[
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThe collapsing of ALL x. P(x) to All(P) is a side-effect of the way  <br>\nthat all binding syntax is handled in Isabelle. Although it can be  <br>\nannoying, here All(P)--&gt;All(P) tells you that (ALL x. P(x)) and (ALL  <br>\ny. P(y)) are actually the same formula in Isabelle.</p>\n<p>Larry Paulson</p>",
        "id": 294043462,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816318
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nHere (ALL x y. P(x, y)) is internally All(%x. All(%y. P x y)), which  <br>\ncan be collapsed to All(%x. All(P x)), so you see (ALL x y. P(x, y)).  <br>\nThe \"collapsing\" is actually called eta-contraction and it is  <br>\nperformed by the rewriter.</p>\n<p>[Note to Isabelle/HOL users: in FOL, P(x,y) is what you would write  <br>\nas P x y. Thus this example behaves differently in Isabelle/HOL,  <br>\nwhere P(x,y) abbreviates P(Pair x y) and the eta-contraction is no  <br>\nlonger possible.]</p>\n<p>Larry Paulson</p>",
        "id": 294043513,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816324
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis looks like you don't have Poly/ML installed properly for your <br>\nplatform.  Since this is ppc-darwin we already provide precompiled <br>\npackages for HOL etc. on the Isabelle download site.  Try to use these <br>\nbefore attempting to install any operation system packages for Poly/ML, <br>\nProofGeneral etc. that occasionally show up elsewhere.</p>\n<p>This should enable you to run plain isabelle tty sessions at the least.  <br>\nGetting a version of (X)Emacs that works with ProofGeneral is a different <br>\nissue.</p>\n<p>Makarius</p>",
        "id": 294043596,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816355
    },
    {
        "content": "<p>From: Joao Marcos &lt;<a href=\"mailto:jmarcos@dimap.ufrn.br\">jmarcos@dimap.ufrn.br</a>&gt;<br>\nDear ALL x. IsabelleExpert(x):</p>\n<p>Sometimes Isabelle returns outputs that I see as somewhat unexpected...</p>\n<p>For instance, suppose I want to show that the name of a universally<br>\nquantified variable can be changed, and write:</p>\n<p>Goalw [iff_def] \"(ALL x. P(x)) &lt;-&gt; (ALL y. P(y))\";</p>\n<p>I would have expected then the output to be a goal such as:</p>\n<p>((ALL x. P(x))--&gt;(ALL y. P(y))) &amp; ((ALL y. P(y))--&gt;(ALL x. P(x)))</p>\n<p>but Isabelle gives me the following:</p>\n<p>Level 0 (1 subgoal)<br>\n((ALL x. P(x))&lt;-&gt;(ALL y. P(y)))</p>\n<ol>\n<li>((All(P)--&gt;All(P))&amp;(All(P)--&gt;All(P)))<br>\nval it = [] : Thm.thm list</li>\n</ol>\n<p>WHY??</p>\n<p>Suppose, moreover, I want to prove that contiguous universal<br>\nquantifiers can be exchanged, and write:</p>\n<p>Goalw [iff_def] \"(ALL x. (ALL y. P(x,y))) &lt;-&gt; (ALL y. (ALL x. P(x,y)))\";</p>\n<p>Here the output is:</p>\n<p>Level 0 (1 subgoal)<br>\n(ALL x y. P(x, y)) &lt;-&gt; (ALL y x. P(x, y))</p>\n<ol>\n<li>((ALL x. All(P(x))) --&gt; (ALL y x. P(x, y))) &amp;<br>\n    ((ALL y x. P(x, y)) --&gt; (ALL x. All(P(x))))<br>\nval it = [] : Thm.thm list</li>\n</ol>\n<p>WHY does the system exchange some but not all instances of P(x,y) for<br>\nP(x), and uses \"All\" to write the new goal??</p>\n<p>I note that these things only occur when I use Goalw plus a rewrite<br>\nrule such as iff_def, but not if I simply use Goal to prove my<br>\ntheorem.  Why?</p>\n<p>Thanx in advance for the clarification,<br>\nJM</p>",
        "id": 294044315,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816664
    }
]