[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:lochbihl@ipd.info.uni-karlsruhe.de\">lochbihl@ipd.info.uni-karlsruhe.de</a>&gt;<br>\nHi,</p>\n<p>when I interpret a locale with some parameters and multiple assumptions, <br>\n  applying the unfold_locales method yields all the goals that have to <br>\nbe shown. With many fixes, assumptions and complex conclusions, I would <br>\nbe happy to have such convenient shortcuts like \"case (... ...)\" and <br>\n?case for inductions with induct, with the names e.g. being taken from <br>\nthe assumptions' names in the locale definition, but according to the <br>\nprint_cases command, unfold_locales does not provide these by default. <br>\nDoes unfold_locales offer such a feature?</p>\n<p>Meanwhile, I help myself with</p>\n<p>proof(induct rule: &lt;locale_name&gt;.intro[case_names ...])</p>\n<p>but this is not optimal since</p>\n<ol>\n<li>it does not support hierarchical interpretations</li>\n<li>there is nothing like induction going on here, so induct is a bad name.</li>\n<li>the case names get messed up if the order of the assumptions is <br>\nchanged in the locale.</li>\n</ol>\n<p>Does anyone have any better ideas?</p>\n<p>Andreas</p>",
        "id": 294064337,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824892
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 24 Jul 2008, Andreas Lochbihler wrote:</p>\n<blockquote>\n<p>applying the unfold_locales method yields all the goals that have to be <br>\nshown. With many fixes, assumptions and complex conclusions, I would be <br>\nhappy to have such convenient shortcuts like \"case (... ...)\" and ?case <br>\nfor inductions with induct, with the names e.g. being taken from the <br>\nassumptions' names in the locale definition, but according to the <br>\nprint_cases command, unfold_locales does not provide these by default. <br>\nDoes unfold_locales offer such a feature?</p>\n</blockquote>\n<p>No, even though this omission has been known for a long time already.</p>\n<blockquote>\n<p>Meanwhile, I help myself with</p>\n<p>proof(induct rule: &lt;locale_name&gt;.intro[case_names ...])</p>\n<p>but this is not optimal since</p>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>there is nothing like induction going on here, so induct is a bad <br>\n   name.</li>\n</ol>\n</blockquote>\n<p>The usual to applies arbitrary rules with cases emitted into the proof <br>\ncontext is via the \"cases\" method.</p>\n<p>Makarius</p>",
        "id": 294064348,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824898
    }
]