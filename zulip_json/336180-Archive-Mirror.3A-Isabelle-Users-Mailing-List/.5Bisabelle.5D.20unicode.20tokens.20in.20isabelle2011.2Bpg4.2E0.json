[
    {
        "content": "<p>From: Clemens Ballarin &lt;<a href=\"mailto:ballarin@in.tum.de\">ballarin@in.tum.de</a>&gt;<br>\nHi John,</p>\n<p>I don't think this will work with PG 4.0.  I use  <br>\nProofGeneral-4.1pre110131.  In order to get rid of boxes displayed  <br>\ninstead of symbols, set the buffer's font to \"Apple Symbols\".  Also  <br>\nset the symbol font in \"Tokens &gt; Set Font &gt; symbol\" to this font.</p>\n<p>You may choose a different font for the buffer, but then symbols in  <br>\nantiquotations won't work.</p>\n<p>Clemens</p>\n<p>Quoting John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;:</p>",
        "id": 294129832,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660842421
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi John,</p>\n<blockquote>\n<p>I have my keyboard layout set up so that, for instance,<br>\nOPTION-SHIFT-A produces the unicode forall (∀) symbol. Previously I<br>\ncould use this freely in Isabelle proof scripts, but now I get an<br>\n\"inner lexical error\" message when Isabelle is parsing statements<br>\ninvolving these symbols.</p>\n</blockquote>\n<p>The handling of symbols changed drastically from pg 3.7 to 4.</p>\n<p>I am not sure if I know a solution, but the problem seems to be that you <br>\nare creating a unicode symbol in the buffer, but Isabelle expects the <br>\nascii-encoded symbol \\&lt;forall&gt; (which pg displays using the same glyph, <br>\nbut it's represented differently). I can reproduce this without special <br>\nkeyboard mapping by copy and pasting the character from elsewhere.</p>\n<p>I haven't seen an option in pg that rebinds unicode keysyms to these <br>\nspecial tokens. However, in the worst case you should be able to rebind <br>\nthe keys yourself. Here is what works in my Emacs:</p>\n<p>(global-set-key (kbd \"C-A\") (lambda () (interactive)<br>\n   (unicode-tokens-insert-token \"forall\")))</p>\n<p>(possibly replacing the unicode keysym for C-A)<br>\nUnfortunately, you have to do this for each symbol then... but it's <br>\nbetter than nothing.</p>\n<p>Hope this helps...</p>\n<p>Clemens Ballarin wrote:</p>\n<blockquote>\n<p>In order to get rid of boxes displayed instead of symbols...</p>\n</blockquote>\n<p>Do I understand correctly that you do see the symbols correctly...?</p>\n<p>Alex</p>",
        "id": 294130062,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660842489
    },
    {
        "content": "<p>From: Clemens Ballarin &lt;<a href=\"mailto:ballarin@in.tum.de\">ballarin@in.tum.de</a>&gt;<br>\nQuoting Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;:</p>\n<blockquote>\n<p>Do I understand correctly that you do see the symbols correctly...?</p>\n</blockquote>\n<p>And beautifully.  But it only works for Apple Symbols, neither  <br>\nIsabelleText nor the Stix fonts (although the latter work perfectly  <br>\nwell in all other applications).  I have not explanation why this is so.</p>\n<p>Clemens</p>",
        "id": 294130170,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660842525
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:mail@joachim-breitner.de\">mail@joachim-breitner.de</a>&gt;<br>\nHi,</p>\n<p>is there a reason why Isabelle would not accept ∀ synonymously to<br>\n\\&lt;forall&gt; in theory files? This would also be nice for all those<br>\nunicode-loving folk who occasionally at .thy files directly (e.g. doing<br>\nsome mass-substitution with vim, or looking at diffs).</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/tZY74F9QY76M94a4xnoU6ARE/signature.asc\">signature.asc</a></p>",
        "id": 294130228,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660842543
    },
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;<br>\nHello,</p>\n<p>I've just upgraded from Isabelle2009-2 to Isabelle2011, and from pg3.7 to pg4.0. (I'm running Aquamacs 2.1.)</p>\n<p>The upgrade was fine, except I'm now having a problem with unicode tokens. </p>\n<p>I have my keyboard layout set up so that, for instance, OPTION-SHIFT-A produces the unicode forall (∀) symbol. Previously I could use this freely in Isabelle proof scripts, but now I get an \"inner lexical error\" message when Isabelle is parsing statements involving these symbols.</p>\n<p>When I turn on \"highlight real unicode chars\" in the Tokens menu, this forall symbol is highlighted, but when I type \"\\&lt;forall&gt;\" in my proof script, it produces a symbol that <em>looks</em> the same as the unicode character, but isn't highlighted.</p>\n<p>How can I get back my ability to write my isabelle scripts in unicode?</p>\n<p>Thanks very much for your help.<br>\nJohn</p>",
        "id": 294130258,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660842554
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe deeper reason is that unicode is neither uniform nor universal.  By <br>\nkeeping encodings and assumptions about availability of glyphs out of the <br>\nIsabelle sources, they can be used with plain text tools as described <br>\nabove, because it is plain ASCII by default.</p>\n<p>The situation is different for front-ends based on Isabelle/Scala (such as <br>\nIsabelle/jEdit).  There is a default mapping between Isabelle symbols and <br>\nJVM-based unicode, which is used here as a poort-mans rendering engine for <br>\nmathematical symbols.  Thus \\&lt;forall&gt; vs. its corresponding unicode glyph <br>\nare treated interchangeably by the user interface.  This works well under <br>\nthe assumption that there is no conflict with independent unicodes in user <br>\nsources.</p>\n<p>Makarius</p>",
        "id": 294130359,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660842586
    },
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;<br>\nHi Alex, thanks very much for replying.</p>\n<blockquote>\n<p>The handling of symbols changed drastically from pg 3.7 to 4.</p>\n</blockquote>\n<p>Ah, that would explain it! :)</p>\n<blockquote>\n<p>Unfortunately, you have to do this for each symbol then... but it's better than nothing.</p>\n</blockquote>\n<p>Oh dear! Well, I've reverted to PG 3.7 for the time being, as that handled my unicode keyboard layout very satisfactorily. Perhaps the fault lies not with PG but with Isabelle, for requiring the forall symbol to be inputted as \\&lt;forall&gt; not as the unicode character ∀.</p>\n<p>Many thanks for your help with this!</p>\n<p>John</p>",
        "id": 294130400,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660842599
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nYou can certainly configure Isabelle to allow unicode as an<br>\nalternative input syntax. For example, you can define the following<br>\nnotation for the forall-quantifier, where \"∀\" is a genuine unicode<br>\nsymbol instead of the \"\\&lt;forall&gt;\" markup:</p>\n<p>notation (input) All (binder \"∀\" 10)</p>\n<p>Now the genuine unicode forall symbol works as expected on input:</p>\n<p>term \"∀x. P x\"</p>\n<p>I suppose you could create a theory file that defines similar unicode<br>\nnotation for all syntax defined in Isabelle/HOL. This might make a<br>\nnice addition to HOL/Library.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294130456,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660842605
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis is a bad idea.  From what has been explained before, the Isabelle <br>\ntreatment of symbols vs. unicode handling assumes that this is not done. <br>\nBig confusion is to be expected if this is violated.  (E.g. try to load <br>\nsuch a file with Isabelle/jEdit and then save it again.)</p>\n<p>See also <br>\n<a href=\"http://isabelle.in.tum.de/dist/Isabelle2011/doc/implementation.pdf\">http://isabelle.in.tum.de/dist/Isabelle2011/doc/implementation.pdf</a> section <br>\n\"1.2.1 Strings of Symbols\" for some explanations and specifications around <br>\nthis important Isabelle concept.</p>\n<p>Makarius</p>",
        "id": 294130497,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660842623
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis behaviour is according to the specification of Isabelle symbols.  It <br>\nhas been there for so many years that 5 new unicode encodings have been <br>\ninvented in the meantime.  I have also refined the whole concept of <br>\nsymbols and potential mappings wrt. external unicode recently for <br>\nIsabelle/Scala, with quite detailed specifications in the Isabelle/Isar <br>\nimplementation manual.</p>\n<p>You cannot expect that ancient Proof General 3.7.x fully complies with all <br>\nthat.  I don't know about the exact behaviour of Proof General 4.1 either, <br>\nwhich is still to be released.  (This also means you can contribute to its <br>\nissue tracker <a href=\"http://proofgeneral.inf.ed.ac.uk/trac/\">http://proofgeneral.inf.ed.ac.uk/trac/</a>.)</p>\n<p>Makarius</p>",
        "id": 294130519,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660842630
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nMakarius wrote:<br>\nAre you saying that the Unicode code points listed in <br>\n$ISABELLE_HOME/etc/symbols may not occur regularly in the sources? The <br>\nsection in the implementation manual does not make this clear... In fact <br>\nwhat I read there is that any UTF-8 sequence is legal. So then it should <br>\nnot be a problem to declare the ab</p>\n<p>Or is it an additional constraint imposed by the jEdit layer? PG 4 seems <br>\nto differentiate between the different classes of symbols...</p>\n<p>Alex</p>",
        "id": 294130538,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660842640
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nIn section 1.2.1 of the Implementation manual, it clearly states that<br>\nunicode codepoints like \"∀\" are treated distinctly from symbols like<br>\n\"\\&lt;forall&gt;\". ProofGeneral 4.0 and 4.1 apparently respect this<br>\ndistinction, while Isabelle/jEdit does not.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294130550,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660842644
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIsabelle symbols co-exist with arbitrary UTF-8 sequences.  The encoding <br>\nback and forth for \"poor-man's rendering\" in the front-end is a slightly <br>\ndifferent thing.  It is not injective, so overlap needs to be avoided.</p>\n<p>Also note that $ISABELLE_HOME/etc/symbols is just one default table. <br>\nUsers may have there own.</p>\n<p>When struggling with this unicode mess over the 1-2 years, I could not <br>\nimagine that anybody could actualy love unicode.  In the next round I will <br>\ntry harder produce explicit errors on bad sources.</p>\n<p>Makarius</p>",
        "id": 294130557,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660842647
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nMakarius wrote:</p>\n<blockquote>\n<p>Also note that $ISABELLE_HOME/etc/symbols is just one default table. <br>\nUsers may have there own.</p>\n<p>[...]<br>\nIn the next round I <br>\nwill try harder produce explicit errors on bad sources.</p>\n</blockquote>\n<p>Hmm... Does that mean that the property of being \"bad sources\" will be <br>\nconfiguration-dependent? That sounds very problematic for exchanging <br>\ntheories...</p>\n<p>Alex</p>",
        "id": 294130575,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660842654
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nYes it is, and the game is to minimize problems.</p>\n<p>Makarius</p>",
        "id": 294130586,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660842660
    }
]