[
    {
        "content": "<p>From: noam neer &lt;<a href=\"mailto:noamneer@gmail.com\">noamneer@gmail.com</a>&gt;<br>\nif \"P\" is a previously defined predicate and I want to prove it always<br>\nholds, it seems I can do it in two ways. the first uses the universal<br>\nquantifier as in<br>\n    lemma \"!x. P(x)\"<br>\n    ....<br>\nand the second uses schematic variables, as in<br>\n    lemma  \"P(x)\"<br>\n    ...<br>\nif I'm not mistaken each of these can be used to prove the other, so they<br>\nare logically equivalent. the only differences I could find were in the way<br>\nthe proved lemmas can be used in proofs, where usually the second<br>\nformulation is easier to use. my question is if this is indeed the case,<br>\nand if so why does Isabelle offer two different ways to say the same thing.<br>\ncomparing to the case of --&gt; and ==&gt;, the different arrows are also<br>\nlogically equivalent but they are intended for different situations, but I<br>\ncouldn't find such distinction in the universal case.</p>\n<p>thanx.</p>",
        "id": 294656511,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168245
    },
    {
        "content": "<p>From: David Cock &lt;<a href=\"mailto:david.cock@inf.ethz.ch\">david.cock@inf.ethz.ch</a>&gt;<br>\nNoam,<br>\n   You'll probably get answers from more knowledgable persons than I, <br>\nbut you've just discovered one of Isabelle's most fundamental quirks.  <br>\nAs theorems, you're right that they're (logically) equivalent, but they <br>\ndiffer if they appear as assumptions i.e.</p>\n<p>(!x. P x) =&gt; P y</p>\n<p>holds, but</p>\n<p>P ?x =&gt; P y</p>\n<p>does not (necessarily) hold. In the second case, you know that P holds <br>\nfor some (particular, unspecified) x, but you don't know whether that is <br>\nequal to y.</p>\n<p>David</p>",
        "id": 294656664,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168308
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;<br>\nDavid,</p>\n<p>Huh?</p>\n<p>schematic_lemma \"P ?x ==&gt; P y\"<br>\n  by assumption</p>\n<p>Cheers,</p>\n<p>Jasmin</p>",
        "id": 294656745,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168345
    },
    {
        "content": "<p>From: David Cock &lt;<a href=\"mailto:david.cock@inf.ethz.ch\">david.cock@inf.ethz.ch</a>&gt;<br>\nGrr, sorry, hit send without proofreading.  That second one should have <br>\nbeen</p>\n<p>P x =&gt; P y</p>\n<p>i.e. an <em>unbound</em>, not a schematic name.</p>\n<p>Noam: in your example, it's not clear whether you have an actual <br>\nschematic, or just an unbound (blue) variable.</p>\n<p>David</p>",
        "id": 294656767,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168352
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi,</p>\n<blockquote>\n<p>if \"P\" is a previously defined predicate and I want to prove it always<br>\nholds, it seems I can do it in two ways. the first uses the universal<br>\nquantifier as in<br>\n    lemma \"!x. P(x)\"<br>\n    ....<br>\nand the second uses schematic variables, as in<br>\n    lemma  \"P(x)\"<br>\n    ...<br>\nif I'm not mistaken each of these can be used to prove the other, so they<br>\nare logically equivalent. the only differences I could find were in the way<br>\nthe proved lemmas can be used in proofs, where usually the second<br>\nformulation is easier to use.</p>\n</blockquote>\n<p>first of all, your assessment is correct. Nitpicking: In the second<br>\nformulation, you use the free variable 'x', which – after proving the<br>\nlemma – gets generalized to a schematic variable. You can recognize<br>\nschematic variables by the prefixed question mark (e.g. '?x').</p>\n<blockquote>\n<p>and if so why does Isabelle offer two different ways to say the same thing.<br>\ncomparing to the case of --&gt; and ==&gt;, the different arrows are also<br>\nlogically equivalent but they are intended for different situations, but I<br>\ncouldn't find such distinction in the universal case.</p>\n</blockquote>\n<p>I don't have an insight into the early history of Isabelle. I have the<br>\nunderstanding that the notion of schematic has been there for a long<br>\ntime. The only explanation I can offer is that schematic variables can<br>\nbe easily instantiated. For example, if you have the theorem 'P ?x', you<br>\ncan substitute '?x' by something arbitrary, without having to know about<br>\nthe universal quantifier. In the explicitly-quantified case (be it HOL<br>\nquantification or Pure quantification), the 'x' would be a bound<br>\nvariable and you would need to know more. Essentially, schematic<br>\nvariables allow for easy <em>outermost</em> quantification.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294656804,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168362
    },
    {
        "content": "<p>From: David Cock &lt;<a href=\"mailto:david.cock@inf.ethz.ch\">david.cock@inf.ethz.ch</a>&gt;<br>\nLet's try that again.</p>\n<p>If you prove:</p>\n<p>lemma \"P x\"<br>\n     by(whatever)</p>\n<p>then (assuming x was completely unbound at that point), you've obviously <br>\ndone something at least as hard as proving</p>\n<p>lemma \"!x. P x\"</p>\n<p>i.e. proving something about a concrete x, without assuming anything in <br>\nparticular about it, and thus your proof could in principle be reapplied <br>\nto any other concrete value.  Isabelle \"knows\" this, and thus <br>\ntransparently lifts your result to the schematic lemma \"P ?x\", ie. a <br>\nlemma with a named hole where x should be.  That hole can be filled with <br>\nwhatever you like, and so, as Jasmin pointed out, you've effectively got <br>\na universally quantified result.</p>\n<p>Schematics in the conclusion (e.g. in a subgoal) can work differently.  <br>\nIf at some point you end up with a subgoal of the form \"P ?x\", you can <br>\nprove it by substituting a <em>particular</em> x that satisfies (P x). For <br>\nexample, you can prove \"?x = (0::nat)\" with \"by(refl)\" (i.e. <br>\nsubstituting 0), but that proof obviously <em>doesn't</em> generalise to all <br>\npossible substitutions.</p>\n<p>In summary, propositions with schematics are a <em>bit</em> like universally <br>\nquantified formulae, but not quite.  The semantics get more complicated <br>\nwhen a given schematic appears multiple times e.g. in assumption and <br>\nconclusions.  In that case, by instantiating a schematic, you're making <br>\na (potentially unsafe) <em>choice</em> in your proof - you may end up in an <br>\nunprovable state, even for a true theorem.</p>\n<p>Larry could presumably shine more light on the design decisions here, <br>\nbut schematics are (as far as I understand) a more fundamental part of <br>\nthe term rewriting system, with something more of an \"operational\" <br>\nsemantics i.e. it does what it does, while \"!\" is the quantifier of <br>\nPure, with a specific logical interpretation.</p>\n<p>Dave</p>",
        "id": 294656814,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168369
    },
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\nDear Users,</p>\n<p>Let's try that again.</p>",
        "id": 294656831,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168382
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nOn 04.10.2015 20:02, David Cock wrote:</p>\n<blockquote>\n<p>Noam,<br>\n  You'll probably get answers from more knowledgable persons than I, but<br>\nyou've just discovered one of Isabelle's most fundamental quirks.  As<br>\ntheorems, you're right that they're (logically) equivalent, but they<br>\ndiffer if they appear as assumptions i.e.</p>\n</blockquote>\n<p>Schematic variables are equivalent to outermost universal quantifiers.</p>\n<blockquote>\n<p>(!x. P x) =&gt; P y</p>\n</blockquote>\n<blockquote>\n<p>holds, but</p>\n<p>P ?x =&gt; P y</p>\n</blockquote>\n<p>That is, the theorem \"P ?x ==&gt; P y\" is equivalent to the theorem \"!!x. P<br>\nx ==&gt; P y\" which is equivalent (in HOL) to \"(?x. P x) ==&gt; P y\".</p>\n<p>-- Lars</p>",
        "id": 294656856,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168395
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nIndeed, Isabelle normalizes all rules by (a) moving universal<br>\nquantifiers as far outside as possible and (b) replacing outermost<br>\nuniversal quantifiers by schematic variables. This canonical format (I<br>\nbelieve it is called Hereditarily Harrop Formula in the sources) allows<br>\na consistent handling of such formulas in the implementation.</p>",
        "id": 294656863,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168401
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nSchematic variables allow you to delay your choice of instantiation.<br>\nMoreover, they can be used to synthesize terms, which is regularly used<br>\nin program verification, e.g. to compute the weakest precondition of a<br>\nHoare triple.</p>",
        "id": 294656913,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168407
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nSchematic variables have been part of Isabelle from the very beginning. The idea has always been that it should be possible to prove something by transitivity, without first knowing what the intermediate term would be. From a strictly logical point of view, schematic variables are simply variables (necessarily free variables, as there is no way of binding them).</p>\n<p>Larry Paulson</p>",
        "id": 294656964,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168437
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThe nice thing is that what appears to be different behaviours is different aspects of one single operation, namely higher-order Horn clause resolution. Some historical details are available in my 1989 paper The Foundation of a Generic Theorem Prover</p>\n<p><a href=\"http://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-130.pdf\">http://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-130.pdf</a></p>\n<p>See section 4.</p>\n<p>Larry Paulson</p>",
        "id": 294656980,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168444
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThe answer to this question is simple: induction rules are formulated in this way in Isabelle because Martin-Löf used the same approach in his constructive type theory. He arrived at this formulation by following the idea of natural deduction consistently. In natural deduction, every inference rule introduces or eliminates a distinguished symbol, and Martin-Löf recognised that in the case of induction rules, the symbol being eliminated was the premise “n is a natural number”. He used a similar approach with the elimination rules for finite sums and products, generalised sums, etc.</p>\n<p>One does not have to be a constructivist to to recognise that his was the right approach, and that attaching a universal quantifier to the conclusion is superfluous.</p>\n<p>Larry Paulson</p>",
        "id": 294656994,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168450
    },
    {
        "content": "<p>From: David Cock &lt;<a href=\"mailto:david.cock@inf.ethz.ch\">david.cock@inf.ethz.ch</a>&gt;<br>\nThanks for that, interesting.</p>\n<p>David</p>",
        "id": 294657052,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168468
    }
]