[
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nThis would definitely be useful! +1 - chris</p>",
        "id": 294671274,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173463
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;<br>\nA student came to me and asked for a 6-week internship project (starting in August). Perhaps this could be something suitable for him? (But if anybody else wants to implement this, go ahead and don't wait for us.)</p>\n<p>Jasmin</p>",
        "id": 294671303,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173469
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear all,</p>\n<p>I have written several Isar-style proofs of lemmas each of which is quite long (&gt;1000 <br>\nlines). As the proofs have evolved over time, I am not sure any more that I use every <br>\nintermediate result to prove the result. Is there any convenient way to find out whether <br>\nthere are some unused intermediate steps?</p>\n<p>I tried to use unused_thms before the final qed, but this gives me only top-level <br>\ntheorems, not intermediate (named) facts stated with \"have\". I could imagine a diagnostic <br>\ncommand that one issues before the qed and it lists all the unused intermediate facts <br>\nsince the last \"next\" or \"proof\" command on the same level. If this is not available, <br>\ncould this be implemented and how hard would it be? Would anyone else find such a <br>\nfunctionality useful?</p>\n<p>Cheers,<br>\nAndreas</p>",
        "id": 294673275,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174052
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn 29/04/2016 10:39, Andreas Lochbihler wrote:</p>\n<blockquote>\n<p>Dear all,</p>\n<p>I have written several Isar-style proofs of lemmas each of which is quite long<br>\n(&gt;1000 lines). As the proofs have evolved over time, I am not sure any more that<br>\nI use every intermediate result to prove the result. Is there any convenient way<br>\nto find out whether there are some unused intermediate steps?</p>\n<p>I tried to use unused_thms before the final qed, but this gives me only<br>\ntop-level theorems, not intermediate (named) facts stated with \"have\". I could<br>\nimagine a diagnostic command that one issues before the qed and it lists all the<br>\nunused intermediate facts since the last \"next\" or \"proof\" command on the same<br>\nlevel. If this is not available, could this be implemented and how hard would it<br>\nbe? Would anyone else find such a functionality useful?</p>\n</blockquote>\n<p>I would. Especially if it is integrated with the interface and marks such unused <br>\nlocal facts (on demand).</p>\n<p>Tobias</p>\n<blockquote>\n<p>Cheers,<br>\nAndreas</p>\n<p><a href=\"/user_uploads/14278/baWGx8TC0G6dcPYJKv426Acp/smime.p7s\">smime.p7s</a></p>\n</blockquote>",
        "id": 294673295,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174058
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nAbsolutely.</p>",
        "id": 294673308,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174064
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\n+1!</p>\n<p>Gerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294673319,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174070
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 3 May 2016, Thomas Sewell wrote:</p>\n<blockquote>\n<p>Well, they could be optionally given dummy names. That would break the <br>\nusual rule that names in the PThms (other than Pure.blah) look up facts, <br>\nbut would allow you to check whether they were really used.</p>\n</blockquote>\n<p>The names in PThm nodes are not even right for global facts. It is an old <br>\nconfusion that is still there until today.</p>\n<blockquote>\n<p>The other option would be to check whether they were syntactically used, <br>\nof course.</p>\n</blockquote>\n<p>That is the dual approach to inspecting the internal inferences: looking <br>\nat the source with its PIDE markup. Recently I have already added some <br>\nrendering for the use of formal entities, visually connecting definitions <br>\nand references of items. This includes facts, but there are more ways to <br>\nrefer to facts than for most other items:</p>\n<p>(1) via literal fact references (backquotes or cartouche notation)</p>\n<p>(2) via declarations that put them into the context for tools to pick<br>\n     them up later, e.g. the \"simp\" attribute and \"simp\" proof method</p>\n<p>(1) might soon be included in the PIDE markup model: it is syntactically <br>\nrelatively clear. (2) is more difficult, because the absence or presence <br>\nof a \"simp del\" declaration can affect the proof. It might be better just <br>\nto test-run the proof document, and see if it still works with or without <br>\ncertain elements.</p>\n<p>Makarius</p>",
        "id": 294673338,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174082
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Jasmin,</p>\n<p>That's a good idea. I don't know whether the current implementation of reasoning actually <br>\nsupports such a command. Makarius might know better. But if it does, I guess that this <br>\ncould be a reasonably-sized project for a student.</p>\n<p>Andreas</p>",
        "id": 294674020,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174303
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;<br>\nHi Andreas,</p>\n<blockquote>\n<p>That's a good idea. I don't know whether the current implementation of reasoning actually supports such a command. Makarius might know better. But if it does, I guess that this could be a reasonably-sized project for a student.</p>\n</blockquote>\n<p>For Sledgehammer (esp. MaSh), we had to do some fishing around in the local context to retrieve facts in Isar proofs. I am under the impression that all the information we would need is stored in some form.</p>\n<p>Jasmin</p>",
        "id": 294674215,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174370
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI think the main challenge are such questions about internal naming of <br>\nderivations (the infamous PThm nodes). I've never fully understood the <br>\nscheme introduced by Larry Paulson and reformed by Stefan Berghofer, more <br>\nthan 15 years ago. Nonetheless, I've tinkered with it out of necessity, to <br>\nmake parallel proof checking work.</p>\n<p>It is definitely worth revisiting all that, and unifying it with the <br>\ntreatment in Sledgehammer.</p>\n<p>Afterwards, a student project to wrap it up as PIDE print function etc. <br>\nwould be rather trivial. Still worth to learn how that works, but from 6 <br>\nweeks only 1 is probably required.</p>\n<p>Makarius</p>",
        "id": 294674435,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174437
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:thomas.sewell@nicta.com.au\">thomas.sewell@nicta.com.au</a>&gt;<br>\nI had a brief look at this a while ago. My understanding is that a<br>\n(small) change might be needed.</p>\n<p>OK, so, PThms track the derivation steps of thms. There are special<br>\nnodes which mark where thms (and their derivations) are named. This is<br>\ncalled through Thm.name_derivation, and via Global_Theory.name_thm.</p>\n<p>Point is, globally-anonymous facts, such as steps in proofs, don't have<br>\nnamed derivations (currently). So proof term summaries will see them as<br>\njust part of the proof of the facts they result in.</p>\n<p>Well, they could be optionally given dummy names. That would break the<br>\nusual rule that names in the PThms (other than Pure.blah) look up facts,<br>\nbut would allow you to check whether they were really used.</p>\n<p>The other option would be to check whether they were syntactically used,<br>\nof course.</p>\n<p>Cheers,<br>\n     Thomas.</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294674797,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174573
    }
]