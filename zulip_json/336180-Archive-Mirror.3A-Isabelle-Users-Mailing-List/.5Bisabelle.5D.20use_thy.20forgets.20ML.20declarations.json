[
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nI can't make sense of this.  What is a formal theory context?  I would <br>\nunderstand that to mean a theory as I've always understood it - but that <br>\nis defined in ML code.</p>\n<p>Just by way of example - the developments found in the ML file <br>\nsrc/Pure/theory.ML - what is the formal theory context which that <br>\nhappened in?</p>\n<p>In relation to your answers to my other questions: are you seriously <br>\ntelling me that one can't effectively use Isabelle except by using the <br>\njedit thing?  May I be so bold as to ask if there is any good reason for <br>\nthis?</p>\n<p>Jeremy</p>",
        "id": 294739345,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190942
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear Jeremy,</p>\n<blockquote>\n<p>I can't make sense of this.  What is a formal theory context?  I would<br>\nunderstand that to mean a theory as I've always understood it - but that<br>\nis defined in ML code.</p>\n<p>Just by way of example - the developments found in the ML file<br>\nsrc/Pure/theory.ML - what is the formal theory context which that<br>\nhappened in?</p>\n</blockquote>\n<p>let me try to untangle this a bit.</p>\n<p>It is very important to distinguish between the bootstrapping of the<br>\nsystem (a bit oversimplified: \"everything in src/Pure\") from the general<br>\nuser-space operation of the system (a bit oversimplified: \"everything<br>\nthat happens in a .thy file\").</p>\n<p>As a user of the system, it is generally not very relevant how ML files<br>\nare handled in \"src/Pure\".</p>\n<p>After bootstrapping has happened, you have the full flexibility of<br>\nIsabelle/ML, including antiquotations, available by embedding or<br>\nreferencing ML code from a theory file. This is precisely what is meant<br>\nby \"formal theory context\".</p>\n<p>In a more low-level environment this can be done by using the \"use_thy\"<br>\nfunction to load a theory file. ML code that is embedded there can use<br>\nantiquotations. Here's an example:</p>\n<p>$ ./bin/isabelle console -l Pure -i HOL<br>\nPoly/ML&gt; use_thy \"Main\";</p>\n<blockquote>\n<p>In relation to your answers to my other questions: are you seriously<br>\ntelling me that one can't effectively use Isabelle except by using the<br>\njedit thing?  May I be so bold as to ask if there is any good reason for<br>\nthis?</p>\n</blockquote>\n<p>There are other ways to interact with Isabelle too (e.g.<br>\nIsabelle/VSCode), or by writing Scala code that sets up a prover in just<br>\nthe right way. But I'd argue for 95% of users Isabelle/jEdit is indeed<br>\nthe vastly more convenient environment.</p>\n<p>If I remember the history correctly, many of the \"old-style\"<br>\ninteractions with Isabelle had to be abolished because of performance<br>\nreasons; i.e. to allow full exploitation of multi-core machines.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294739404,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190961
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nOn 08/15/2018 12:56 AM, Lars Hupel wrote:</p>\n<blockquote>\n<p>$ ./bin/isabelle console -l Pure -i HOL<br>\nPoly/ML&gt; use_thy \"Main\";</p>\n<p>Hi Lars,</p>\n</blockquote>\n<p>Thanks - but doing this doesn't remember the declarations in the theory <br>\nfile, or in ML files loaded by ML_file within the theory file.</p>\n<blockquote>\n<p>If I remember the history correctly, many of the \"old-style\"<br>\ninteractions with Isabelle had to be abolished because of performance<br>\nreasons; i.e. to allow full exploitation of multi-core machines.</p>\n</blockquote>\n<p>Well I've used HOL4 and Coq a lot recently (as well as Isabelle2005 for <br>\nmany years), performance never seemed to be a problem.  Whereas the <br>\nsluggishness of Isabelle 2018 is quite noticeable on the same machines <br>\n(console isn't too bad, but jedit is much worse, which is one of the <br>\nreasons I would much rather not have to use it)</p>\n<p>Maybe the complexity of Isabelle is the reason for performance problems, <br>\nnot the solution to them.</p>\n<p>Cheers</p>\n<p>Jeremy</p>",
        "id": 294739473,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190977
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 14/08/18 16:41, Jeremy Dawson wrote:</p>\n<blockquote>\n<p>Just by way of example - the developments found in the ML file<br>\nsrc/Pure/theory.ML - what is the formal theory context which that<br>\nhappened in?</p>\n</blockquote>\n<p>There are two different cases:</p>\n<p>(1) physical bootstrap from raw Poly/ML: the theory context is the<br>\nemerging Pure.thy context under construction, which will be eventually<br>\nfinished in the \"Pure.thy\" file.</p>\n<p>(2) virtual boostrap in the Prover IDE (e.g. Isabelle/jEdit when<br>\nopening src/Pure/ROOT.ML): the theory context starts with<br>\nML_Bootstrap.thy from which a copy of Pure.thy is constructed in the<br>\nvirtual environment.</p>\n<p>At the bottom of this are some interesting implementation techniques,<br>\nsuch as the Thread_Data module:</p>\n<p><a href=\"http://isabelle.in.tum.de/repos/isabelle/file/Isabelle2018-RC4/src/Pure/Concurrent/thread_data.ML\">http://isabelle.in.tum.de/repos/isabelle/file/Isabelle2018-RC4/src/Pure/Concurrent/thread_data.ML</a><br>\n<a href=\"http://isabelle.in.tum.de/repos/isabelle/file/Isabelle2018-RC4/src/Pure/Concurrent/thread_data_virtual.ML\">http://isabelle.in.tum.de/repos/isabelle/file/Isabelle2018-RC4/src/Pure/Concurrent/thread_data_virtual.ML</a></p>\n<p>Apart from that, the main user-relevant point is this: after opening<br>\nsrc/Pure/ROOT.ML in the Prover IDE, the Pure bootstrap sources become<br>\n\"alive\", e.g. with inferred types, indentifier scopes, hyperlinks etc.<br>\nThis is very important to understand them, and to build tools on top, or<br>\nto develop the system itself.</p>\n<blockquote>\n<p>In relation to your answers to my other questions: are you seriously<br>\ntelling me that one can't effectively use Isabelle except by using the<br>\njedit thing?  May I be so bold as to ask if there is any good reason for<br>\nthis?</p>\n</blockquote>\n<p>Mainly for performance reasons of <em>using</em> the system: without such a<br>\nhigh-end IDE Isabelle applications would not be where they are today.<br>\nInvesting a little hardware is very cheap: 16 GB memory cost mere<br>\n100-200 EUR.</p>\n<p>In that respect Isabelle is very old-fashioned: it turns commodity<br>\nhardware resources into performance for applications. This rules out<br>\nvery small devices, but we did that already in 1998, when the minimal<br>\nmemory requirements were 32-64 MB, IIRC.</p>\n<p>Makarius</p>",
        "id": 294739498,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190986
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nWe just moved on, as we did many times in the history of Isabelle<br>\nfront-ends. There was also nobody to step in and maintain obsolete user<br>\ninterfaces.</p>\n<p>In long-term Isabelle development we have always dismantled old things<br>\nto make room for new things. This is why the system is still relatively<br>\nyoung and fresh after 32 years.</p>\n<p>Makarius</p>",
        "id": 294739510,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190992
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe complexity of Isabelle and the complexity of Isabelle applications<br>\nare co-evolutionary: because applications become more and more advanced<br>\nand ambitious, the system needs to catch up. What you see in 2018 is the<br>\nresult of successful advances in the past, leading to the full glory of<br>\ne.g. AFP applications today.</p>\n<p>If you don't like this, you are free to ignore Isabelle and should use<br>\nHOL4 or Coq. I mean this seriously: we have different systems for<br>\ndifferent attitudes.</p>\n<p>Makarius</p>",
        "id": 294739523,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190998
    },
    {
        "content": "<p>From: José Manuel Rodriguez Caballero &lt;<a href=\"mailto:josephcmac@gmail.com\">josephcmac@gmail.com</a>&gt;<br>\nI hope that in the future evolution of Isabelle, some mutation will allows<br>\nher to do homotopy type theory. Indeed, this is the more elegant<br>\nformulation of algebraic topology ever (real numbers are not required !).<br>\nIt would be nice to combine it with isar. I think that this reference will<br>\nbe useful for this purpose: <a href=\"https://github.com/jaycech3n/HoTT\">https://github.com/jaycech3n/HoTT</a></p>\n<p>For students which want to know about homotopy type theory, here is an<br>\nintroductory course:<br>\n<a href=\"https://www.youtube.com/watch?v=ISq1xi-mGk8&amp;list=PLo61mJSqK5cXHsnYUAXNea31BCj1u-zln\">https://www.youtube.com/watch?v=ISq1xi-mGk8&amp;list=PLo61mJSqK5cXHsnYUAXNea31BCj1u-zln</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"ISq1xi-mGk8\" href=\"https://www.youtube.com/watch?v=ISq1xi-mGk8&amp;list=PLo61mJSqK5cXHsnYUAXNea31BCj1u-zln\"><img src=\"https://uploads.zulipusercontent.net/234eef59e23f88b5a1dbe6c32b78b70a430e46f5/68747470733a2f2f692e7974696d672e636f6d2f76692f4953713178692d6d476b382f64656661756c742e6a7067\"></a></div><p>More advanced staff here: <a href=\"https://www.math.ias.edu/vladimir/Lectures\">https://www.math.ias.edu/vladimir/Lectures</a></p>\n<p>Jose M.</p>",
        "id": 294739582,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661191023
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nHi</p>\n<p>I find using isabelle console, when I use a theory file, using use_thy, <br>\nseemingly successfully, that declarations in chunks of ML in the theory <br>\nfile, (in ML{* ... *}) seem to be forgotten.</p>\n<p>How do I get access to stuff that was defined in ML in the theory file?</p>\n<p>thanks</p>\n<p>Jeremy</p>",
        "id": 294742548,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661192158
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nBy importing the theories with the ML/ML_file uses.</p>\n<p>Recall that all Isabelle/ML developments happens inside a formal theory<br>\ncontext, with editor support in the Prover IDE (Isabelle/jEdit).</p>\n<p>The raw Poly/ML toplevel is merely the system bootstrap environment.<br>\nCompared to a Linux system it would the the Grub prompt of the BIOS, not<br>\nthe OS shell.</p>\n<p>Makarius</p>",
        "id": 294742762,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661192231
    }
]