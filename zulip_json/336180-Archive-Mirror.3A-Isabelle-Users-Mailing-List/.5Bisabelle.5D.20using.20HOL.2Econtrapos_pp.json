[
    {
        "content": "<p>From: Gergely Buday &lt;<a href=\"mailto:gbuday@gmail.com\">gbuday@gmail.com</a>&gt;<br>\nHi,</p>\n<p>lemma \"A ⟹ B\"<br>\nproof (erule_tac Q=\"A\" in HOL.contrapos_pp)</p>\n<p>ends up in</p>\n<p>goal (1 subgoal):</p>\n<ol>\n<li>¬ B ⟹ ¬ A</li>\n</ol>\n<p>as expected, a standard proof method.</p>\n<p>However, on</p>\n<p>lemma \"(⋀ thesis. (⋀ n. Q n ⟹ thesis) ⟹ thesis) ⟹ (∃ n. Q n)\"<br>\nproof (erule_tac Q=\"(⋀ thesis. (⋀ n. Q n ⟹ thesis) ⟹ thesis)\" in<br>\nHOL.contrapos_pp)</p>\n<p>the system complains that</p>\n<p>Type unification failed: Clash of types \"prop\" and \"bool\"</p>\n<p>Failed to meet type constraint:</p>\n<p>Term:  ⋀thesis. (⋀n. Q n ⟹ thesis) ⟹ thesis :: prop<br>\nType:  bool</p>\n<p><a href=\"http://stackoverflow.com/questions/29032644/proving-a-simple-arithmetic-statement-with-rewriting-in-isabelle\">http://stackoverflow.com/questions/29032644/proving-a-simple-arithmetic-statement-with-rewriting-in-isabelle</a></p>\n<p>gives some clue and refers to section 2.2 of the Isabelle/Isar<br>\nreference manual but it is not clear how could I use contrapos_pp on a<br>\ncomplex premise.</p>\n<p>What should I do here?</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294648150,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164978
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nSimply, it can’t be done, as contrapos_pp is for booleans only. No such principle exists at the meta-level, which is intuitionistic.</p>\n<p>Larry</p>",
        "id": 294648174,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164990
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nLarry is right that Pure does not support classical non-sense. The premise <br>\nabove can be compacted, though, to fit into HOL, e.g. like this:</p>\n<p>lemma \"(⋀thesis. (⋀n. Q n ⟹ thesis) ⟹ thesis) ⟹ (∃n. Q n)\"<br>\n   apply atomize<br>\n   apply (erule contrapos_pp)<br>\n   oops</p>\n<p>There is not much point to do this.  Here is a Pure proof of the <br>\nsame statement:</p>\n<p>lemma<br>\n   assumes r: \"⋀thesis. (⋀n. Q n ⟹ thesis) ⟹ thesis\"<br>\n   shows \"∃n. Q n\"<br>\nproof (rule r)<br>\n   fix n<br>\n   assume \"Q n\"<br>\n   then show ?thesis ..<br>\nqed</p>\n<p>Here is the same proof with less Isar text:</p>\n<p>lemma<br>\n   assumes r: \"⋀thesis. (⋀n. Q n ⟹ thesis) ⟹ thesis\"<br>\n   shows \"∃n. Q n\"<br>\n   by (rule r) (rule exI)</p>\n<p>Makarius</p>",
        "id": 294648185,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164997
    }
]