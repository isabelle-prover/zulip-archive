[
    {
        "content": "<p>From: Buday Gergely &lt;<a href=\"mailto:gbuday@karolyrobert.hu\">gbuday@karolyrobert.hu</a>&gt;<br>\nHi,</p>\n<p>is there any difference using</p>\n<p>show \"lemma\" using fact1 and fact 2 by simp</p>\n<p>and</p>\n<p>show \"lemma\" by (simp add: fact1 fact2)</p>\n<p>?</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294669298,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172904
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nIn many cases, these forms are equivalent, but there are subtle differences.</p>\n<blockquote>\n<p>show \"lemma\" using fact1 and fact 2 by simp</p>\n</blockquote>\n<p>\"using\" adds facts locally. Some methods treat local facts specially,<br>\nothers don't. \"simp\" just inserts them as premises to the goal:</p>\n<p>P_fact1 ==&gt; P_fact2 ==&gt; lemma</p>\n<p>Because of the way polymorphism works in Isabelle/Pure, this means the<br>\nfacts you specified can only be used monomorphically. Also, because the<br>\nsimplifier simplifies premises, your facts are subject to simplification<br>\nthemselves.</p>\n<blockquote>\n<p>show \"lemma\" by (simp add: fact1 fact2)</p>\n</blockquote>\n<p>This adds facts to the simpset. That means the simplifier may rewrite<br>\noccurrences of the left-hand sides of your facts in your lemma.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294669341,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172917
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nThere are also more subtle differences. AFAIK, if your fact is<br>\npolymorphic and you add it with \"using\", it is only applied for one<br>\ntype. If you add it with \"simp add\" it can be applied with different<br>\ntypes.</p>\n<p>In general I prefer \"simp add\", as this feels more deterministic. </p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294669367,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172923
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>there is a small difference. I mainly stumble upon it if my lemmas are<br>\nnot in simp normal form [1].</p>\n<p>For example, let's say we have proven sorry1.</p>\n<p>lemma sorry1: fixes P::\"'a × 'a ⇒ bool\" shows \"(x1, x2) = X ⟹ P (x1,<br>\nx2) ∧ Y ⟶ Z\"<br>\n  sorry</p>\n<p>If you apply simp to sorry1, you will see that the simplifier will<br>\nrewrite \"P (x1, x2)\" to \"P X\". Hence, my lemma statement is not very<br>\ngood.</p>\n<p>Let's look at the difference.</p>\n<p>lemma fixes P::\"'a × 'a ⇒ bool\" shows \"P X ∧ Y ⟹ Z\"<br>\n  using sorry1[of _ _ X P Y Z] apply simp<br>\n  oops</p>\n<p>Here, in the above using-statement, you are throwing sorry1 into the<br>\nproof state and then invoke the simplifier. The simplifier will first<br>\nsimplify sorry1 and then realize that it can apply it to your goal.</p>\n<p>Second version:</p>\n<p>lemma fixes P::\"'a × 'a ⇒ bool\" shows \"P X ∧ Y ⟹ Z\"<br>\n  apply(simp add: sorry1[of _ _ X P Y Z]) (<em>fails</em>)<br>\n  oops</p>\n<p>Here, the simplifier fails to rewrite anything because it uses sorry1<br>\ndirectly as simp rule and does not try to simplify it first.</p>\n<p>My personal practical conclusion: There is a technical difference, if<br>\nyou ever encounter the difference, the main problem is that your facts<br>\nare not stated in a way the simplifier likes.</p>\n<p>Best,<br>\n  Cornelius</p>\n<p>[1] <a href=\"http://proofcraft.org/blog/isabelle-style-part2.html\">http://proofcraft.org/blog/isabelle-style-part2.html</a></p>\n<p>2016-03-10 9:45 GMT+01:00 Buday Gergely &lt;<a href=\"mailto:gbuday@karolyrobert.hu\">gbuday@karolyrobert.hu</a>&gt;:</p>",
        "id": 294669398,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172933
    }
]