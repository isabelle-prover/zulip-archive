[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear list,</p>\n<p>it appears that 'value' sometimes performs a (silent) fallback on other<br>\nevaluators if something goes wrong. I don't understand the precise<br>\nmechanics there, but one particular annoying instance is that when no<br>\ncode equations exist for some constant, 'value (code)' will leave it<br>\nunevaluated, whereas the corresponding ML code</p>\n<p>ML‹Code_Evaluation.dynamic_conv @{context} @{cterm foo}›</p>\n<p>will print an error message</p>\n<p>No code equations for foo</p>\n<p>It took me a while of debugging to figure out why 'value' didn't<br>\nevaluate my term fully.</p>\n<p>What's the reasoning behind this?</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294646120,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164150
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Lars,</p>\n<p>value without options tries different evaluation mechanisms (code and nbe IIRC), and nbe <br>\ncan handle constants without code equations - it just leaves them uninterpreted. <br>\nTherefore, no error message occurs. If you just want to use the code generator for <br>\nevaluation, you explicitly have to say so:</p>\n<p>value [code] \"expression\"</p>\n<p>Then, you also get the expected error message if code equations are missing. Similarly, <br>\n[nbe] lets you choose nbe as evaluation strategy.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294646153,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164162
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>value [code] \"expression\"</p>\n</blockquote>\n<p>Thanks, that was the missing bit: I was using wrong syntax! I thought<br>\nthat 'value (code)' was the way to select the evaluation strategy, but<br>\nin fact, I can write anything there ... 'value (foobar)' gets happily<br>\naccepted :-)</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294646164,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164169
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nWhy did I also use value(code) all the time? Was this in some release candidate?</p>\n<p>find ./ -name '*.thy' | xargs grep 'value(code)' | wc -l<br>\n25</p>\n<p>This explains a lot! Thanks!</p>\n<p>Cornelius</p>",
        "id": 294646235,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164199
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nI might have told you ;-)</p>",
        "id": 294646295,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164205
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nTo make it clear: ( ) denotes a print mode:</p>\n<p>value [nbe] (iff) \"(P::bool) ⟷ Q\"<br>\nvalue [nbe] (\"iff, xsymbols\") \"(P::bool) ⟷ Q\"<br>\nvalue [nbe] \"(P::bool) ⟷ Q\"<br>\n<a href=\"/user_uploads/14278/Qu3tLg7J1OJx7nL0iUPu4a3A/signature.asc\">signature.asc</a></p>",
        "id": 294646582,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164335
    }
]