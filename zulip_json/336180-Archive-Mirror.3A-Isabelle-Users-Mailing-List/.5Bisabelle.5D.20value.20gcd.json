[
    {
        "content": "<p>From: Walther Neuper &lt;<a href=\"mailto:wneuper@ist.tugraz.at\">wneuper@ist.tugraz.at</a>&gt;<br>\nGiven ...</p>\n<p>theory Demo imports Main<br>\n   begin<br>\n     function gcd :: \"int =&gt; int =&gt; int\"<br>\n       where \"gcd m n = (if n = 0 then m else gcd n (m mod n))\"<br>\n     by auto<br>\n     value \"5 mod 3::int\"<br>\n       --{<em>evaluates to \"2\" :: \"int\"</em>}<br>\n     value \"gcd 123456 7890::int\"<br>\n       --{<em>evaluates to \"Demo.gcd 123456 7890\" :: \"int\"</em>}<br>\n   end</p>\n<p>... why does \"gcd\" not evaluate, although \"mod\" evaluates?</p>\n<p>Walther</p>\n<p>PS: And how find an answer to such a question myself?</p>",
        "id": 294654086,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167297
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Walther,</p>\n<p>You have not yet proven that your function definition terminates. Therefore, the defining <br>\nequation (gcd.psimps) still carries the precondition that the function terminates. The <br>\ncode generator cannot handle such preconditions, so these psimps equations are not <br>\nregistered as code equations. Once you have proved termination, the function package <br>\nderives the unconditional equations gcd.simps from the conditional ones and registers them <br>\nwith the code generator. Everything should work fine then.</p>\n<p>You can find out what is happening by inspecting the code equations for gcd with the command</p>\n<p>code_thms gcd</p>\n<p>You will see that there are not equations registered.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294654115,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167309
    }
]