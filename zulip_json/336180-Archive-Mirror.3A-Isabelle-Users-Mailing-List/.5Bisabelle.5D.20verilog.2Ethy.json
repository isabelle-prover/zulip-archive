[
    {
        "content": "<p>From: Konrad Slind &lt;<a href=\"mailto:konrad.slind@gmail.com\">konrad.slind@gmail.com</a>&gt;<br>\nAs I recall, Daryl constructed an enormous HOL datatype capturing<br>\npart of the grammar of Verilog. It got collected into a regression suite<br>\nby John Harrison when he was building his datatype package. Presumably,<br>\nthat regression suite was later used to test Isabelle's datatype package.</p>\n<p>Konrad.</p>",
        "id": 294165365,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660854549
    },
    {
        "content": "<p>From: li yongjian &lt;<a href=\"mailto:lyj238@gmail.com\">lyj238@gmail.com</a>&gt;<br>\nIn ~/src/HOL/Datatype_Benchmark, there is a verilog.thy.<br>\nWho write it?<br>\nIs there any parser which transforms verilog code to such a datatype?</p>",
        "id": 294166042,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660854744
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 3 Jul 2012, li yongjian wrote:</p>\n<blockquote>\n<p>In ~/src/HOL/Datatype_Benchmark, there is a verilog.thy.<br>\nWho write it?</p>\n</blockquote>\n<p>The source file mentions \"Daryl\", which probably means Daryl Stewart, and <br>\npoints back to some Verilog/HOL project at Cambridge in the mid 1990-ies. <br>\nThese files have been converted to Isabelle/HOL from HOL files by Konrad <br>\nSlind and/or John Harrison from many years ago.</p>\n<blockquote>\n<p>Is there any parser which transforms verilog code to such a datatype?</p>\n</blockquote>\n<p>You can try yourself to google for Verilog parsers, and then make a little <br>\nconverter into Isabelle/ML term structure, for example.</p>\n<p>The datatype benchmark above is really just a benchmark.  These Verilog <br>\ndatatype definitions are far too concrete and redundant to be of any use <br>\nin Isabelle/HOL.  Every function you define over it and every induction <br>\nproof you do would have to mention these all these constructors and <br>\narguments.</p>\n<p>A more realistic formalization would somehow group and nest language <br>\nelements, to avoid excessive breadth of the type definition.</p>\n<p>Makarius</p>",
        "id": 294219588,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896732
    }
]