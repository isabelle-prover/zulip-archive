[
    {
        "content": "<p>From: M A &lt;<a href=\"mailto:tesleft@hotmail.com\">tesleft@hotmail.com</a>&gt;<br>\nHi </p>\n<p><a href=\"http://fa.isabelle.narkive.com/LVdvCYnK/isabelle-stuck-on-proof\">http://fa.isabelle.narkive.com/LVdvCYnK/isabelle-stuck-on-proof</a></p>\n<p>above link mention in proof general, the \"Isabelle/Show me .../Facts\" menu</p>\n<p>I can not find in plugin or other menu, where can show facts</p>\n<p>show \"list.inject\" this command can not show facts content.</p>\n<p>lemma \"P ∧ Q ==&gt; P\"<br>\nsledgehammer learn_isar<br>\nsledgehammer [prover = e, fact_filter = mesh, verbose] </p>\n<p>\"mesh\": Including 1000 relevant facts: list.inject ...</p>\n<p>Regards,</p>\n<p>Martin</p>",
        "id": 294315786,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925418
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe proper spelling is \"Proof General\" with capitals.  It was once the <br>\nmain user interface for Isabelle, and is still used in some other proof <br>\nassistants like Coq.</p>\n<p>In Isabelle2014 Proof General is no longer included, but it happens to <br>\nwork as \"optional component\" as explained in the NEWS.  In the next <br>\nrelease it will be no longer there -- its deletion is scheduled for the <br>\nend of this week!</p>\n<p>As a new user of Isabelle, there is no need to know what Proof General is <br>\nor was.  I do recommend, though, to study the Isabelle/jEdit manual, which <br>\nis available in the \"Documentation\" panel via the label \"jedit\".  For <br>\nexample, it explains how to input mathematical symbols (there is more <br>\nthan one way to do it).</p>\n<p>Makarius</p>\n<hr>\n<p><a href=\"http://stop-ttip.org\">http://stop-ttip.org</a>  742,965 people so far</p>\n<hr>",
        "id": 294315840,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925435
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nOn 27.10.2014 17:53, M A wrote:</p>\n<blockquote>\n<p>I can not find in plugin or other menu, where can show facts</p>\n<p>show \"list.inject\" this command can not show facts content.<br>\nYou should really read the documentation.</p>\n</blockquote>\n<p>You can print lemmas with the \"print_statement\" or \"thm\" commands or by<br>\nusing the find theorems tab of the query panel.</p>\n<blockquote>\n<p>lemma \"P ∧ Q ==&gt; P\"<br>\nsledgehammer learn_isar<br>\nsledgehammer [prover = e, fact_filter = mesh, verbose] </p>\n<p>\"mesh\": Including 1000 relevant facts: list.inject ...<br>\nDo not use fact_filter, verbose and learn_isar. At this point in your<br>\nIsabelle career, they won't help you.</p>\n</blockquote>",
        "id": 294315869,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925447
    },
    {
        "content": "<p>From: M A &lt;<a href=\"mailto:tesleft@hotmail.com\">tesleft@hotmail.com</a>&gt;<br>\nHi</p>\n<p>as it return the fact name, I would like to know the fact body<br>\nI have search search fact in help but can not find relevant information. How to show the fact body?</p>\n<p>for example rotate, body is (length xs) (xs++ys) == ys++xs<br>\nrotate (length xs) (xs++ys) == ys++xs</p>\n<p>$ hipspec Rotate.hs --auto --cg --verbosity=30<br>\nDepth 1: 11 terms, 5 tests, 29 evaluations, 11 classes, 0 raw equations.<br>\nDepth 2: 63 terms, 100 tests, 2151 evaluations, 48 classes, 15 raw equations.<br>\nDepth 3: 1688 terms, 100 tests, 63851 evaluations, 1303 classes, 385 raw equations.<br>\nProved xs++[] == xs by induction on xs using Z3<br>\nProved (xs++ys)++zs == xs++(ys++zs) by induction on xs using Z3<br>\nProved length (xs++ys) == length (ys++xs) by induction on ys,xs using Z3<br>\nProved rotate m [] == [] without induction using Z3<br>\nProved rotate m (rotate n xs) == rotate n (rotate m xs) by induction on n,m using Z3<br>\nProved rotate (S m) (rotate n xs) == rotate (S n) (rotate m xs) by induction on xs using Z3<br>\nProved rotate m (x:[]) == x:[] by induction on m using Z3<br>\nProved rotate m xs++rotate m xs == rotate m (xs++xs) by induction on m using Z3<br>\nProved length (rotate m xs) == length xs by induction on m using Z3<br>\nProved rotate (length xs) (xs++ys) == ys++xs by induction on xs using Z3<br>\nProved prop_rotate {- rotate (length xs) xs == xs -} without induction using Z3<br>\nProved:<br>\n    xs++[] == xs<br>\n    (xs++ys)++zs == xs++(ys++zs)<br>\n    length (xs++ys) == length (ys++xs)<br>\n    rotate m (rotate n xs) == rotate n (rotate m xs)<br>\n    rotate (S m) (rotate n xs) == rotate (S n) (rotate m xs)<br>\n    rotate m (x:[]) == x:[]<br>\n    rotate m xs++rotate m xs == rotate m (xs++xs)<br>\n    length (rotate m xs) == length xs<br>\n    rotate (length xs) (xs++ys) == ys++xs<br>\n    prop_rotate {- rotate (length xs) xs == xs -}</p>\n<p>Regards,</p>\n<p>Martin</p>",
        "id": 294315892,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925456
    }
]