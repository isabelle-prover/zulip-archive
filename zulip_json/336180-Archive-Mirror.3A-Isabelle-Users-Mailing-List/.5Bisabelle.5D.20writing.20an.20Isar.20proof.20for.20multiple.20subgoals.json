[
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nA small hint: You may call the fixed variables as you like, so</p>\n<p>fix P x assume \"⋀ y . x = y ⟹ P\" then show P by simp</p>\n<p>is also allowed (and may look nicer).</p>",
        "id": 294647232,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164610
    },
    {
        "content": "<p>From: Gergely Buday &lt;<a href=\"mailto:gbuday@gmail.com\">gbuday@gmail.com</a>&gt;<br>\nnominal_function simple5 :: \"lam ⇒ lam\"<br>\nwhere<br>\n  \"simple5 x = x\"<br>\nproof -<br>\n  show \"eqvt simple5_graph_aux\" by (simp add: eqvt_def simple5_graph_aux_def)<br>\nnext<br>\n  fix x y assume \"simple5_graph x y\" show True by auto<br>\nnext<br>\n  fix P x assume \"⋀ xa . x = xa ⟹ P\" then show P by simp<br>\nnext<br>\n  fix x xa assume \"x = xa\"<br>\n  from this show \"x = xa\" by assumption<br>\nqed</p>\n<p>proves the lemma.</p>\n<p>One thing is not clear: I get exclamation marks aside on the last two<br>\nassumption:</p>\n<p>after</p>\n<p>assume \"⋀ xa . x = xa ⟹ P\"</p>\n<p>Introduced fixed type variable(s): 'a in \"x__\"</p>\n<p>and after</p>\n<p>assume \"x = xa\"</p>\n<p>Introduced fixed type variable(s): 'a in \"x__\" or \"xa__\"</p>\n<p>I guess I can ignore these for now but when could this be significant?</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294647266,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164620
    },
    {
        "content": "<p>From: Buday Gergely &lt;<a href=\"mailto:gbuday@karolyrobert.hu\">gbuday@karolyrobert.hu</a>&gt;<br>\nHi,</p>\n<p>I have a Nominal Isabelle definition that ends up in four proof obligations. My question is more about Isar so write it to this general list.</p>\n<p>nominal_function simple4 :: \"lam ⇒ lam\"<br>\nwhere<br>\n  \"simple4 x = x\"</p>\n<p>goal (4 subgoals):</p>\n<ol>\n<li>eqvt simple4_graph_aux</li>\n<li>⋀x y. simple4_graph x y ⟹ True</li>\n<li>⋀P x. (⋀xa. x = xa ⟹ P) ⟹ P</li>\n<li>⋀x xa. x = xa ⟹ x = xa</li>\n</ol>\n<p>apply (simp_all add: eqvt_def simple4_graph_aux_def)</p>\n<p>would solve all the subgoals but how can I write an Isar proof that takes care of the subgoals individually?</p>\n<p>I started an Isar proof but it is not clear how can I proceed:</p>\n<p>theory Simple<br>\nimports \"../../thy/Nominal2-Isabelle2015/Nominal/Ex/Lambda\"</p>\n<p>begin</p>\n<p>nominal_function simple4 :: \"lam ⇒ lam\"<br>\nwhere<br>\n  \"simple4 x = x\"<br>\nproof -<br>\n  have \"eqvt simple4_graph_aux\" by (simp add: eqvt_def simple4_graph_aux_def)</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294649450,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165505
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nOn 13.07.2015 14:02, Buday Gergely wrote:</p>\n<blockquote>\n<p>nominal_function simple4 :: \"lam ⇒ lam\"<br>\nwhere<br>\n  \"simple4 x = x\"</p>\n<p>goal (4 subgoals):<br>\n1. eqvt simple4_graph_aux<br>\n2. ⋀x y. simple4_graph x y ⟹ True<br>\n3. ⋀P x. (⋀xa. x = xa ⟹ P) ⟹ P<br>\n4. ⋀x xa. x = xa ⟹ x = xa</p>\n<p>apply (simp_all add: eqvt_def simple4_graph_aux_def)</p>\n<p>would solve all the subgoals but how can I write an Isar proof that takes care of the subgoals individually?<br>\n[...]<br>\nnominal_function simple4 :: \"lam ⇒ lam\"<br>\nwhere<br>\n  \"simple4 x = x\"<br>\nproof -<br>\n  have \"eqvt simple4_graph_aux\" by (simp add: eqvt_def simple4_graph_aux_def)</p>\n</blockquote>\n<p>show \"eqvt simple4_graph_aux\" ...<br>\nnext<br>\n  fix x y assume \"simple4_graph x y\" show True ...<br>\nnext<br>\n   fix P y assume \"!!x. y = x ==&gt; P\" show P ...<br>\n...</p>",
        "id": 294649522,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165524
    },
    {
        "content": "<p>From: Buday Gergely &lt;<a href=\"mailto:gbuday@karolyrobert.hu\">gbuday@karolyrobert.hu</a>&gt;<br>\nLars Noschinski wrote:</p>\n<p>I know this is trivial with automatic methods but I need to learn Isar.</p>\n<p>I have a problem proving the third subgoal:</p>\n<p>lemma \"⋀ (P::bool) (x::lam). (⋀ xa. x = xa ⟹ P) ⟹ P\" <br>\nproof -<br>\n  fix P x assume \"⋀ xa. x = xa ⟹ P\" show P by auto</p>\n<p>Isabelle tells me</p>\n<p>show P∷bool <br>\nSuccessful attempt to solve goal by exported rule:<br>\n  (⋀xa∷?'a∷type. (?x2∷?'a∷type) = xa ⟹ ?P2∷bool) ⟹ ?P2 <br>\nproof (state): depth 0</p>\n<p>this:<br>\n  P∷bool</p>\n<p>goal:<br>\nNo subgoals! <br>\nFailed to apply initial proof method:<br>\ngoal (1 subgoal):</p>\n<ol>\n<li>P<br>\nvariables:<br>\n  P :: bool</li>\n</ol>",
        "id": 294649551,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165536
    },
    {
        "content": "<p>From: Jason Dagit &lt;<a href=\"mailto:dagitj@gmail.com\">dagitj@gmail.com</a>&gt;<br>\nHow did you get isabelle to show you the types? I've been searching for a<br>\nway to get this information while using jEdit (without having to C-hover).</p>\n<p>The problems I have with C-hover are:</p>\n<p>* it's slow to popup<br>\n  * if you need to see the types of multiple terms it's flaky (once it<br>\ndisappears it can be hard to make it appear again)</p>\n<p>* it's hard for me to hold down a control key while also positioning the<br>\nmouse just right. You can't position the mouse ahead of time because the<br>\ncontrol has to be down when the mouse moves for the hover to begin.</p>\n<p>* if you are trying to compare two complicated types for a small<br>\ndifference it's frustrating that you can't see them on the screen at the<br>\nsame time. I end up copying and pasting both types from the popup windows<br>\ninto my buffer to look a them.</p>",
        "id": 294649639,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165579
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear Jason,</p>\n<p>On 07/14/2015 07:30 PM, Jason Dagit wrote:</p>\n<blockquote>\n<p>How did you get isabelle to show you the types? I've been searching for a<br>\nway to get this information while using jEdit (without having to C-hover).</p>\n</blockquote>\n<p>you can use</p>\n<p>declare [[show_types=true]]</p>\n<p>in order to get a list of variables and their types as part of the output.</p>\n<p>(Two equivalent forms would be</p>\n<p>using [[show_types=true]]</p>\n<p>and</p>\n<p>from [[show_types=true]]</p>\n<p>depending on the context.)</p>\n<blockquote>\n<p>* if you are trying to compare two complicated types for a small<br>\ndifference it's frustrating that you can't see them on the screen at the<br>\nsame time. I end up copying and pasting both types from the popup windows<br>\ninto my buffer to look a them.</p>\n</blockquote>\n<p>Did you know that you can \"detach\" any popup you obtained via C-hover? <br>\nThere is a tiny icon in the left-upper corner (right next to the X) for <br>\ndoing so. This might be useful for comparing different terms.</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294649661,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165585
    },
    {
        "content": "<p>From: Jason Dagit &lt;<a href=\"mailto:dagitj@gmail.com\">dagitj@gmail.com</a>&gt;<br>\nOn Tue, Jul 14, 2015 at 10:48 AM, Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a></p>\n<blockquote>\n<p>wrote:</p>\n</blockquote>\n<blockquote>\n<p>Dear Jason,</p>\n<p>On 07/14/2015 07:30 PM, Jason Dagit wrote:</p>\n<blockquote>\n<p>How did you get isabelle to show you the types? I've been searching for a<br>\nway to get this information while using jEdit (without having to C-hover).<br>\n</p>\n</blockquote>\n<p>you can use</p>\n<p>declare [[show_types=true]]</p>\n<p>in order to get a list of variables and their types as part of the output.</p>\n<p>(Two equivalent forms would be</p>\n<p>using [[show_types=true]]</p>\n<p>and</p>\n<p>from [[show_types=true]]</p>\n<p>depending on the context.)</p>\n</blockquote>\n<p>Thanks! I didn't know I could do that. It looks like in the future I can<br>\nuse print_options to get a listing of all the current options.</p>\n<blockquote>\n<p>* if you are trying to compare two complicated types for a small</p>\n<blockquote>\n<p>difference it's frustrating that you can't see them on the screen at the<br>\nsame time. I end up copying and pasting both types from the popup windows<br>\ninto my buffer to look a them.<br>\n</p>\n</blockquote>\n<p>Did you know that you can \"detach\" any popup you obtained via C-hover?<br>\nThere is a tiny icon in the left-upper corner (right next to the X) for<br>\ndoing so. This might be useful for comparing different terms.<br>\n</p>\n</blockquote>\n<p>Yeah that might help a little. It would help more if the detached window<br>\nhad something connecting it to place it was detached from.</p>\n<p>Thanks,<br>\nJason</p>",
        "id": 294649673,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165591
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nOn 14.07.2015 11:19, Buday Gergely wrote:</p>\n<blockquote>\n<p>I have a problem proving the third subgoal:</p>\n<p>lemma \"⋀ (P::bool) (x::lam). (⋀ xa. x = xa ⟹ P) ⟹ P\" <br>\nproof -<br>\n  fix P x assume \"⋀ xa. x = xa ⟹ P\" show P by auto</p>\n<p>Isabelle tells me</p>\n<p>show P∷bool <br>\nSuccessful attempt to solve goal by exported rule:<br>\n  (⋀xa∷?'a∷type. (?x2∷?'a∷type) = xa ⟹ ?P2∷bool) ⟹ ?P2 <br>\nproof (state): depth 0</p>\n<p>this:<br>\n  P∷bool</p>\n</blockquote>\n<p>This tells you that the show statement can discharge one of the subgoals ...</p>\n<blockquote>\n<p>goal:<br>\nNo subgoals! <br>\nFailed to apply initial proof method:<br>\ngoal (1 subgoal):<br>\n 1. P<br>\nvariables:<br>\n  P :: bool</p>\n</blockquote>\n<p>... but auto failed to solve it. Notice the suspicious lack of \"!!xa. x<br>\n= xa\" in the second part? That is because you did not feed the<br>\nassumption into the show statement (which you could do e.g. using \"then\").</p>\n<p>-- Lars</p>",
        "id": 294649685,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165597
    }
]