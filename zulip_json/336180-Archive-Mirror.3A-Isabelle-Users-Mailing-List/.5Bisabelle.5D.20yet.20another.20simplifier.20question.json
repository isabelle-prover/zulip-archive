[
    {
        "content": "<p>From: noam neer &lt;<a href=\"mailto:noamneer@gmail.com\">noamneer@gmail.com</a>&gt;<br>\nhi everybody.<br>\nI'm interested in what exactly happens in the following proof -</p>\n<p>theory tmp<br>\n    imports Complex_Main<br>\n    begin<br>\n        lemma \"sin((x::real) + y + x) = sin(2*x + y)\"<br>\n        using [[simp_trace=true]]<br>\n        by simp<br>\n    end</p>\n<p>the proof succeeds, and because of the sin() I guess it can't be due to<br>\nlinarith.<br>\nso I guess there is a true rewriting process here, but I failed to<br>\nunderstand<br>\nfrom the output what exactly happens and how the following expression<br>\nappeared<br>\nin the process -</p>\n<p>(Numeral1 / Numeral1 + Numeral1 / Numeral1) * (x / 1) + y = 2 /<br>\nNumeral1 * (x / 1) + (y + 0)</p>\n<p>where did all the numerals come from? I expect a rewriting process to<br>\nremove things<br>\nlike Numerla1, not add them.</p>\n<p>thanx, Noam</p>",
        "id": 294699499,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178711
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn 04/11/2016 04:53, noam neer wrote:</p>\n<blockquote>\n<p>hi everybody.<br>\nI'm interested in what exactly happens in the following proof -</p>\n<p>theory tmp<br>\n    imports Complex_Main<br>\n    begin<br>\n        lemma \"sin((x::real) + y + x) = sin(2*x + y)\"<br>\n        using [[simp_trace=true]]<br>\n        by simp<br>\n    end</p>\n<p>the proof succeeds, and because of the sin() I guess it can't be due to<br>\nlinarith.<br>\nso I guess there is a true rewriting process here, but I failed to<br>\nunderstand<br>\nfrom the output what exactly happens and how the following expression<br>\nappeared<br>\nin the process -</p>\n<p>(Numeral1 / Numeral1 + Numeral1 / Numeral1) * (x / 1) + y = 2 /<br>\nNumeral1 * (x / 1) + (y + 0)</p>\n</blockquote>\n<p>This is a step in the process that rewrites x+y+x to 2*x+y. As it says in the trace:</p>\n<p>Procedure \"Numeral_Simprocs.field_combine_numerals\" produced rewrite rule:<br>\nx + y + x ≡ 2 * x + y</p>\n<p>In the next step in the trace, the goal is solved by reflexivity.</p>\n<p>Numeral1 is introduced locally by the proof method that combines summands.</p>\n<p>Tobias</p>\n<blockquote>\n<p>where did all the numerals come from? I expect a rewriting process to<br>\nremove things<br>\nlike Numerla1, not add them.</p>\n<p>thanx, Noam</p>\n<p><a href=\"/user_uploads/14278/2wLPC4AG5ghGFhEMvn0EVy_A/smime.p7s\">smime.p7s</a></p>\n</blockquote>",
        "id": 294699505,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178714
    },
    {
        "content": "<p>From: noam neer &lt;<a href=\"mailto:noamneer@gmail.com\">noamneer@gmail.com</a>&gt;<br>\nfirst I must admit I didn't know the simplifier can do things to sub<br>\nexpressions besides application of identities. good to know that.</p>\n<p>second, is there a documentation of what \"field_combine_numerals\" can and<br>\ncan't do? for example to my surprise the following fails (and this was the<br>\ntrigger to the original question) -</p>\n<p>lemma \"sin((x::real) + y + x + y) = sin(2<em>x + 2</em>y)\"<br>\n    using [[simp_trace=true]]<br>\n    by simp    (* doesn't work *)</p>\n<p>also, I must say that the simplifier's output is very hard to read. it<br>\nwould have been much easier to understand it if there was some identation,<br>\nand if there was some declaration where the output of a simproc begins (I<br>\nassume much of the output before the produced rewrite rule also came from<br>\nthe simproc.) can we request this for the next Isabelle revision ?</p>\n<p>many thanks,<br>\nNoam</p>",
        "id": 294699773,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178787
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nIn such situations, you should try simplifying with</p>\n<p>apply (simp add: algebra_simps)</p>\n<p>It works in your example. Sledgehammer also solves your problem.</p>\n<p>There are many other useful packages of rules for such situations, including field_simps and divide_simps.</p>\n<p>To be quite honest, I never try to trace the simplifier. The output is simply too massive. I just try something else.</p>\n<p>Larry Paulson</p>",
        "id": 294699810,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178799
    },
    {
        "content": "<p>From: noam neer &lt;<a href=\"mailto:noamneer@gmail.com\">noamneer@gmail.com</a>&gt;<br>\nhi,</p>\n<p>I just experimented with sledgehammer for the first time.<br>\nit seems quite impressive, but also a little unstable.<br>\nsometimes it doesn't return any output, sometimes I get messages like<br>\n    \"z3\": Timed out.<br>\n    (and four more lines like this)<br>\nand sometimes it does return a useful command.<br>\nso it seems I always have to try it several times.<br>\nis there a way to make it more stable?<br>\nI'm using the default installation of Isabelle 2015 on win7.</p>\n<p>also, I bring here two examples for which sledgehammer failed repeatedly.<br>\nwhat would be the simplest way to prove them?</p>\n<p>lemma<br>\n        fixes   a::real<br>\n        assumes \"a&gt;0\"<br>\n        shows   \"1/a - 1/(a+1) = 1/(a*(a+1))\"<br>\n    oops</p>\n<p>lemma<br>\n      fixes   a b c :: real<br>\n      assumes \"a&gt;0\"<br>\n      shows   \"((a powr c) + (b powr c)) powr 2 =<br>\n               (a powr (2<em>c)) + 2</em>(a powr c)<em>(b powr c) + (b powr (2</em>c))\"<br>\n      oops</p>\n<p>thnx, Noam</p>",
        "id": 294699829,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178806
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat is already quite old: the current release is Isabelle2016 (February<br>\n2016), and we are presently moving towards Isabelle2016-1 (December<br>\n2016) -- see also <a href=\"http://isabelle.in.tum.de/website-Isabelle2016-1-RC1\">http://isabelle.in.tum.de/website-Isabelle2016-1-RC1</a></p>\n<p>Makarius</p>",
        "id": 294699866,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178822
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat is already quite old: the current release is Isabelle2016 (February<br>\n2016), and we are presently moving towards Isabelle2016-1 (December<br>\n2016) -- see also <a href=\"http://isabelle.in.tum.de/website-Isabelle2016-1-RC1\">http://isabelle.in.tum.de/website-Isabelle2016-1-RC1</a></p>\n<p>Makarius</p>",
        "id": 294699871,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178824
    },
    {
        "content": "<p>From: noam neer &lt;<a href=\"mailto:noamneer@gmail.com\">noamneer@gmail.com</a>&gt;<br>\nwell, the computer itself is much older.<br>\ndoes Isabelle 2016 require significantly more memory?</p>",
        "id": 294699887,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178830
    },
    {
        "content": "<p>From: noam neer &lt;<a href=\"mailto:noamneer@gmail.com\">noamneer@gmail.com</a>&gt;<br>\nwell, the computer itself is much older.<br>\ndoes Isabelle 2016 require significantly more memory?</p>",
        "id": 294699903,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178836
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nNot much. You should try.</p>\n<p>A very old computer might be actually a source of these problems. The<br>\nminimal system requirements for Isabelle are 2 cores + 4 GB RAM. This is<br>\nnot spelt out anywhere, because that is really minimal -- consumer<br>\nhardware from many years ago had this already.</p>\n<p>Makarius</p>",
        "id": 294699929,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178842
    },
    {
        "content": "<p>From: noam neer &lt;<a href=\"mailto:noamneer@gmail.com\">noamneer@gmail.com</a>&gt;<br>\nI have an i3 processor and 4GB RAM.</p>\n<p>but, does sledgehammer give the external provers a time limit,<br>\na limit on the search space/number of deductions or no limit at all?<br>\nin the first case, I guess one can expect different computers will differ<br>\nnot only in running time but in the actual results too.</p>",
        "id": 294699964,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178848
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nYes, there are many such policies built into it.</p>\n<p>Apart from that, Windows can sometimes cause problems, e.g. via<br>\nAntivirus tools.</p>\n<p>You should definitely try a newer Isabelle version: all aspects of the<br>\nsystem are monotonically improved. There is no point to try isolating<br>\nproblems in old versions.</p>\n<p>Makarius</p>",
        "id": 294699984,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178855
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nSledgehammer is a very complicated subsystem of Isabelle, which attempts to prove subgoals using external provers. It is often successful, but of course, many problems are too difficult for it.</p>\n<p>Your first problem looks like it would be quite easy if you call the simplifier using divide_simps (and don’t forget to include your assumption a&gt;0).</p>\n<p>And yes, you definitely need to use a recent version of Isabelle. I suggest that you download the release candidate,</p>\n<p><a href=\"http://isabelle.in.tum.de/website-Isabelle2016-1-RC2\">http://isabelle.in.tum.de/website-Isabelle2016-1-RC2</a> &lt;<a href=\"http://isabelle.in.tum.de/website-Isabelle2016-1-RC2\">http://isabelle.in.tum.de/website-Isabelle2016-1-RC2</a>&gt;. </p>\n<p>Larry Paulson</p>",
        "id": 294700049,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178885
    }
]